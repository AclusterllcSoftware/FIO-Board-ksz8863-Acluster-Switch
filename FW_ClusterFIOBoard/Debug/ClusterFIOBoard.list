
ClusterFIOBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e8c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0801115c  0801115c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011884  08011884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801188c  0801188c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011890  08011890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08011894  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  080118f4  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  08011954  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  24000120  080119b4  00013120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000c34  080119b4  00013c34  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ae1b  00000000  00000000  0001314e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fb  00000000  00000000  0003df69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f8  00000000  00000000  00042768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ba  00000000  00000000  00044860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f0d  00000000  00000000  0004621a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ba10  00000000  00000000  00080127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177db9  00000000  00000000  000abb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002238f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093d8  00000000  00000000  00223934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0022cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000120 	.word	0x24000120
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011144 	.word	0x08011144

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000124 	.word	0x24000124
 800030c:	08011144 	.word	0x08011144

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32  // number of total blocks for 16Mb flash, 32x16x16 pages and 32x16x16x256 Bytes

void W25Q_Delay(uint32_t time)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f003 fa25 	bl	8003b08 <HAL_Delay>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <csLOW>:

void csLOW (void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <csLOW+0x14>)
 80006d2:	f008 fad7 	bl	8008c84 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58020400 	.word	0x58020400

080006e0 <csHIGH>:

void csHIGH (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	4802      	ldr	r0, [pc, #8]	@ (80006f4 <csHIGH+0x14>)
 80006ea:	f008 facb 	bl	8008c84 <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	58020400 	.word	0x58020400

080006f8 <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	b29a      	uxth	r2, r3
 8000708:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4803      	ldr	r0, [pc, #12]	@ (800071c <SPI_Write+0x24>)
 8000710:	f00b fd44 	bl	800c19c <HAL_SPI_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	240003bc 	.word	0x240003bc

08000720 <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b29a      	uxth	r2, r3
 800072e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <SPI_Read+0x24>)
 8000736:	f00b ff23 	bl	800c580 <HAL_SPI_Receive>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	240003bc 	.word	0x240003bc

08000748 <W25Q_ReadID>:
	csHIGH();
	W25Q_Delay(100);
}

uint32_t W25Q_ReadID (void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
//	uint8_t tData = 0x9F;  // Read JEDEC ID
	uint8_t tData[1] = {0x9F};  // Read JEDEC ID
 800074e:	239f      	movs	r3, #159	@ 0x9f
 8000750:	713b      	strb	r3, [r7, #4]
	uint8_t rData[3];
	csLOW();
 8000752:	f7ff ffb9 	bl	80006c8 <csLOW>
//	SPI_Write(&tData, 1);
	SPI_Write(tData, 1);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffcc 	bl	80006f8 <SPI_Write>
	SPI_Read(rData, 3);
 8000760:	463b      	mov	r3, r7
 8000762:	2103      	movs	r1, #3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffdb 	bl	8000720 <SPI_Read>
	csHIGH();
 800076a:	f7ff ffb9 	bl	80006e0 <csHIGH>
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
 800076e:	783b      	ldrb	r3, [r7, #0]
 8000770:	041a      	lsls	r2, r3, #16
 8000772:	787b      	ldrb	r3, [r7, #1]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	4313      	orrs	r3, r2
 8000778:	78ba      	ldrb	r2, [r7, #2]
 800077a:	4313      	orrs	r3, r2
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <W25Q_Reset_DMA>:
	    }
}


void W25Q_Reset_DMA (void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66;  // enable Reset
 800078a:	2366      	movs	r3, #102	@ 0x66
 800078c:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99;  // Reset
 800078e:	2399      	movs	r3, #153	@ 0x99
 8000790:	717b      	strb	r3, [r7, #5]
	csLOW();
 8000792:	f7ff ff99 	bl	80006c8 <csLOW>
//	SPI_Write(tData, 2);
//	SPI_TransmitReceive_DMA(tData, NULL, 2);
	HAL_SPI_TransmitReceive_DMA(&hspi1,tData, NULL, 2);
 8000796:	1d39      	adds	r1, r7, #4
 8000798:	2302      	movs	r3, #2
 800079a:	2200      	movs	r2, #0
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <W25Q_Reset_DMA+0x30>)
 800079e:	f00c fbcd 	bl	800cf3c <HAL_SPI_TransmitReceive_DMA>
	csHIGH();
 80007a2:	f7ff ff9d 	bl	80006e0 <csHIGH>
	W25Q_Delay(100);
 80007a6:	2064      	movs	r0, #100	@ 0x64
 80007a8:	f7ff ff82 	bl	80006b0 <W25Q_Delay>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	240003bc 	.word	0x240003bc

080007b8 <W25Q_ReadID_DMA>:



uint32_t W25Q_ReadID_DMA (void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
//	uint8_t pData[2] = {0x9F,0};  // Read JEDEC ID
	uint8_t tData = 0x9F;  // Read JEDEC ID
 80007be:	239f      	movs	r3, #159	@ 0x9f
 80007c0:	71fb      	strb	r3, [r7, #7]
//	}
//
//	csHIGH();


	csLOW();
 80007c2:	f7ff ff81 	bl	80006c8 <csLOW>
	if(HAL_SPI_TransmitReceive_DMA(&hspi1, &tData, rData, 1) == HAL_OK)
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	1df9      	adds	r1, r7, #7
 80007ca:	2301      	movs	r3, #1
 80007cc:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <W25Q_ReadID_DMA+0x40>)
 80007ce:	f00c fbb5 	bl	800cf3c <HAL_SPI_TransmitReceive_DMA>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <W25Q_ReadID_DMA+0x26>
	{
		DebugPrintf("ok. trdma\n");
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <W25Q_ReadID_DMA+0x44>)
 80007da:	f000 f811 	bl	8000800 <DebugPrintf>
	}
		csHIGH();
 80007de:	f7ff ff7f 	bl	80006e0 <csHIGH>


//	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
	return ((rData[2]<<16)|(rData[1]<<8)|rData[0]);
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	041a      	lsls	r2, r3, #16
 80007e6:	797b      	ldrb	r3, [r7, #5]
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	4313      	orrs	r3, r2
 80007ec:	793a      	ldrb	r2, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
//	return rData;
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	240003bc 	.word	0x240003bc
 80007fc:	0801115c 	.word	0x0801115c

08000800 <DebugPrintf>:
#include "stdlib.h"

extern UART_HandleTypeDef huart3;


void DebugPrintf(const char *fmt, ...) {
 8000800:	b40f      	push	{r0, r1, r2, r3}
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
    static char buffer[256]; // Adjust buffer size as needed
    va_list args;
    va_start(args, fmt);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000816:	480a      	ldr	r0, [pc, #40]	@ (8000840 <DebugPrintf+0x40>)
 8000818:	f010 f806 	bl	8010828 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800081c:	4808      	ldr	r0, [pc, #32]	@ (8000840 <DebugPrintf+0x40>)
 800081e:	f7ff fd77 	bl	8000310 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	4905      	ldr	r1, [pc, #20]	@ (8000840 <DebugPrintf+0x40>)
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <DebugPrintf+0x44>)
 800082e:	f00e f8cb 	bl	800e9c8 <HAL_UART_Transmit>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr
 8000840:	2400013c 	.word	0x2400013c
 8000844:	24000a14 	.word	0x24000a14

08000848 <DebugPrintBinary>:

void DebugPrintBinary(uint8_t byte)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8000852:	2307      	movs	r3, #7
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e00c      	b.n	8000872 <DebugPrintBinary+0x2a>
    	DebugPrintf("%d", (byte >> i) & 1);
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	fa42 f303 	asr.w	r3, r2, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <DebugPrintBinary+0x3c>)
 8000868:	f7ff ffca 	bl	8000800 <DebugPrintf>
    for (int i = 7; i >= 0; i--) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3b01      	subs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	daef      	bge.n	8000858 <DebugPrintBinary+0x10>
    }

}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08011168 	.word	0x08011168

08000888 <printMacAddrAsBytes>:
#include "stdlib.h"


// Function to print MAC address as bytes
void printMacAddrAsBytes(const MacAddr *mac)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af04      	add	r7, sp, #16
 800088e:	6078      	str	r0, [r7, #4]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
           mac->b[0], mac->b[1], mac->b[2], mac->b[3], mac->b[4], mac->b[5]);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000894:	4618      	mov	r0, r3
           mac->b[0], mac->b[1], mac->b[2], mac->b[3], mac->b[4], mac->b[5]);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	785b      	ldrb	r3, [r3, #1]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
 800089a:	461c      	mov	r4, r3
           mac->b[0], mac->b[1], mac->b[2], mac->b[3], mac->b[4], mac->b[5]);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	789b      	ldrb	r3, [r3, #2]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008a0:	461d      	mov	r5, r3
           mac->b[0], mac->b[1], mac->b[2], mac->b[3], mac->b[4], mac->b[5]);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	78db      	ldrb	r3, [r3, #3]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008a6:	461a      	mov	r2, r3
           mac->b[0], mac->b[1], mac->b[2], mac->b[3], mac->b[4], mac->b[5]);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008ac:	4619      	mov	r1, r3
           mac->b[0], mac->b[1], mac->b[2], mac->b[3], mac->b[4], mac->b[5]);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
    DebugPrintf("MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	9101      	str	r1, [sp, #4]
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	462b      	mov	r3, r5
 80008ba:	4622      	mov	r2, r4
 80008bc:	4601      	mov	r1, r0
 80008be:	4803      	ldr	r0, [pc, #12]	@ (80008cc <printMacAddrAsBytes+0x44>)
 80008c0:	f7ff ff9e 	bl	8000800 <DebugPrintf>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bdb0      	pop	{r4, r5, r7, pc}
 80008cc:	08011210 	.word	0x08011210

080008d0 <ksz_csLOW>:

extern SPI_HandleTypeDef hspi4;
#define KSZ_SPI hspi4

void ksz_csLOW (void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	4802      	ldr	r0, [pc, #8]	@ (80008e4 <ksz_csLOW+0x14>)
 80008da:	f008 f9d3 	bl	8008c84 <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	58021000 	.word	0x58021000

080008e8 <ksz_csHIGH>:

void ksz_csHIGH (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <ksz_csHIGH+0x14>)
 80008f2:	f008 f9c7 	bl	8008c84 <HAL_GPIO_WritePin>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58021000 	.word	0x58021000

08000900 <ksz_SPI_Write>:

void ksz_SPI_Write (uint8_t *data, uint8_t len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&KSZ_SPI, data, len, 2000);
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	b29a      	uxth	r2, r3
 8000910:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	4803      	ldr	r0, [pc, #12]	@ (8000924 <ksz_SPI_Write+0x24>)
 8000918:	f00b fc40 	bl	800c19c <HAL_SPI_Transmit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000444 	.word	0x24000444

08000928 <ksz_SPI_Read>:

void ksz_SPI_Read (uint8_t *data, uint32_t len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&KSZ_SPI, data, len, 5000);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b29a      	uxth	r2, r3
 8000936:	f241 3388 	movw	r3, #5000	@ 0x1388
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <ksz_SPI_Read+0x24>)
 800093e:	f00b fe1f 	bl	800c580 <HAL_SPI_Receive>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	24000444 	.word	0x24000444

08000950 <ksz_ReadID>:


uint32_t ksz_ReadID(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x03;
 8000956:	2303      	movs	r3, #3
 8000958:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	717b      	strb	r3, [r7, #5]
	uint8_t rData[1] = {0};//[3];
 800095e:	2300      	movs	r3, #0
 8000960:	703b      	strb	r3, [r7, #0]
	ksz_csLOW();
 8000962:	f7ff ffb5 	bl	80008d0 <ksz_csLOW>
	ksz_SPI_Write(tData, 2);
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffc8 	bl	8000900 <ksz_SPI_Write>
	ksz_SPI_Read(rData, 1);
 8000970:	463b      	mov	r3, r7
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffd7 	bl	8000928 <ksz_SPI_Read>
	ksz_csHIGH();
 800097a:	f7ff ffb5 	bl	80008e8 <ksz_csHIGH>
	return rData[0];
 800097e:	783b      	ldrb	r3, [r7, #0]
//	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <ksz_ReadID_DMA>:
/**************************************************************************************************/

uint8_t gtData[2];
uint8_t grData[2];
uint32_t ksz_ReadID_DMA(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
//	uint8_t tData[2];
	gtData[0] = 0x03;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <ksz_ReadID_DMA+0x58>)
 800098e:	2203      	movs	r2, #3
 8000990:	701a      	strb	r2, [r3, #0]
	gtData[1] = 0x00;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <ksz_ReadID_DMA+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	705a      	strb	r2, [r3, #1]
//	}
//	ksz_csHIGH();
//	return 3;


	ksz_csLOW();
 8000998:	f7ff ff9a 	bl	80008d0 <ksz_csLOW>
	if(HAL_SPI_TransmitReceive_DMA(&hspi4, gtData, NULL, 2)==HAL_OK)
 800099c:	2302      	movs	r3, #2
 800099e:	2200      	movs	r2, #0
 80009a0:	490f      	ldr	r1, [pc, #60]	@ (80009e0 <ksz_ReadID_DMA+0x58>)
 80009a2:	4810      	ldr	r0, [pc, #64]	@ (80009e4 <ksz_ReadID_DMA+0x5c>)
 80009a4:	f00c faca 	bl	800cf3c <HAL_SPI_TransmitReceive_DMA>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <ksz_ReadID_DMA+0x2c>
	{
		DebugPrintf("ok. tdma\n");
 80009ae:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <ksz_ReadID_DMA+0x60>)
 80009b0:	f7ff ff26 	bl	8000800 <DebugPrintf>
	}
	HAL_Delay(500);
 80009b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009b8:	f003 f8a6 	bl	8003b08 <HAL_Delay>
	if(HAL_SPI_TransmitReceive_DMA(&hspi4,NULL, grData, 1) == HAL_OK)
 80009bc:	2301      	movs	r3, #1
 80009be:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <ksz_ReadID_DMA+0x64>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <ksz_ReadID_DMA+0x5c>)
 80009c4:	f00c faba 	bl	800cf3c <HAL_SPI_TransmitReceive_DMA>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <ksz_ReadID_DMA+0x4c>
	{
		DebugPrintf("ok. rdma\n");
 80009ce:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <ksz_ReadID_DMA+0x68>)
 80009d0:	f7ff ff16 	bl	8000800 <DebugPrintf>
	}

	ksz_csHIGH();
 80009d4:	f7ff ff88 	bl	80008e8 <ksz_csHIGH>

	return grData[0];
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <ksz_ReadID_DMA+0x64>)
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2400023c 	.word	0x2400023c
 80009e4:	24000444 	.word	0x24000444
 80009e8:	0801126c 	.word	0x0801126c
 80009ec:	24000240 	.word	0x24000240
 80009f0:	08011278 	.word	0x08011278

080009f4 <ksz8863Init>:

// KSZ8863 Ethernet switch initialization


error_t ksz8863Init()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  uint8_t port;

  uint8_t temp;

  //Debug message
  DebugPrintf("Initializing KSZ8863...\r\n");
 80009fa:	4839      	ldr	r0, [pc, #228]	@ (8000ae0 <ksz8863Init+0xec>)
 80009fc:	f7ff ff00 	bl	8000800 <DebugPrintf>

  //Wait for the interface to be ready
  do
  {
     //Read CHIP_ID0 register
     temp = ksz8863ReadSwitchReg(KSZ8863_CHIP_ID0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 fb35 	bl	8001070 <ksz8863ReadSwitchReg>
 8000a06:	4603      	mov	r3, r0
 8000a08:	717b      	strb	r3, [r7, #5]

     //The returned data is invalid until the serial interface is ready
  } while(temp != KSZ8863_CHIP_ID0_FAMILY_ID_DEFAULT);
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b88      	cmp	r3, #136	@ 0x88
 8000a0e:	d1f7      	bne.n	8000a00 <ksz8863Init+0xc>

  //Enable tail tag feature
  temp = ksz8863ReadSwitchReg(KSZ8863_GLOBAL_CTRL1);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 fb2d 	bl	8001070 <ksz8863ReadSwitchReg>
 8000a16:	4603      	mov	r3, r0
 8000a18:	717b      	strb	r3, [r7, #5]
  temp |= KSZ8863_GLOBAL_CTRL1_TAIL_TAG_EN;
 8000a1a:	797b      	ldrb	r3, [r7, #5]
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a20:	717b      	strb	r3, [r7, #5]
  ksz8863WriteSwitchReg(KSZ8863_GLOBAL_CTRL1, temp);
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	4619      	mov	r1, r3
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 fb06 	bl	8001038 <ksz8863WriteSwitchReg>

  //Loop through the ports
  for(port = KSZ8863_PORT1; port <= KSZ8863_PORT2; port++)
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	e007      	b.n	8000a42 <ksz8863Init+0x4e>
  {

   //Enable transmission, reception and address learning
   ksz8863SetPortState(port, SWITCH_PORT_STATE_FORWARDING);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2105      	movs	r1, #5
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f992 	bl	8000d60 <ksz8863SetPortState>
  for(port = KSZ8863_PORT1; port <= KSZ8863_PORT2; port++)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d9f4      	bls.n	8000a32 <ksz8863Init+0x3e>

  }
   ksz8863SetPowerManagementMode(NORMAL_MODE);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fb99 	bl	8001180 <ksz8863SetPowerManagementMode>
   ksz8863SetCpuClockSelection(CLOCK_125_MHZ);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f000 f8b2 	bl	8000bb8 <ksz8863SetCpuClockSelection>
   ksz8863EnablePassAllFrame(false);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f847 	bl	8000ae8 <ksz8863EnablePassAllFrame>
   ksz8863EnableAging(true);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 f863 	bl	8000b26 <ksz8863EnableAging>
   
   for (uint8_t port = 1; port <=2 ; port++)
 8000a60:	2301      	movs	r3, #1
 8000a62:	71bb      	strb	r3, [r7, #6]
 8000a64:	e031      	b.n	8000aca <ksz8863Init+0xd6>
   {
      ksz8863PowerUpPort(port);
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fbb1 	bl	80011d0 <ksz8863PowerUpPort>
      ksz8863EnableAutoNegotiationPort(port);
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fbd4 	bl	800121e <ksz8863EnableAutoNegotiationPort>
      ksz8863SetForceLinkSpeed(port, NIC_LINK_SPEED_100MBPS); // set linkspeed
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	491a      	ldr	r1, [pc, #104]	@ (8000ae4 <ksz8863Init+0xf0>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fbf6 	bl	800126c <ksz8863SetForceLinkSpeed>
      ksz8863SetForcedDuplexMode(port, true); // set full duplex mode
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fc2b 	bl	80012e0 <ksz8863SetForcedDuplexMode>
      ksz8863TurnOnPortLed(port);
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc59 	bl	8001344 <ksz8863TurnOnPortLed>
      ksz8863EnableFlowControlAdvertisementOnPort(port, true);
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2101      	movs	r1, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fc97 	bl	80013ca <ksz8863EnableFlowControlAdvertisementOnPort>
      ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort(port, true);
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fcc4 	bl	800142e <ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort>
      ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort(port, true);
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fcf1 	bl	8001492 <ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort>
      ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort(port, true);
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fd1e 	bl	80014f6 <ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort>
      ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort(port, true);
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fd4b 	bl	800155a <ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort>
   for (uint8_t port = 1; port <=2 ; port++)
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	71bb      	strb	r3, [r7, #6]
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d9ca      	bls.n	8000a66 <ksz8863Init+0x72>
   }

  // Dump switch registers for debugging purpose
  // ksz8863DumpSwitchReg();

   ksz8863SwitchStart();
 8000ad0:	f000 f848 	bl	8000b64 <ksz8863SwitchStart>

  //Successful initialization
  return NO_ERROR;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	08011284 	.word	0x08011284
 8000ae4:	05f5e100 	.word	0x05f5e100

08000ae8 <ksz8863EnablePassAllFrame>:
}

// enable pass all frame (for debugging)

void ksz8863EnablePassAllFrame(bool flag)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
   // read register
   temp = ksz8863ReadSwitchReg(KSZ8863_GLOBAL_CTRL1);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 fabc 	bl	8001070 <ksz8863ReadSwitchReg>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]

   if(flag)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <ksz8863EnablePassAllFrame+0x24>
   {
      temp |= KSZ8863_GLOBAL_CTRL1_PASS_ALL_FRAMES;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	e003      	b.n	8000b14 <ksz8863EnablePassAllFrame+0x2c>
   }
   else
   {
      temp &= ~KSZ8863_GLOBAL_CTRL1_PASS_ALL_FRAMES;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b12:	73fb      	strb	r3, [r7, #15]
   }

   ksz8863WriteSwitchReg(KSZ8863_GLOBAL_CTRL1, temp);
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4619      	mov	r1, r3
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 fa8d 	bl	8001038 <ksz8863WriteSwitchReg>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <ksz8863EnableAging>:
//*****************  aging related features ****************************//

// enable or disable age function in chip

void ksz8863EnableAging(bool flag)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
   // read register
   temp = ksz8863ReadSwitchReg(KSZ8863_GLOBAL_CTRL1);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fa9d 	bl	8001070 <ksz8863ReadSwitchReg>
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]

   if(flag)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <ksz8863EnableAging+0x24>
   {
      temp |= KSZ8863_GLOBAL_CTRL1_AGING_EN;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e003      	b.n	8000b52 <ksz8863EnableAging+0x2c>
   }
   else
   {
      temp &= ~KSZ8863_GLOBAL_CTRL1_AGING_EN;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	73fb      	strb	r3, [r7, #15]
   }

   ksz8863WriteSwitchReg(KSZ8863_GLOBAL_CTRL1, temp);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2003      	movs	r0, #3
 8000b58:	f000 fa6e 	bl	8001038 <ksz8863WriteSwitchReg>
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ksz8863SwitchStart>:
//********************************************************************* */

// turn on switch operation

void ksz8863SwitchStart()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
   uint8_t temp;

   // read register
   temp = ksz8863ReadSwitchReg(KSZ8863_CHIP_ID1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fa80 	bl	8001070 <ksz8863ReadSwitchReg>
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
   DebugPrintBinary(temp);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe66 	bl	8000848 <DebugPrintBinary>
   DebugPrintf("\n");
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <ksz8863SwitchStart+0x4c>)
 8000b7e:	f7ff fe3f 	bl	8000800 <DebugPrintf>
   //
   temp |= KSZ8863_CHIP_ID1_START_SWITCH;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
   ksz8863WriteSwitchReg(KSZ8863_CHIP_ID1, temp);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 fa52 	bl	8001038 <ksz8863WriteSwitchReg>

   DebugPrintBinary(temp);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe56 	bl	8000848 <DebugPrintBinary>
   DebugPrintf("\n");
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <ksz8863SwitchStart+0x4c>)
 8000b9e:	f7ff fe2f 	bl	8000800 <DebugPrintf>

   DebugPrintf("start switch\n");
 8000ba2:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <ksz8863SwitchStart+0x50>)
 8000ba4:	f7ff fe2c 	bl	8000800 <DebugPrintf>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	080112a0 	.word	0x080112a0
 8000bb4:	080112a4 	.word	0x080112a4

08000bb8 <ksz8863SetCpuClockSelection>:
}


// Function to set the CPU interface clock selection
void ksz8863SetCpuClockSelection(CpuClockSelection clockSelection) 
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
   uint8_t temp;

   temp = ksz8863ReadSwitchReg(KSZ8863_GLOBAL_CTRL9);
 8000bc2:	200b      	movs	r0, #11
 8000bc4:	f000 fa54 	bl	8001070 <ksz8863ReadSwitchReg>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]

    // Clear the bits 6:7 (masking with 0x3F)
    temp &= ~KSZ8863_GLOBAL_CTRL9_CPU_IF_CLK_SEL;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bd2:	73fb      	strb	r3, [r7, #15]

    // Set the new clock selection value (shifting clockSelection into bits 6:7)
    temp |= (clockSelection << 6);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	019b      	lsls	r3, r3, #6
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	73fb      	strb	r3, [r7, #15]

    // Write the updated value back to the register
    ksz8863WriteSwitchReg(KSZ8863_GLOBAL_CTRL9, temp);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	4619      	mov	r1, r3
 8000be8:	200b      	movs	r0, #11
 8000bea:	f000 fa25 	bl	8001038 <ksz8863WriteSwitchReg>
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <ksz8863GetLinkState>:

// Get link state


bool ksz8863GetLinkState(uint8_t port)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
   uint16_t status;
   bool linkState;

   //Check port number
   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d016      	beq.n	8000c36 <ksz8863GetLinkState+0x3e>
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d813      	bhi.n	8000c36 <ksz8863GetLinkState+0x3e>
   {

	 //Read port status 0 register
	 status = ksz8863ReadSwitchReg(KSZ8863_PORTn_STAT0(port));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	330e      	adds	r3, #14
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fa29 	bl	8001070 <ksz8863ReadSwitchReg>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	81bb      	strh	r3, [r7, #12]

	 //Retrieve current link state
	 linkState = (status & KSZ8863_PORTn_STAT0_LINK_GOOD) ? true : false;
 8000c22:	89bb      	ldrh	r3, [r7, #12]
 8000c24:	115b      	asrs	r3, r3, #5
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <ksz8863GetLinkState+0x42>

   }
   else
   {
      //The specified port number is not valid
      linkState = false;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
   }

   //Return link status
   DebugPrintf("link state of port %d : %d\n", port, linkState);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <ksz8863GetLinkState+0x58>)
 8000c42:	f7ff fddd 	bl	8000800 <DebugPrintf>
   return linkState;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	080112b4 	.word	0x080112b4

08000c54 <ksz8863GetLinkSpeed>:


// get link speed 

uint32_t ksz8863GetLinkSpeed(uint8_t port)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
   uint16_t status;
   uint32_t linkSpeed;

   //Check port number
   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d017      	beq.n	8000c94 <ksz8863GetLinkSpeed+0x40>
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d814      	bhi.n	8000c94 <ksz8863GetLinkSpeed+0x40>
   {
      //Read port status 1 register
      status = ksz8863ReadSwitchReg(KSZ8863_PORTn_STAT1(port));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	330f      	adds	r3, #15
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f9fb 	bl	8001070 <ksz8863ReadSwitchReg>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	817b      	strh	r3, [r7, #10]

      //Retrieve current link speed
      if((status & KSZ8863_PORTn_STAT1_OP_SPEED) != 0)
 8000c7e:	897b      	ldrh	r3, [r7, #10]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <ksz8863GetLinkSpeed+0x3a>
      {
         linkSpeed = NIC_LINK_SPEED_100MBPS;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <ksz8863GetLinkSpeed+0x7c>)
 8000c8a:	60fb      	str	r3, [r7, #12]
      if((status & KSZ8863_PORTn_STAT1_OP_SPEED) != 0)
 8000c8c:	e017      	b.n	8000cbe <ksz8863GetLinkSpeed+0x6a>
      }
      else
      {
         linkSpeed = NIC_LINK_SPEED_10MBPS;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <ksz8863GetLinkSpeed+0x80>)
 8000c90:	60fb      	str	r3, [r7, #12]
      if((status & KSZ8863_PORTn_STAT1_OP_SPEED) != 0)
 8000c92:	e014      	b.n	8000cbe <ksz8863GetLinkSpeed+0x6a>
      }
   }
   else if(port == KSZ8863_PORT3)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d10f      	bne.n	8000cba <ksz8863GetLinkSpeed+0x66>
   {
      //Read global control 4 register
      status = ksz8863ReadSwitchReg(KSZ8863_GLOBAL_CTRL4);
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	f000 f9e8 	bl	8001070 <ksz8863ReadSwitchReg>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	817b      	strh	r3, [r7, #10]

      //Retrieve host interface speed
      if((status & KSZ8863_GLOBAL_CTRL4_SW_MII_10BT) != 0)
 8000ca4:	897b      	ldrh	r3, [r7, #10]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <ksz8863GetLinkSpeed+0x60>
      {
         linkSpeed = NIC_LINK_SPEED_10MBPS;
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <ksz8863GetLinkSpeed+0x80>)
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e004      	b.n	8000cbe <ksz8863GetLinkSpeed+0x6a>
      }
      else
      {
         linkSpeed = NIC_LINK_SPEED_100MBPS;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <ksz8863GetLinkSpeed+0x7c>)
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e001      	b.n	8000cbe <ksz8863GetLinkSpeed+0x6a>
      }
   }
   else
   {
      //The specified port number is not valid
      linkSpeed = NIC_LINK_SPEED_UNKNOWN;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
   }
   DebugPrintf("link speed %d\n", linkSpeed);
 8000cbe:	68f9      	ldr	r1, [r7, #12]
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <ksz8863GetLinkSpeed+0x84>)
 8000cc2:	f7ff fd9d 	bl	8000800 <DebugPrintf>
   //Return link status
   return linkSpeed;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	05f5e100 	.word	0x05f5e100
 8000cd4:	00989680 	.word	0x00989680
 8000cd8:	080112d0 	.word	0x080112d0

08000cdc <ksz8863GetDuplexMode>:


// Get duplex mode

NicDuplexMode ksz8863GetDuplexMode(uint8_t port)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
   uint16_t status;
   NicDuplexMode duplexMode;

   //Check port number
   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d017      	beq.n	8000d1c <ksz8863GetDuplexMode+0x40>
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d814      	bhi.n	8000d1c <ksz8863GetDuplexMode+0x40>
   {
      //Read port status 1 register
      status = ksz8863ReadSwitchReg(KSZ8863_PORTn_STAT1(port));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	330f      	adds	r3, #15
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f9b7 	bl	8001070 <ksz8863ReadSwitchReg>
 8000d02:	4603      	mov	r3, r0
 8000d04:	81bb      	strh	r3, [r7, #12]

      //Retrieve current duplex mode
      if((status & KSZ8863_PORTn_STAT1_OP_DUPLEX) != 0)
 8000d06:	89bb      	ldrh	r3, [r7, #12]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <ksz8863GetDuplexMode+0x3a>
      {
         duplexMode = NIC_FULL_DUPLEX_MODE;
 8000d10:	2302      	movs	r3, #2
 8000d12:	73fb      	strb	r3, [r7, #15]
      if((status & KSZ8863_PORTn_STAT1_OP_DUPLEX) != 0)
 8000d14:	e017      	b.n	8000d46 <ksz8863GetDuplexMode+0x6a>
      }
      else
      {
         duplexMode = NIC_HALF_DUPLEX_MODE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
      if((status & KSZ8863_PORTn_STAT1_OP_DUPLEX) != 0)
 8000d1a:	e014      	b.n	8000d46 <ksz8863GetDuplexMode+0x6a>
      }
   }
   else if(port == KSZ8863_PORT3)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d10f      	bne.n	8000d42 <ksz8863GetDuplexMode+0x66>
   {
      //Read global control 4 register
      status = ksz8863ReadSwitchReg(KSZ8863_GLOBAL_CTRL4);
 8000d22:	2006      	movs	r0, #6
 8000d24:	f000 f9a4 	bl	8001070 <ksz8863ReadSwitchReg>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	81bb      	strh	r3, [r7, #12]

      //Retrieve host interface duplex mode
      if((status & KSZ8863_GLOBAL_CTRL4_SW_MII_HALF_DUPLEX_MODE) != 0)
 8000d2c:	89bb      	ldrh	r3, [r7, #12]
 8000d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <ksz8863GetDuplexMode+0x60>
      {
         duplexMode = NIC_HALF_DUPLEX_MODE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	e004      	b.n	8000d46 <ksz8863GetDuplexMode+0x6a>
      }
      else
      {
         duplexMode = NIC_FULL_DUPLEX_MODE;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e001      	b.n	8000d46 <ksz8863GetDuplexMode+0x6a>
      }
   }
   else
   {
      //The specified port number is not valid
      duplexMode = NIC_UNKNOWN_DUPLEX_MODE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
   }

   DebugPrintf("duplexMode port: %d --> %d\n", port, duplexMode);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <ksz8863GetDuplexMode+0x80>)
 8000d4e:	f7ff fd57 	bl	8000800 <DebugPrintf>

   //Return duplex mode
   return duplexMode;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	080112e0 	.word	0x080112e0

08000d60 <ksz8863SetPortState>:


// Set port state

void ksz8863SetPortState(uint8_t port, SwitchPortState state)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
   uint8_t temp;

   //Check port number
   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d054      	beq.n	8000e20 <ksz8863SetPortState+0xc0>
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d851      	bhi.n	8000e20 <ksz8863SetPortState+0xc0>
   {
      //Read port control 2 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL2(port));
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3302      	adds	r3, #2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f972 	bl	8001070 <ksz8863ReadSwitchReg>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73fb      	strb	r3, [r7, #15]

      //Update port state
      switch(state)
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d020      	beq.n	8000dd8 <ksz8863SetPortState+0x78>
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	dc2b      	bgt.n	8000df2 <ksz8863SetPortState+0x92>
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d002      	beq.n	8000da4 <ksz8863SetPortState+0x44>
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d00d      	beq.n	8000dbe <ksz8863SetPortState+0x5e>
 8000da2:	e026      	b.n	8000df2 <ksz8863SetPortState+0x92>
      {
      //Listening state
      case SWITCH_PORT_STATE_LISTENING:
         temp &= ~KSZ8863_PORTn_CTRL2_TRANSMIT_EN;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f023 0304 	bic.w	r3, r3, #4
 8000daa:	73fb      	strb	r3, [r7, #15]
         temp |= KSZ8863_PORTn_CTRL2_RECEIVE_EN;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	73fb      	strb	r3, [r7, #15]
         temp |= KSZ8863_PORTn_CTRL2_LEARNING_DIS;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
         break;
 8000dbc:	e026      	b.n	8000e0c <ksz8863SetPortState+0xac>

      //Learning state
      case SWITCH_PORT_STATE_LEARNING:
         temp &= ~KSZ8863_PORTn_CTRL2_TRANSMIT_EN;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f023 0304 	bic.w	r3, r3, #4
 8000dc4:	73fb      	strb	r3, [r7, #15]
         temp &= ~KSZ8863_PORTn_CTRL2_RECEIVE_EN;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f023 0302 	bic.w	r3, r3, #2
 8000dcc:	73fb      	strb	r3, [r7, #15]
         temp &= ~KSZ8863_PORTn_CTRL2_LEARNING_DIS;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
         break;
 8000dd6:	e019      	b.n	8000e0c <ksz8863SetPortState+0xac>

      //Forwarding state
      case SWITCH_PORT_STATE_FORWARDING:
         temp |= KSZ8863_PORTn_CTRL2_TRANSMIT_EN;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	73fb      	strb	r3, [r7, #15]
         temp |= KSZ8863_PORTn_CTRL2_RECEIVE_EN;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	73fb      	strb	r3, [r7, #15]
         temp &= ~KSZ8863_PORTn_CTRL2_LEARNING_DIS;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
         break;
 8000df0:	e00c      	b.n	8000e0c <ksz8863SetPortState+0xac>

      //Disabled state
      default:
         temp &= ~KSZ8863_PORTn_CTRL2_TRANSMIT_EN;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	73fb      	strb	r3, [r7, #15]
         temp &= ~KSZ8863_PORTn_CTRL2_RECEIVE_EN;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f023 0302 	bic.w	r3, r3, #2
 8000e00:	73fb      	strb	r3, [r7, #15]
         temp |= KSZ8863_PORTn_CTRL2_LEARNING_DIS;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
         break;
 8000e0a:	bf00      	nop
      }

      //Write the value back to port control 2 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL2(port), temp);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3302      	adds	r3, #2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	7bfa      	ldrb	r2, [r7, #15]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f90c 	bl	8001038 <ksz8863WriteSwitchReg>
   }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <ksz8863GetPortState>:


// Get port state

SwitchPortState ksz8863GetPortState( uint8_t port)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
   uint8_t temp;
   SwitchPortState state;

   //Check port number
   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d058      	beq.n	8000eea <ksz8863GetPortState+0xc2>
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d855      	bhi.n	8000eea <ksz8863GetPortState+0xc2>
   {
      //Read port control 2 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL2(port));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3302      	adds	r3, #2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f911 	bl	8001070 <ksz8863ReadSwitchReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	73bb      	strb	r3, [r7, #14]

      //Check port state
      if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10c      	bne.n	8000e76 <ksz8863GetPortState+0x4e>
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) == 0 &&
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
      if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d107      	bne.n	8000e76 <ksz8863GetPortState+0x4e>
         (temp & KSZ8863_PORTn_CTRL2_LEARNING_DIS) != 0)
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	f003 0301 	and.w	r3, r3, #1
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) == 0 &&
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <ksz8863GetPortState+0x4e>
      {
         //Disabled state
         state = SWITCH_PORT_STATE_DISABLED;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e038      	b.n	8000ee8 <ksz8863GetPortState+0xc0>
      }
      else if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10c      	bne.n	8000e9a <ksz8863GetPortState+0x72>
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) != 0 &&
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	f003 0302 	and.w	r3, r3, #2
      else if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <ksz8863GetPortState+0x72>
         (temp & KSZ8863_PORTn_CTRL2_LEARNING_DIS) != 0)
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) != 0 &&
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <ksz8863GetPortState+0x72>
      {
         //Listening state
         state = SWITCH_PORT_STATE_LISTENING;
 8000e94:	2303      	movs	r3, #3
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e026      	b.n	8000ee8 <ksz8863GetPortState+0xc0>
      }
      else if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <ksz8863GetPortState+0x96>
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) == 0 &&
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
      else if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d107      	bne.n	8000ebe <ksz8863GetPortState+0x96>
         (temp & KSZ8863_PORTn_CTRL2_LEARNING_DIS) == 0)
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) == 0 &&
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <ksz8863GetPortState+0x96>
      {
         //Learning state
         state = SWITCH_PORT_STATE_LEARNING;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e014      	b.n	8000ee8 <ksz8863GetPortState+0xc0>
      }
      else if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) != 0 &&
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00c      	beq.n	8000ee2 <ksz8863GetPortState+0xba>
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) != 0 &&
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	f003 0302 	and.w	r3, r3, #2
      else if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) != 0 &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <ksz8863GetPortState+0xba>
         (temp & KSZ8863_PORTn_CTRL2_LEARNING_DIS) == 0)
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
         (temp & KSZ8863_PORTn_CTRL2_RECEIVE_EN) != 0 &&
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <ksz8863GetPortState+0xba>
      {
         //Forwarding state
         state = SWITCH_PORT_STATE_FORWARDING;
 8000edc:	2305      	movs	r3, #5
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e002      	b.n	8000ee8 <ksz8863GetPortState+0xc0>
      }
      else
      {
         //Unknown state
         state = SWITCH_PORT_STATE_UNKNOWN;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
      if((temp & KSZ8863_PORTn_CTRL2_TRANSMIT_EN) == 0 &&
 8000ee6:	e002      	b.n	8000eee <ksz8863GetPortState+0xc6>
 8000ee8:	e001      	b.n	8000eee <ksz8863GetPortState+0xc6>
      }
   }
   else
   {
      //The specified port number is not valid
      state = SWITCH_PORT_STATE_DISABLED;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
   }

   DebugPrintf("port %d state : %d\n", port, state);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <ksz8863GetPortState+0xdc>)
 8000ef6:	f7ff fc83 	bl	8000800 <DebugPrintf>
   //Return port state
   return state;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	080112fc 	.word	0x080112fc

08000f08 <ksz8863GetDynamicFdbEntry>:

//  Read an entry from the dynamic MAC table
// TODO: SINGLE CALL

error_t ksz8863GetDynamicFdbEntry(uint16_t index, SwitchFdbEntry *entry)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	80fb      	strh	r3, [r7, #6]
  uint16_t n;
  uint8_t *p;
  Ksz8863DynamicMacEntry currentEntry;

  //Check index parameter
  if(index < KSZ8863_DYNAMIC_MAC_TABLE_SIZE)
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f1a:	d27b      	bcs.n	8001014 <ksz8863GetDynamicFdbEntry+0x10c>
     {
        //Select the dynamic MAC address table
        ksz8863WriteSwitchReg(KSZ8863_INDIRECT_CTRL0,
           KSZ8863_INDIRECT_CTRL0_READ |
           KSZ8863_INDIRECT_CTRL0_TABLE_SEL_DYNAMIC_MAC |
           (MSB(index) & KSZ8863_INDIRECT_CTRL0_ADDR_H));
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fa44 	bl	80013ac <MSB>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	b25b      	sxtb	r3, r3
           KSZ8863_INDIRECT_CTRL0_TABLE_SEL_DYNAMIC_MAC |
 8000f2e:	f043 0318 	orr.w	r3, r3, #24
 8000f32:	b25b      	sxtb	r3, r3
        ksz8863WriteSwitchReg(KSZ8863_INDIRECT_CTRL0,
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	2079      	movs	r0, #121	@ 0x79
 8000f3a:	f000 f87d 	bl	8001038 <ksz8863WriteSwitchReg>

        //Trigger the read operation
        ksz8863WriteSwitchReg(KSZ8863_INDIRECT_CTRL1, LSB(index));
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fa26 	bl	8001392 <LSB>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	207a      	movs	r0, #122	@ 0x7a
 8000f4c:	f000 f874 	bl	8001038 <ksz8863WriteSwitchReg>

        //Point to the MAC entry
        p = (uint8_t *) &currentEntry;
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	617b      	str	r3, [r7, #20]

        //Read indirect data registers
        for(i = 0; i < sizeof(Ksz8863DynamicMacEntry); i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	83bb      	strh	r3, [r7, #28]
 8000f5a:	e00e      	b.n	8000f7a <ksz8863GetDynamicFdbEntry+0x72>
        {
           p[i] = ksz8863ReadSwitchReg(KSZ8863_INDIRECT_DATA8 + i);
 8000f5c:	8bbb      	ldrh	r3, [r7, #28]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	337b      	adds	r3, #123	@ 0x7b
 8000f62:	b2d9      	uxtb	r1, r3
 8000f64:	8bbb      	ldrh	r3, [r7, #28]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	18d4      	adds	r4, r2, r3
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	f000 f880 	bl	8001070 <ksz8863ReadSwitchReg>
 8000f70:	4603      	mov	r3, r0
 8000f72:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < sizeof(Ksz8863DynamicMacEntry); i++)
 8000f74:	8bbb      	ldrh	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	83bb      	strh	r3, [r7, #28]
 8000f7a:	8bbb      	ldrh	r3, [r7, #28]
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d9ed      	bls.n	8000f5c <ksz8863GetDynamicFdbEntry+0x54>
        }

        //Retry until the entry is ready
     } while(currentEntry.dataNotReady);
 8000f80:	7a3b      	ldrb	r3, [r7, #8]
 8000f82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1c7      	bne.n	8000f1c <ksz8863GetDynamicFdbEntry+0x14>

     //Check whether there are valid entries in the table
     if(!currentEntry.macEmpty)
 8000f8c:	7a3b      	ldrb	r3, [r7, #8]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d112      	bne.n	8000fbe <ksz8863GetDynamicFdbEntry+0xb6>
     {
        //Retrieve the number of valid entries
        n = ((currentEntry.numValidEntriesH << 8) | currentEntry.numValidEntriesL) + 1;
 8000f98:	7a3b      	ldrb	r3, [r7, #8]
 8000f9a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7a7b      	ldrb	r3, [r7, #9]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	837b      	strh	r3, [r7, #26]
        DebugPrintf("number of valid entry in dynamic Table: %d\n", n);
 8000fb2:	8b7b      	ldrh	r3, [r7, #26]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481c      	ldr	r0, [pc, #112]	@ (8001028 <ksz8863GetDynamicFdbEntry+0x120>)
 8000fb8:	f7ff fc22 	bl	8000800 <DebugPrintf>
 8000fbc:	e004      	b.n	8000fc8 <ksz8863GetDynamicFdbEntry+0xc0>
     }
     else
     {
        //The table is empty
        DebugPrintf("no entry found..table is empty\n");
 8000fbe:	481b      	ldr	r0, [pc, #108]	@ (800102c <ksz8863GetDynamicFdbEntry+0x124>)
 8000fc0:	f7ff fc1e 	bl	8000800 <DebugPrintf>
        n = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	837b      	strh	r3, [r7, #26]
     }

     //Valid entry?
     if(index < n)
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	8b7b      	ldrh	r3, [r7, #26]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d21b      	bcs.n	8001008 <ksz8863GetDynamicFdbEntry+0x100>
     {
        //Copy MAC entry
        entry->macAddr = currentEntry.macAddr;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	6018      	str	r0, [r3, #0]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	8019      	strh	r1, [r3, #0]
        entry->srcPort = currentEntry.sourcePort + 1;
 8000fe0:	7abb      	ldrb	r3, [r7, #10]
 8000fe2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	719a      	strb	r2, [r3, #6]
        entry->destPorts = 0;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
        entry->override = false;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	731a      	strb	r2, [r3, #12]

        //Successful processing
        DebugPrintf("entry found in dynamic table......\n");
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <ksz8863GetDynamicFdbEntry+0x128>)
 8000ffe:	f7ff fbff 	bl	8000800 <DebugPrintf>
        error = NO_ERROR;
 8001002:	2300      	movs	r3, #0
 8001004:	77fb      	strb	r3, [r7, #31]
 8001006:	e00a      	b.n	800101e <ksz8863GetDynamicFdbEntry+0x116>
     }
     else
     {
        //The end of the table has been reached
        DebugPrintf("The end of the table has been reached\n");
 8001008:	480a      	ldr	r0, [pc, #40]	@ (8001034 <ksz8863GetDynamicFdbEntry+0x12c>)
 800100a:	f7ff fbf9 	bl	8000800 <DebugPrintf>
        error = ERROR_END_OF_TABLE;
 800100e:	2302      	movs	r3, #2
 8001010:	77fb      	strb	r3, [r7, #31]
 8001012:	e004      	b.n	800101e <ksz8863GetDynamicFdbEntry+0x116>
     }
  }
  else
  {
     //The end of the table has been reached
     DebugPrintf("The end of the table has been reached\n");
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <ksz8863GetDynamicFdbEntry+0x12c>)
 8001016:	f7ff fbf3 	bl	8000800 <DebugPrintf>
     error = ERROR_END_OF_TABLE;
 800101a:	2302      	movs	r3, #2
 800101c:	77fb      	strb	r3, [r7, #31]
  }

  //Return status code
  return error;
 800101e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3724      	adds	r7, #36	@ 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	08011458 	.word	0x08011458
 800102c:	08011484 	.word	0x08011484
 8001030:	080114a4 	.word	0x080114a4
 8001034:	080114c8 	.word	0x080114c8

08001038 <ksz8863WriteSwitchReg>:


//  Write switch register

void ksz8863WriteSwitchReg(uint8_t address, uint8_t data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]

	uint8_t tData[3];
	uint8_t rData[1];
	tData[0] = KSZ8863_SPI_CMD_WRITE;
 8001048:	2302      	movs	r3, #2
 800104a:	733b      	strb	r3, [r7, #12]
	tData[1] = address;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	737b      	strb	r3, [r7, #13]
	tData[2] = data;
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	73bb      	strb	r3, [r7, #14]
	ksz_csLOW();
 8001054:	f7ff fc3c 	bl	80008d0 <ksz_csLOW>
	ksz_SPI_Write(tData, 3);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2103      	movs	r1, #3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fc4e 	bl	8000900 <ksz_SPI_Write>
//	ksz_SPI_Read(rData, 1);
	ksz_csHIGH();
 8001064:	f7ff fc40 	bl	80008e8 <ksz_csHIGH>

//	return rData[0];
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <ksz8863ReadSwitchReg>:



// Read switch register
uint8_t ksz8863ReadSwitchReg(uint8_t address)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
   uint8_t tData[2];
   uint8_t rData[1];

   ksz_csLOW();
 800107a:	f7ff fc29 	bl	80008d0 <ksz_csLOW>

   tData[0] = KSZ8863_SPI_CMD_READ;
 800107e:	2303      	movs	r3, #3
 8001080:	733b      	strb	r3, [r7, #12]
   tData[1] = address;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	737b      	strb	r3, [r7, #13]

   ksz_SPI_Write(tData, 2);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fc37 	bl	8000900 <ksz_SPI_Write>
   ksz_SPI_Read(rData, 1);
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2101      	movs	r1, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fc45 	bl	8000928 <ksz_SPI_Read>
   ksz_csHIGH();
 800109e:	f7ff fc23 	bl	80008e8 <ksz_csHIGH>
   return rData[0];
 80010a2:	7a3b      	ldrb	r3, [r7, #8]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ksz8863DumpSwitchReg>:

//  Dump switch registers for debugging purpose


void ksz8863DumpSwitchReg()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
   uint16_t i;

   //Loop through switch registers
   for(i = 0; i < 256; i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	80fb      	strh	r3, [r7, #6]
 80010b6:	e016      	b.n	80010e6 <ksz8863DumpSwitchReg+0x3a>
   {
//      Display current switch register

	   uint8_t data = ksz8863ReadSwitchReg(i);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffd7 	bl	8001070 <ksz8863ReadSwitchReg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	717b      	strb	r3, [r7, #5]

	   DebugPrintf("Reg: %03X -- %03X ----", i,data );
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	797a      	ldrb	r2, [r7, #5]
 80010ca:	4619      	mov	r1, r3
 80010cc:	480b      	ldr	r0, [pc, #44]	@ (80010fc <ksz8863DumpSwitchReg+0x50>)
 80010ce:	f7ff fb97 	bl	8000800 <DebugPrintf>
	   DebugPrintBinary(data);
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fbb7 	bl	8000848 <DebugPrintBinary>
	   DebugPrintf("\r\n");
 80010da:	4809      	ldr	r0, [pc, #36]	@ (8001100 <ksz8863DumpSwitchReg+0x54>)
 80010dc:	f7ff fb90 	bl	8000800 <DebugPrintf>
   for(i = 0; i < 256; i++)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	3301      	adds	r3, #1
 80010e4:	80fb      	strh	r3, [r7, #6]
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	2bff      	cmp	r3, #255	@ 0xff
 80010ea:	d9e5      	bls.n	80010b8 <ksz8863DumpSwitchReg+0xc>
   }

   //Terminate with a line feed
   DebugPrintf("\r\n");
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <ksz8863DumpSwitchReg+0x54>)
 80010ee:	f7ff fb87 	bl	8000800 <DebugPrintf>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	080114f0 	.word	0x080114f0
 8001100:	08011508 	.word	0x08011508

08001104 <ksz8863GetSwitchMacAddr>:
/// ****************** All about switch MAC address ***********************************///


// Function to read the switch's MAC address
MacAddr   ksz8863GetSwitchMacAddr(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	MacAddr macAddr;
    for (int i = 0; i < 6; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e011      	b.n	8001136 <ksz8863GetSwitchMacAddr+0x32>
    {
        macAddr.b[i] = ksz8863ReadSwitchReg(KSZ8863_MAC_ADDR0 + i);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	3370      	adds	r3, #112	@ 0x70
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffa8 	bl	8001070 <ksz8863ReadSwitchReg>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	f107 020c 	add.w	r2, r7, #12
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	460a      	mov	r2, r1
 800112e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b05      	cmp	r3, #5
 800113a:	ddea      	ble.n	8001112 <ksz8863GetSwitchMacAddr+0xe>
    }

    printMacAddrAsBytes(&macAddr);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fba1 	bl	8000888 <printMacAddrAsBytes>
    return macAddr;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	461a      	mov	r2, r3
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	6010      	str	r0, [r2, #0]
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	8093      	strh	r3, [r2, #4]
}
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <ksz8863GetPowerManagementMode>:
/// ********************** power management ********************************** ///


// Function to read power management mode
PowerManagementMode  ksz8863GetPowerManagementMode() 
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
    uint8_t status;
    // Read the power management register
    status = ksz8863ReadSwitchReg(KSZ8863_PWR_MGMT_LED_MODE);
 8001164:	20c3      	movs	r0, #195	@ 0xc3
 8001166:	f7ff ff83 	bl	8001070 <ksz8863ReadSwitchReg>
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]

    // Mask and return only the power management mode bits
    return (PowerManagementMode)(status & KSZ8863_PWR_MGMT_LED_MODE_POWER_MGMT_MODE );
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	b2db      	uxtb	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <ksz8863SetPowerManagementMode>:


// Function to set power management mode
void  ksz8863SetPowerManagementMode(PowerManagementMode mode) 
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
    if (mode > POWER_SAVING_MODE) {
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d903      	bls.n	8001198 <ksz8863SetPowerManagementMode+0x18>
        DebugPrintf("Invalid power management mode\n");
 8001190:	480e      	ldr	r0, [pc, #56]	@ (80011cc <ksz8863SetPowerManagementMode+0x4c>)
 8001192:	f7ff fb35 	bl	8000800 <DebugPrintf>
        return;
 8001196:	e016      	b.n	80011c6 <ksz8863SetPowerManagementMode+0x46>
    }
    uint8_t reg_value;
    // Read the current register value
    reg_value = ksz8863ReadSwitchReg(KSZ8863_PWR_MGMT_LED_MODE);
 8001198:	20c3      	movs	r0, #195	@ 0xc3
 800119a:	f7ff ff69 	bl	8001070 <ksz8863ReadSwitchReg>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]

    // Clear the power management mode bits and set the new mode
    reg_value = (reg_value & 0xFC)  | (mode & KSZ8863_PWR_MGMT_LED_MODE_POWER_MGMT_MODE );
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	f023 0303 	bic.w	r3, r3, #3
 80011aa:	b25a      	sxtb	r2, r3
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]
    // Write the new register value back
   ksz8863WriteSwitchReg(KSZ8863_PWR_MGMT_LED_MODE, reg_value);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4619      	mov	r1, r3
 80011c0:	20c3      	movs	r0, #195	@ 0xc3
 80011c2:	f7ff ff39 	bl	8001038 <ksz8863WriteSwitchReg>

}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0801150c 	.word	0x0801150c

080011d0 <ksz8863PowerUpPort>:


// power up port [n]

void  ksz8863PowerUpPort(uint8_t port)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01a      	beq.n	8001216 <ksz8863PowerUpPort+0x46>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d817      	bhi.n	8001216 <ksz8863PowerUpPort+0x46>
   {
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL13(port));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	330d      	adds	r3, #13
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff3d 	bl	8001070 <ksz8863ReadSwitchReg>
 80011f6:	4603      	mov	r3, r0
 80011f8:	73fb      	strb	r3, [r7, #15]

      temp &= ~KSZ8863_PORTn_CTRL13_POWER_DOWN;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	f023 0308 	bic.w	r3, r3, #8
 8001200:	73fb      	strb	r3, [r7, #15]

      //Write the value back to port control 13 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL13(port), temp);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	330d      	adds	r3, #13
 800120a:	b2db      	uxtb	r3, r3
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff11 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <ksz8863EnableAutoNegotiationPort>:
/// ****************** Link Core feature *************************************///

// enable auto negotiation on port [n]

void  ksz8863EnableAutoNegotiationPort(uint8_t port)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d01a      	beq.n	8001264 <ksz8863EnableAutoNegotiationPort+0x46>
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d817      	bhi.n	8001264 <ksz8863EnableAutoNegotiationPort+0x46>
   {
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	330c      	adds	r3, #12
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff16 	bl	8001070 <ksz8863ReadSwitchReg>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]

      temp |= KSZ8863_PORTn_CTRL12_AN_EN;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124e:	73fb      	strb	r3, [r7, #15]

      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
 8001256:	330c      	adds	r3, #12
 8001258:	b2db      	uxtb	r3, r3
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feea 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ksz8863SetForceLinkSpeed>:



// set link speed forcefully if AN disabled
void ksz8863SetForceLinkSpeed(uint8_t port, NicLinkSpeed linkSpeed)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d027      	beq.n	80012ce <ksz8863SetForceLinkSpeed+0x62>
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d824      	bhi.n	80012ce <ksz8863SetForceLinkSpeed+0x62>
   {
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	b2db      	uxtb	r3, r3
 800128a:	330c      	adds	r3, #12
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff feee 	bl	8001070 <ksz8863ReadSwitchReg>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]


      if( linkSpeed == NIC_LINK_SPEED_100MBPS)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <ksz8863SetForceLinkSpeed+0x6c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d104      	bne.n	80012aa <ksz8863SetForceLinkSpeed+0x3e>
      {
        temp |= KSZ8863_PORTn_CTRL12_FORCE_SPEED; 
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e007      	b.n	80012ba <ksz8863SetForceLinkSpeed+0x4e>
      }
      else if (linkSpeed == NIC_LINK_SPEED_10MBPS)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <ksz8863SetForceLinkSpeed+0x70>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d103      	bne.n	80012ba <ksz8863SetForceLinkSpeed+0x4e>
      {
         temp &= ~KSZ8863_PORTn_CTRL12_FORCE_SPEED; 
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012b8:	73fb      	strb	r3, [r7, #15]
      }
      

      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	330c      	adds	r3, #12
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff feb5 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	05f5e100 	.word	0x05f5e100
 80012dc:	00989680 	.word	0x00989680

080012e0 <ksz8863SetForcedDuplexMode>:

// set Duplex mode
// enable true means forced full-duplex if (1) AN is disabled or (2) AN is enabled but failed.
// enable false means forced half-duplex if (1) AN is disabled or (2) AN is enabled but failed
void ksz8863SetForcedDuplexMode(uint8_t port, bool enable)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
    uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d022      	beq.n	800133c <ksz8863SetForcedDuplexMode+0x5c>
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d81f      	bhi.n	800133c <ksz8863SetForcedDuplexMode+0x5c>
   {
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	b2db      	uxtb	r3, r3
 8001302:	330c      	adds	r3, #12
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff feb2 	bl	8001070 <ksz8863ReadSwitchReg>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]


      if( enable == true)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <ksz8863SetForcedDuplexMode+0x40>
      {
         // enable full duplex
        temp |= KSZ8863_PORTn_CTRL12_FORCE_DUPLEX; 
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e003      	b.n	8001328 <ksz8863SetForcedDuplexMode+0x48>
      }
      else
      {
         // enable half duplex
         temp &= ~KSZ8863_PORTn_CTRL12_FORCE_DUPLEX; 
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	f023 0320 	bic.w	r3, r3, #32
 8001326:	73fb      	strb	r3, [r7, #15]
      }
      

      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	330c      	adds	r3, #12
 8001330:	b2db      	uxtb	r3, r3
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe7e 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <ksz8863TurnOnPortLed>:


// power up port [n]

void   ksz8863TurnOnPortLed(uint8_t port)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01a      	beq.n	800138a <ksz8863TurnOnPortLed+0x46>
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d817      	bhi.n	800138a <ksz8863TurnOnPortLed+0x46>
   {
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL13(port));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	b2db      	uxtb	r3, r3
 8001360:	330d      	adds	r3, #13
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe83 	bl	8001070 <ksz8863ReadSwitchReg>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]

      temp &= ~KSZ8863_PORTn_CTRL13_LED_OFF;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001374:	73fb      	strb	r3, [r7, #15]

      //Write the value back to port control 13 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL13(port), temp);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	b2db      	uxtb	r3, r3
 800137c:	330d      	adds	r3, #13
 800137e:	b2db      	uxtb	r3, r3
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe57 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <LSB>:

/// ******************* Basic function ****************************///

// TODO: MACRO FUNCTION
uint8_t LSB(uint16_t value)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	80fb      	strh	r3, [r7, #6]
   return (uint8_t)(value & 0xFF);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <MSB>:

uint8_t MSB(uint16_t value)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
   return (uint8_t) ((value >> 8) & 0xFF);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <ksz8863EnableFlowControlAdvertisementOnPort>:


// enable advertising flow control capability on port [n]

void  ksz8863EnableFlowControlAdvertisementOnPort(uint8_t port, bool enable)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	460a      	mov	r2, r1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	4613      	mov	r3, r2
 80013d8:	71bb      	strb	r3, [r7, #6]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d022      	beq.n	8001426 <ksz8863EnableFlowControlAdvertisementOnPort+0x5c>
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d81f      	bhi.n	8001426 <ksz8863EnableFlowControlAdvertisementOnPort+0x5c>
   {
      //Read the value port control 12 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	330c      	adds	r3, #12
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe3d 	bl	8001070 <ksz8863ReadSwitchReg>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
      
      if(enable == true)
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <ksz8863EnableFlowControlAdvertisementOnPort+0x40>
      {
         temp |= KSZ8863_PORTn_CTRL12_ADV_FLOW_CTRL;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e003      	b.n	8001412 <ksz8863EnableFlowControlAdvertisementOnPort+0x48>
      }
      else
      {
          temp &= ~KSZ8863_PORTn_CTRL12_ADV_FLOW_CTRL;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f023 0310 	bic.w	r3, r3, #16
 8001410:	73fb      	strb	r3, [r7, #15]
      }


      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	b2db      	uxtb	r3, r3
 8001418:	330c      	adds	r3, #12
 800141a:	b2db      	uxtb	r3, r3
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe09 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort>:
// enable advertise 100BT full duplex capability on port [n]
// if enable value is true advertisement capability will be enabled and 
// if enable value is false advertisement capability will be disabled

void  ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort(uint8_t port, bool enable)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	460a      	mov	r2, r1
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	4613      	mov	r3, r2
 800143c:	71bb      	strb	r3, [r7, #6]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d022      	beq.n	800148a <ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort+0x5c>
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d81f      	bhi.n	800148a <ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort+0x5c>
   {
      //Read the value port control 12 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	b2db      	uxtb	r3, r3
 8001450:	330c      	adds	r3, #12
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe0b 	bl	8001070 <ksz8863ReadSwitchReg>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
      
      if(enable == true)
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort+0x40>
      {
         temp |= KSZ8863_PORTn_CTRL12_ADV_100BT_FD;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e003      	b.n	8001476 <ksz8863EnableAdvertise100BTFullDuplexCapabilityOnPort+0x48>
      }
      else
      {
          temp &= ~KSZ8863_PORTn_CTRL12_ADV_100BT_FD;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	f023 0308 	bic.w	r3, r3, #8
 8001474:	73fb      	strb	r3, [r7, #15]
      }


      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	b2db      	uxtb	r3, r3
 800147c:	330c      	adds	r3, #12
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fdd7 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort>:
// enable advertise 100BT half duplex capability on port [n]
// if enable value is true advertisement capability will be enabled and 
// if enable value is false advertisement capability will be disabled

void  ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort(uint8_t port, bool enable)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	460a      	mov	r2, r1
 800149c:	71fb      	strb	r3, [r7, #7]
 800149e:	4613      	mov	r3, r2
 80014a0:	71bb      	strb	r3, [r7, #6]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort+0x5c>
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d81f      	bhi.n	80014ee <ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort+0x5c>
   {
      //Read the value port control 12 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	330c      	adds	r3, #12
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fdd9 	bl	8001070 <ksz8863ReadSwitchReg>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
      
      if(enable == true)
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort+0x40>
      {
         temp |= KSZ8863_PORTn_CTRL12_ADV_100BT_HD;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e003      	b.n	80014da <ksz8863EnableAdvertise100BTHalfDuplexCapabilityOnPort+0x48>
      }
      else
      {
          temp &= ~KSZ8863_PORTn_CTRL12_ADV_100BT_HD;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	73fb      	strb	r3, [r7, #15]
      }


      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	330c      	adds	r3, #12
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fda5 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort>:
// enable advertise 10BT full duplex capability on port [n]
// if enable value is true advertisement capability will be enabled and 
// if enable value is false advertisement capability will be disabled

void  ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort(uint8_t port, bool enable)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	460a      	mov	r2, r1
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	4613      	mov	r3, r2
 8001504:	71bb      	strb	r3, [r7, #6]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d022      	beq.n	8001552 <ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort+0x5c>
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d81f      	bhi.n	8001552 <ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort+0x5c>
   {
      //Read the value port control 12 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	b2db      	uxtb	r3, r3
 8001518:	330c      	adds	r3, #12
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fda7 	bl	8001070 <ksz8863ReadSwitchReg>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
      
      if(enable == true)
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort+0x40>
      {
         temp |= KSZ8863_PORTn_CTRL12_ADV_10BT_FD;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e003      	b.n	800153e <ksz8863EnableAdvertise10BTFullDuplexCapabilityOnPort+0x48>
      }
      else
      {
          temp &= ~KSZ8863_PORTn_CTRL12_ADV_10BT_FD;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	f023 0302 	bic.w	r3, r3, #2
 800153c:	73fb      	strb	r3, [r7, #15]
      }


      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	b2db      	uxtb	r3, r3
 8001544:	330c      	adds	r3, #12
 8001546:	b2db      	uxtb	r3, r3
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fd73 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort>:
// enable advertise 10BT half duplex capability on port [n]
// if enable value is true advertisement capability will be enabled and 
// if enable value is false advertisement capability will be disabled

void  ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort(uint8_t port, bool enable)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	460a      	mov	r2, r1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	4613      	mov	r3, r2
 8001568:	71bb      	strb	r3, [r7, #6]
   uint8_t temp;

   if(port >= KSZ8863_PORT1 && port <= KSZ8863_PORT2)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d022      	beq.n	80015b6 <ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort+0x5c>
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d81f      	bhi.n	80015b6 <ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort+0x5c>
   {
      //Read the value port control 12 register
      temp = ksz8863ReadSwitchReg(KSZ8863_PORTn_CTRL12(port));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	b2db      	uxtb	r3, r3
 800157c:	330c      	adds	r3, #12
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd75 	bl	8001070 <ksz8863ReadSwitchReg>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
      
      if(enable == true)
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort+0x40>
      {
         temp |= KSZ8863_PORTn_CTRL12_ADV_10BT_HD;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e003      	b.n	80015a2 <ksz8863EnableAdvertise10BTHalfDuplexCapabilityOnPort+0x48>
      }
      else
      {
          temp &= ~KSZ8863_PORTn_CTRL12_ADV_10BT_HD;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
      }


      //Write the value back to port control 12 register
      ksz8863WriteSwitchReg(KSZ8863_PORTn_CTRL12(port), temp);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	330c      	adds	r3, #12
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd41 	bl	8001038 <ksz8863WriteSwitchReg>
   }

}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	f5ad 5d93 	sub.w	sp, sp, #4704	@ 0x1260
 80015c6:	b081      	sub	sp, #4
 80015c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015ca:	4bc3      	ldr	r3, [pc, #780]	@ (80018d8 <main+0x318>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d159      	bne.n	800168a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015d6:	4bc0      	ldr	r3, [pc, #768]	@ (80018d8 <main+0x318>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015de:	f3bf 8f4f 	dsb	sy
}
 80015e2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015e4:	4bbc      	ldr	r3, [pc, #752]	@ (80018d8 <main+0x318>)
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ea:	f241 224c 	movw	r2, #4684	@ 0x124c
 80015ee:	443a      	add	r2, r7
 80015f0:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015f2:	f241 234c 	movw	r3, #4684	@ 0x124c
 80015f6:	443b      	add	r3, r7
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0b5b      	lsrs	r3, r3, #13
 80015fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001600:	f241 2248 	movw	r2, #4680	@ 0x1248
 8001604:	443a      	add	r2, r7
 8001606:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001608:	f241 234c 	movw	r3, #4684	@ 0x124c
 800160c:	443b      	add	r3, r7
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001616:	f241 2244 	movw	r2, #4676	@ 0x1244
 800161a:	443a      	add	r2, r7
 800161c:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800161e:	f241 2348 	movw	r3, #4680	@ 0x1248
 8001622:	443b      	add	r3, r7
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800162c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800162e:	f241 2244 	movw	r2, #4676	@ 0x1244
 8001632:	443a      	add	r2, r7
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001638:	49a7      	ldr	r1, [pc, #668]	@ (80018d8 <main+0x318>)
 800163a:	4313      	orrs	r3, r2
 800163c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001640:	f241 2344 	movw	r3, #4676	@ 0x1244
 8001644:	443b      	add	r3, r7
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	f241 2144 	movw	r1, #4676	@ 0x1244
 800164e:	4439      	add	r1, r7
 8001650:	600a      	str	r2, [r1, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1e3      	bne.n	800161e <main+0x5e>
    } while(sets-- != 0U);
 8001656:	f241 2348 	movw	r3, #4680	@ 0x1248
 800165a:	443b      	add	r3, r7
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	f241 2148 	movw	r1, #4680	@ 0x1248
 8001664:	4439      	add	r1, r7
 8001666:	600a      	str	r2, [r1, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1cd      	bne.n	8001608 <main+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
 800166c:	f3bf 8f4f 	dsb	sy
}
 8001670:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001672:	4b99      	ldr	r3, [pc, #612]	@ (80018d8 <main+0x318>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a98      	ldr	r2, [pc, #608]	@ (80018d8 <main+0x318>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800167e:	f3bf 8f4f 	dsb	sy
}
 8001682:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001684:	f3bf 8f6f 	isb	sy
}
 8001688:	e000      	b.n	800168c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800168a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f002 f9aa 	bl	80039e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f948 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f000 fec2 	bl	800241c <MX_GPIO_Init>
  MX_DMA_Init();
 8001698:	f000 fe28 	bl	80022ec <MX_DMA_Init>
  MX_I2C4_Init();
 800169c:	f000 fa7e 	bl	8001b9c <MX_I2C4_Init>
  MX_TIM1_Init();
 80016a0:	f000 fb68 	bl	8001d74 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016a4:	f000 fbba 	bl	8001e1c <MX_TIM2_Init>
  MX_UART4_Init();
 80016a8:	f000 fc50 	bl	8001f4c <MX_UART4_Init>
  MX_UART5_Init();
 80016ac:	f000 fc9c 	bl	8001fe8 <MX_UART5_Init>
  MX_UART7_Init();
 80016b0:	f000 fce8 	bl	8002084 <MX_UART7_Init>
  MX_USART1_UART_Init();
 80016b4:	f000 fd34 	bl	8002120 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016b8:	f000 fd80 	bl	80021bc <MX_USART2_UART_Init>
  MX_FMC_Init();
 80016bc:	f000 fe5e 	bl	800237c <MX_FMC_Init>
  MX_SPI1_Init();
 80016c0:	f000 faac 	bl	8001c1c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80016c4:	f000 fdc6 	bl	8002254 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016c8:	f000 f9a4 	bl	8001a14 <MX_ADC1_Init>
  MX_SPI4_Init();
 80016cc:	f000 fafc 	bl	8001cc8 <MX_SPI4_Init>
  MX_ETH_Init();
 80016d0:	f000 fa18 	bl	8001b04 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  DebugPrintf("mahmudul\r\n");
 80016d4:	4881      	ldr	r0, [pc, #516]	@ (80018dc <main+0x31c>)
 80016d6:	f7ff f893 	bl	8000800 <DebugPrintf>

  	uint32_t id2 = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f241 225c 	movw	r2, #4700	@ 0x125c
 80016e0:	443a      	add	r2, r7
 80016e2:	6013      	str	r3, [r2, #0]

  	id2 =0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f241 225c 	movw	r2, #4700	@ 0x125c
 80016ea:	443a      	add	r2, r7
 80016ec:	6013      	str	r3, [r2, #0]
	id2 = ksz_ReadID_DMA();
 80016ee:	f7ff f94b 	bl	8000988 <ksz_ReadID_DMA>
 80016f2:	f241 235c 	movw	r3, #4700	@ 0x125c
 80016f6:	443b      	add	r3, r7
 80016f8:	6018      	str	r0, [r3, #0]
	DebugPrintf("ksz id2 DMA  is %X\r\n", id2);
 80016fa:	f241 235c 	movw	r3, #4700	@ 0x125c
 80016fe:	443b      	add	r3, r7
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	4877      	ldr	r0, [pc, #476]	@ (80018e0 <main+0x320>)
 8001704:	f7ff f87c 	bl	8000800 <DebugPrintf>
	HAL_Delay(1000);
 8001708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800170c:	f002 f9fc 	bl	8003b08 <HAL_Delay>


    id2 = ksz_ReadID();
 8001710:	f7ff f91e 	bl	8000950 <ksz_ReadID>
 8001714:	f241 235c 	movw	r3, #4700	@ 0x125c
 8001718:	443b      	add	r3, r7
 800171a:	6018      	str	r0, [r3, #0]
    DebugPrintf("\r\n");
 800171c:	4871      	ldr	r0, [pc, #452]	@ (80018e4 <main+0x324>)
 800171e:	f7ff f86f 	bl	8000800 <DebugPrintf>
    DebugPrintf("ksz id2 is %X\r\n", id2);
 8001722:	f241 235c 	movw	r3, #4700	@ 0x125c
 8001726:	443b      	add	r3, r7
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	486f      	ldr	r0, [pc, #444]	@ (80018e8 <main+0x328>)
 800172c:	f7ff f868 	bl	8000800 <DebugPrintf>





  uint32_t id = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	f241 2258 	movw	r2, #4696	@ 0x1258
 8001736:	443a      	add	r2, r7
 8001738:	6013      	str	r3, [r2, #0]
  uint8_t RxData[4608];
  DebugPrintf("r1\r\n");
 800173a:	486c      	ldr	r0, [pc, #432]	@ (80018ec <main+0x32c>)
 800173c:	f7ff f860 	bl	8000800 <DebugPrintf>
  W25Q_Reset_DMA();
 8001740:	f7ff f820 	bl	8000784 <W25Q_Reset_DMA>
//  W25Q_Reset();
//  HAL_Delay(500);
  DebugPrintf("r2\r\n");
 8001744:	486a      	ldr	r0, [pc, #424]	@ (80018f0 <main+0x330>)
 8001746:	f7ff f85b 	bl	8000800 <DebugPrintf>
  id = W25Q_ReadID();
 800174a:	f7fe fffd 	bl	8000748 <W25Q_ReadID>
 800174e:	f241 2358 	movw	r3, #4696	@ 0x1258
 8001752:	443b      	add	r3, r7
 8001754:	6018      	str	r0, [r3, #0]
  DebugPrintf("id is %X\r\n", id);
 8001756:	f241 2358 	movw	r3, #4696	@ 0x1258
 800175a:	443b      	add	r3, r7
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	4865      	ldr	r0, [pc, #404]	@ (80018f4 <main+0x334>)
 8001760:	f7ff f84e 	bl	8000800 <DebugPrintf>
  id =0;
 8001764:	2300      	movs	r3, #0
 8001766:	f241 2258 	movw	r2, #4696	@ 0x1258
 800176a:	443a      	add	r2, r7
 800176c:	6013      	str	r3, [r2, #0]
  id = W25Q_ReadID_DMA();
 800176e:	f7ff f823 	bl	80007b8 <W25Q_ReadID_DMA>
 8001772:	f241 2358 	movw	r3, #4696	@ 0x1258
 8001776:	443b      	add	r3, r7
 8001778:	6018      	str	r0, [r3, #0]
  DebugPrintf("dma id is %X\r\n", id);
 800177a:	f241 2358 	movw	r3, #4696	@ 0x1258
 800177e:	443b      	add	r3, r7
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	485d      	ldr	r0, [pc, #372]	@ (80018f8 <main+0x338>)
 8001784:	f7ff f83c 	bl	8000800 <DebugPrintf>


  uint32_t test = 0xDEADBEEF;;
 8001788:	4b5c      	ldr	r3, [pc, #368]	@ (80018fc <main+0x33c>)
 800178a:	f241 2254 	movw	r2, #4692	@ 0x1254
 800178e:	443a      	add	r2, r7
 8001790:	6013      	str	r3, [r2, #0]
  DebugPrintf("test value %X\r\n", test);
 8001792:	f241 2354 	movw	r3, #4692	@ 0x1254
 8001796:	443b      	add	r3, r7
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	4859      	ldr	r0, [pc, #356]	@ (8001900 <main+0x340>)
 800179c:	f7ff f830 	bl	8000800 <DebugPrintf>

  // init ksz8863
  ksz8863Init();
 80017a0:	f7ff f928 	bl	80009f4 <ksz8863Init>
//   DebugPrintf("\r\n");
//   DebugPrintf("ksz id3 is %X\r\n", id3);


//   ksz8863ReadSwitchReg(0);
   ksz8863DumpSwitchReg();
 80017a4:	f7ff fc82 	bl	80010ac <ksz8863DumpSwitchReg>
//   ksz8863WriteSwitchReg( address, data);
//   ksz8863ReadSwitchReg(address);

//   ksz8863DumpSwitchReg();

   ksz8863GetLinkState(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fa25 	bl	8000bf8 <ksz8863GetLinkState>
   ksz8863GetLinkState(2);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff fa22 	bl	8000bf8 <ksz8863GetLinkState>
   ksz8863GetLinkState(3);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f7ff fa1f 	bl	8000bf8 <ksz8863GetLinkState>

   ksz8863GetLinkSpeed(1);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff fa4a 	bl	8000c54 <ksz8863GetLinkSpeed>
   ksz8863GetLinkSpeed(2);
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7ff fa47 	bl	8000c54 <ksz8863GetLinkSpeed>
   ksz8863GetLinkSpeed(3);
 80017c6:	2003      	movs	r0, #3
 80017c8:	f7ff fa44 	bl	8000c54 <ksz8863GetLinkSpeed>
   ksz8863GetDuplexMode(1);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fa85 	bl	8000cdc <ksz8863GetDuplexMode>
   ksz8863GetDuplexMode(2);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7ff fa82 	bl	8000cdc <ksz8863GetDuplexMode>
   ksz8863GetDuplexMode(3);
 80017d8:	2003      	movs	r0, #3
 80017da:	f7ff fa7f 	bl	8000cdc <ksz8863GetDuplexMode>

   ksz8863GetPortState(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fb22 	bl	8000e28 <ksz8863GetPortState>
   ksz8863GetPortState(2);
 80017e4:	2002      	movs	r0, #2
 80017e6:	f7ff fb1f 	bl	8000e28 <ksz8863GetPortState>

   ksz8863SetPortState(1,3);
 80017ea:	2103      	movs	r1, #3
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fab7 	bl	8000d60 <ksz8863SetPortState>

   ksz8863GetPortState(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fb18 	bl	8000e28 <ksz8863GetPortState>
   ksz8863GetPortState(2);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f7ff fb15 	bl	8000e28 <ksz8863GetPortState>



   uint8_t powerMode;
   powerMode = ksz8863GetPowerManagementMode();
 80017fe:	f7ff fcae 	bl	800115e <ksz8863GetPowerManagementMode>
 8001802:	4603      	mov	r3, r0
 8001804:	f241 2253 	movw	r2, #4691	@ 0x1253
 8001808:	443a      	add	r2, r7
 800180a:	7013      	strb	r3, [r2, #0]
   DebugPrintf("power mode %d\r\n", powerMode);
 800180c:	f241 2353 	movw	r3, #4691	@ 0x1253
 8001810:	443b      	add	r3, r7
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	483b      	ldr	r0, [pc, #236]	@ (8001904 <main+0x344>)
 8001818:	f7fe fff2 	bl	8000800 <DebugPrintf>
   ksz8863SetPowerManagementMode(0);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fcaf 	bl	8001180 <ksz8863SetPowerManagementMode>
   powerMode = ksz8863GetPowerManagementMode();
 8001822:	f7ff fc9c 	bl	800115e <ksz8863GetPowerManagementMode>
 8001826:	4603      	mov	r3, r0
 8001828:	f241 2253 	movw	r2, #4691	@ 0x1253
 800182c:	443a      	add	r2, r7
 800182e:	7013      	strb	r3, [r2, #0]
   DebugPrintf("power mode %d\r\n", powerMode);
 8001830:	f241 2353 	movw	r3, #4691	@ 0x1253
 8001834:	443b      	add	r3, r7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	4832      	ldr	r0, [pc, #200]	@ (8001904 <main+0x344>)
 800183c:	f7fe ffe0 	bl	8000800 <DebugPrintf>


   MacAddr mac = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
 8001840:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001844:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001848:	4a2f      	ldr	r2, [pc, #188]	@ (8001908 <main+0x348>)
 800184a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184e:	6018      	str	r0, [r3, #0]
 8001850:	3304      	adds	r3, #4
 8001852:	8019      	strh	r1, [r3, #0]
   printMacAddrAsBytes(&mac);
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <main+0x34c>)
 8001856:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 800185a:	443b      	add	r3, r7
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f813 	bl	8000888 <printMacAddrAsBytes>

   ksz8863GetSwitchMacAddr();
 8001862:	463b      	mov	r3, r7
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc4d 	bl	8001104 <ksz8863GetSwitchMacAddr>
  //  ksz8863SetSwitchMacAddr(&mac);
  //  ksz8863GetSwitchMacAddr();

   MacAddr mac1 = {0xA9, 0xB4, 0xAB, 0x12, 0x23, 0xFF};
 800186a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800186e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001872:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <main+0x350>)
 8001874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001878:	6018      	str	r0, [r3, #0]
 800187a:	3304      	adds	r3, #4
 800187c:	8019      	strh	r1, [r3, #0]
   MacAddr mac2 = {0xAC, 0xBD, 0x11, 0x22, 0x33, 0xFF};
 800187e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001882:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001886:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <main+0x354>)
 8001888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188c:	6018      	str	r0, [r3, #0]
 800188e:	3304      	adds	r3, #4
 8001890:	8019      	strh	r1, [r3, #0]

  SwitchFdbEntry entry = {
 8001892:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001896:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800189a:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <main+0x358>)
 800189c:	461c      	mov	r4, r3
 800189e:	4613      	mov	r3, r2
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	   ksz8863GetStaticFdbEntry(p, &entry);
//  }



   ksz8863GetDynamicFdbEntry(0, &entry1);
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <main+0x35c>)
 80018a8:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 80018ac:	443b      	add	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff fb29 	bl	8000f08 <ksz8863GetDynamicFdbEntry>
  printSwitchFdbEntry(&entry1);
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <main+0x35c>)
 80018b8:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 80018bc:	443b      	add	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 ff4a 	bl	8002758 <printSwitchFdbEntry>
  while (1)
  {
	//  MX_LWIP_Process();

//	  HAL_UART_Transmit(&huart3, data, 30, HAL_MAX_DELAY);
	  DebugPrintf("mahmudul \r\n");
 80018c4:	4816      	ldr	r0, [pc, #88]	@ (8001920 <main+0x360>)
 80018c6:	f7fe ff9b 	bl	8000800 <DebugPrintf>
	  HAL_Delay(500);
 80018ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018ce:	f002 f91b 	bl	8003b08 <HAL_Delay>
	  DebugPrintf("mahmudul \r\n");
 80018d2:	bf00      	nop
 80018d4:	e7f6      	b.n	80018c4 <main+0x304>
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	08011694 	.word	0x08011694
 80018e0:	080116a0 	.word	0x080116a0
 80018e4:	080116b8 	.word	0x080116b8
 80018e8:	080116bc 	.word	0x080116bc
 80018ec:	080116cc 	.word	0x080116cc
 80018f0:	080116d4 	.word	0x080116d4
 80018f4:	080116dc 	.word	0x080116dc
 80018f8:	080116e8 	.word	0x080116e8
 80018fc:	deadbeef 	.word	0xdeadbeef
 8001900:	080116f8 	.word	0x080116f8
 8001904:	08011708 	.word	0x08011708
 8001908:	08011724 	.word	0x08011724
 800190c:	ffffeddc 	.word	0xffffeddc
 8001910:	0801172c 	.word	0x0801172c
 8001914:	08011734 	.word	0x08011734
 8001918:	0801173c 	.word	0x0801173c
 800191c:	ffffedac 	.word	0xffffedac
 8001920:	08011718 	.word	0x08011718

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b09c      	sub	sp, #112	@ 0x70
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	224c      	movs	r2, #76	@ 0x4c
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f00e ff86 	bl	8010844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2220      	movs	r2, #32
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f00e ff80 	bl	8010844 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001944:	2002      	movs	r0, #2
 8001946:	f007 fadf 	bl	8008f08 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <SystemClock_Config+0xe8>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	4a2e      	ldr	r2, [pc, #184]	@ (8001a0c <SystemClock_Config+0xe8>)
 8001954:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001958:	6193      	str	r3, [r2, #24]
 800195a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <SystemClock_Config+0xe8>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001966:	bf00      	nop
 8001968:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <SystemClock_Config+0xe8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001974:	d1f8      	bne.n	8001968 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <SystemClock_Config+0xec>)
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	4a25      	ldr	r2, [pc, #148]	@ (8001a10 <SystemClock_Config+0xec>)
 800197c:	f023 0303 	bic.w	r3, r3, #3
 8001980:	6293      	str	r3, [r2, #40]	@ 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001982:	2302      	movs	r3, #2
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001986:	2301      	movs	r3, #1
 8001988:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198a:	2340      	movs	r3, #64	@ 0x40
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	2302      	movs	r3, #2
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001992:	2300      	movs	r3, #0
 8001994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001996:	2304      	movs	r3, #4
 8001998:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800199a:	2322      	movs	r3, #34	@ 0x22
 800199c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800199e:	2301      	movs	r3, #1
 80019a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019a2:	2303      	movs	r3, #3
 80019a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019aa:	230c      	movs	r3, #12
 80019ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80019b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 fadd 	bl	8008f7c <HAL_RCC_OscConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80019c8:	f000 fec0 	bl	800274c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019cc:	233f      	movs	r3, #63	@ 0x3f
 80019ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d0:	2303      	movs	r3, #3
 80019d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019d8:	2308      	movs	r3, #8
 80019da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019dc:	2340      	movs	r3, #64	@ 0x40
 80019de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019e0:	2340      	movs	r3, #64	@ 0x40
 80019e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019ea:	2340      	movs	r3, #64	@ 0x40
 80019ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2103      	movs	r1, #3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fe70 	bl	80096d8 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80019fe:	f000 fea5 	bl	800274c <Error_Handler>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3770      	adds	r7, #112	@ 0x70
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	58024800 	.word	0x58024800
 8001a10:	58024400 	.word	0x58024400

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2224      	movs	r2, #36	@ 0x24
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00e ff09 	bl	8010844 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a34:	4a31      	ldr	r2, [pc, #196]	@ (8001afc <MX_ADC1_Init+0xe8>)
 8001a36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a50:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a56:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a62:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a70:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a90:	4819      	ldr	r0, [pc, #100]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001a92:	f002 fab7 	bl	8004004 <HAL_ADC_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f000 fe56 	bl	800274c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4813      	ldr	r0, [pc, #76]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001aac:	f003 faf0 	bl	8005090 <HAL_ADCEx_MultiModeConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ab6:	f000 fe49 	bl	800274c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <MX_ADC1_Init+0xec>)
 8001abc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001abe:	2306      	movs	r3, #6
 8001ac0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ac6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001aca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001acc:	2304      	movs	r3, #4
 8001ace:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	4619      	mov	r1, r3
 8001ade:	4806      	ldr	r0, [pc, #24]	@ (8001af8 <MX_ADC1_Init+0xe4>)
 8001ae0:	f002 fc98 	bl	8004414 <HAL_ADC_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001aea:	f000 fe2f 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	3730      	adds	r7, #48	@ 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	24000278 	.word	0x24000278
 8001afc:	40022000 	.word	0x40022000
 8001b00:	0c900008 	.word	0x0c900008

08001b04 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <MX_ETH_Init+0x84>)
 8001b0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b1c:	22e1      	movs	r2, #225	@ 0xe1
 8001b1e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b34:	4a15      	ldr	r2, [pc, #84]	@ (8001b8c <MX_ETH_Init+0x88>)
 8001b36:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <MX_ETH_Init+0x8c>)
 8001b42:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b46:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <MX_ETH_Init+0x90>)
 8001b48:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b4c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001b50:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b52:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <MX_ETH_Init+0x80>)
 8001b54:	f006 fad2 	bl	80080fc <HAL_ETH_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001b5e:	f000 fdf5 	bl	800274c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b62:	2234      	movs	r2, #52	@ 0x34
 8001b64:	2100      	movs	r1, #0
 8001b66:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <MX_ETH_Init+0x94>)
 8001b68:	f00e fe6c 	bl	8010844 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <MX_ETH_Init+0x94>)
 8001b6e:	2221      	movs	r2, #33	@ 0x21
 8001b70:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_ETH_Init+0x94>)
 8001b74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b78:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <MX_ETH_Init+0x94>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	240002e8 	.word	0x240002e8
 8001b88:	40028000 	.word	0x40028000
 8001b8c:	24000ad8 	.word	0x24000ad8
 8001b90:	240000c0 	.word	0x240000c0
 8001b94:	24000060 	.word	0x24000060
 8001b98:	24000244 	.word	0x24000244

08001b9c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <MX_I2C4_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00D049FB;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <MX_I2C4_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bd8:	f007 f86e 	bl	8008cb8 <HAL_I2C_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001be2:	f000 fdb3 	bl	800274c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bea:	f007 f8f5 	bl	8008dd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001bf4:	f000 fdaa 	bl	800274c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_I2C4_Init+0x74>)
 8001bfc:	f007 f937 	bl	8008e6e <HAL_I2CEx_ConfigDigitalFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f000 fda1 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	24000370 	.word	0x24000370
 8001c14:	58001c00 	.word	0x58001c00
 8001c18:	00d049fb 	.word	0x00d049fb

08001c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c22:	4a28      	ldr	r2, [pc, #160]	@ (8001cc4 <MX_SPI1_Init+0xa8>)
 8001c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c36:	2207      	movs	r2, #7
 8001c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c50:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001c54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cac:	4804      	ldr	r0, [pc, #16]	@ (8001cc0 <MX_SPI1_Init+0xa4>)
 8001cae:	f00a f96f 	bl	800bf90 <HAL_SPI_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001cb8:	f000 fd48 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	240003bc 	.word	0x240003bc
 8001cc4:	40013000 	.word	0x40013000

08001cc8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001ccc:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001cce:	4a28      	ldr	r2, [pc, #160]	@ (8001d70 <MX_SPI4_Init+0xa8>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001cd4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cd8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cda:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001cf4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cf8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001cfc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001d00:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001d14:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d28:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <MX_SPI4_Init+0xa4>)
 8001d5a:	f00a f919 	bl	800bf90 <HAL_SPI_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001d64:	f000 fcf2 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24000444 	.word	0x24000444
 8001d70:	40013400 	.word	0x40013400

08001d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001d94:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <MX_TIM1_Init+0xa4>)
 8001d96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001daa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dbe:	4815      	ldr	r0, [pc, #84]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001dc0:	f00b fe37 	bl	800da32 <HAL_TIM_Base_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dca:	f000 fcbf 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480e      	ldr	r0, [pc, #56]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001ddc:	f00b fff6 	bl	800ddcc <HAL_TIM_ConfigClockSource>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001de6:	f000 fcb1 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4806      	ldr	r0, [pc, #24]	@ (8001e14 <MX_TIM1_Init+0xa0>)
 8001dfc:	f00c fcf8 	bl	800e7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e06:	f000 fca1 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	240006ac 	.word	0x240006ac
 8001e18:	40010000 	.word	0x40010000

08001e1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	@ 0x38
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e56:	4b3c      	ldr	r3, [pc, #240]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e62:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e76:	4834      	ldr	r0, [pc, #208]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e78:	f00b fddb 	bl	800da32 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e82:	f000 fc63 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e90:	4619      	mov	r1, r3
 8001e92:	482d      	ldr	r0, [pc, #180]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001e94:	f00b ff9a 	bl	800ddcc <HAL_TIM_ConfigClockSource>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e9e:	f000 fc55 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ea2:	4829      	ldr	r0, [pc, #164]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001ea4:	f00b fe1c 	bl	800dae0 <HAL_TIM_PWM_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001eae:	f000 fc4d 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4821      	ldr	r0, [pc, #132]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001ec2:	f00c fc95 	bl	800e7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ecc:	f000 fc3e 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed0:	2360      	movs	r3, #96	@ 0x60
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4818      	ldr	r0, [pc, #96]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001ee8:	f00b fe5c 	bl	800dba4 <HAL_TIM_PWM_ConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ef2:	f000 fc2b 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001efe:	f00b fe51 	bl	800dba4 <HAL_TIM_PWM_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001f08:	f000 fc20 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2208      	movs	r2, #8
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001f14:	f00b fe46 	bl	800dba4 <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001f1e:	f000 fc15 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	220c      	movs	r2, #12
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001f2a:	f00b fe3b 	bl	800dba4 <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001f34:	f000 fc0a 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f38:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <MX_TIM2_Init+0x12c>)
 8001f3a:	f001 f817 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 8001f3e:	bf00      	nop
 8001f40:	3738      	adds	r7, #56	@ 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	240006f8 	.word	0x240006f8

08001f4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f52:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <MX_UART4_Init+0x98>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8001f56:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f58:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001f5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f64:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f98:	4811      	ldr	r0, [pc, #68]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001f9a:	f00c fcc5 	bl	800e928 <HAL_UART_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001fa4:	f000 fbd2 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001fac:	f00e fa80 	bl	80104b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001fb6:	f000 fbc9 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4808      	ldr	r0, [pc, #32]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001fbe:	f00e fab5 	bl	801052c <HAL_UARTEx_SetRxFifoThreshold>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8001fc8:	f000 fbc0 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_UART4_Init+0x94>)
 8001fce:	f00e fa36 	bl	801043e <HAL_UARTEx_DisableFifoMode>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8001fd8:	f000 fbb8 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	24000744 	.word	0x24000744
 8001fe4:	40004c00 	.word	0x40004c00

08001fe8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <MX_UART5_Init+0x94>)
 8001fee:	4a24      	ldr	r2, [pc, #144]	@ (8002080 <MX_UART5_Init+0x98>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8001ff2:	4b22      	ldr	r3, [pc, #136]	@ (800207c <MX_UART5_Init+0x94>)
 8001ff4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001ff8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <MX_UART5_Init+0x94>)
 8001ffc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002000:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002002:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <MX_UART5_Init+0x94>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_UART5_Init+0x94>)
 800200a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800200e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_UART5_Init+0x94>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_UART5_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_UART5_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_UART5_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_UART5_Init+0x94>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <MX_UART5_Init+0x94>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002034:	4811      	ldr	r0, [pc, #68]	@ (800207c <MX_UART5_Init+0x94>)
 8002036:	f00c fc77 	bl	800e928 <HAL_UART_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_UART5_Init+0x5c>
  {
    Error_Handler();
 8002040:	f000 fb84 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_UART5_Init+0x94>)
 8002048:	f00e fa32 	bl	80104b0 <HAL_UARTEx_SetTxFifoThreshold>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_UART5_Init+0x6e>
  {
    Error_Handler();
 8002052:	f000 fb7b 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002056:	2100      	movs	r1, #0
 8002058:	4808      	ldr	r0, [pc, #32]	@ (800207c <MX_UART5_Init+0x94>)
 800205a:	f00e fa67 	bl	801052c <HAL_UARTEx_SetRxFifoThreshold>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_UART5_Init+0x80>
  {
    Error_Handler();
 8002064:	f000 fb72 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_UART5_Init+0x94>)
 800206a:	f00e f9e8 	bl	801043e <HAL_UARTEx_DisableFifoMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_UART5_Init+0x90>
  {
    Error_Handler();
 8002074:	f000 fb6a 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	240007d4 	.word	0x240007d4
 8002080:	40005000 	.word	0x40005000

08002084 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002088:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <MX_UART7_Init+0x94>)
 800208a:	4a24      	ldr	r2, [pc, #144]	@ (800211c <MX_UART7_Init+0x98>)
 800208c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 230400;
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <MX_UART7_Init+0x94>)
 8002090:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002094:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <MX_UART7_Init+0x94>)
 8002098:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800209c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <MX_UART7_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <MX_UART7_Init+0x94>)
 80020a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020aa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <MX_UART7_Init+0x94>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <MX_UART7_Init+0x94>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <MX_UART7_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <MX_UART7_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <MX_UART7_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <MX_UART7_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <MX_UART7_Init+0x94>)
 80020d2:	f00c fc29 	bl	800e928 <HAL_UART_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_UART7_Init+0x5c>
  {
    Error_Handler();
 80020dc:	f000 fb36 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e0:	2100      	movs	r1, #0
 80020e2:	480d      	ldr	r0, [pc, #52]	@ (8002118 <MX_UART7_Init+0x94>)
 80020e4:	f00e f9e4 	bl	80104b0 <HAL_UARTEx_SetTxFifoThreshold>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_UART7_Init+0x6e>
  {
    Error_Handler();
 80020ee:	f000 fb2d 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f2:	2100      	movs	r1, #0
 80020f4:	4808      	ldr	r0, [pc, #32]	@ (8002118 <MX_UART7_Init+0x94>)
 80020f6:	f00e fa19 	bl	801052c <HAL_UARTEx_SetRxFifoThreshold>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8002100:	f000 fb24 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_UART7_Init+0x94>)
 8002106:	f00e f99a 	bl	801043e <HAL_UARTEx_DisableFifoMode>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8002110:	f000 fb1c 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	24000864 	.word	0x24000864
 800211c:	40007800 	.word	0x40007800

08002120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002124:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002126:	4a24      	ldr	r2, [pc, #144]	@ (80021b8 <MX_USART1_UART_Init+0x98>)
 8002128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800212a:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 800212c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002134:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002138:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800213a:	4b1e      	ldr	r3, [pc, #120]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002140:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002142:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 800214a:	220c      	movs	r2, #12
 800214c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214e:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800216c:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 800216e:	f00c fbdb 	bl	800e928 <HAL_UART_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002178:	f000 fae8 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217c:	2100      	movs	r1, #0
 800217e:	480d      	ldr	r0, [pc, #52]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002180:	f00e f996 	bl	80104b0 <HAL_UARTEx_SetTxFifoThreshold>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800218a:	f000 fadf 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800218e:	2100      	movs	r1, #0
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 8002192:	f00e f9cb 	bl	801052c <HAL_UARTEx_SetRxFifoThreshold>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800219c:	f000 fad6 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <MX_USART1_UART_Init+0x94>)
 80021a2:	f00e f94c 	bl	801043e <HAL_UARTEx_DisableFifoMode>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80021ac:	f000 face 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	240008f4 	.word	0x240008f4
 80021b8:	40011000 	.word	0x40011000

080021bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c0:	4b22      	ldr	r3, [pc, #136]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021c2:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <MX_USART2_UART_Init+0x94>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021c6:	4b21      	ldr	r3, [pc, #132]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021da:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b17      	ldr	r3, [pc, #92]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <MX_USART2_UART_Init+0x90>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <MX_USART2_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002204:	4811      	ldr	r0, [pc, #68]	@ (800224c <MX_USART2_UART_Init+0x90>)
 8002206:	f00c fb8f 	bl	800e928 <HAL_UART_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002210:	f000 fa9c 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	480d      	ldr	r0, [pc, #52]	@ (800224c <MX_USART2_UART_Init+0x90>)
 8002218:	f00e f94a 	bl	80104b0 <HAL_UARTEx_SetTxFifoThreshold>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002222:	f000 fa93 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002226:	2100      	movs	r1, #0
 8002228:	4808      	ldr	r0, [pc, #32]	@ (800224c <MX_USART2_UART_Init+0x90>)
 800222a:	f00e f97f 	bl	801052c <HAL_UARTEx_SetRxFifoThreshold>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002234:	f000 fa8a 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_USART2_UART_Init+0x90>)
 800223a:	f00e f900 	bl	801043e <HAL_UARTEx_DisableFifoMode>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002244:	f000 fa82 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	24000984 	.word	0x24000984
 8002250:	40004400 	.word	0x40004400

08002254 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002258:	4b22      	ldr	r3, [pc, #136]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 800225a:	4a23      	ldr	r2, [pc, #140]	@ (80022e8 <MX_USART3_UART_Init+0x94>)
 800225c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800225e:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002264:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002266:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002272:	4b1c      	ldr	r3, [pc, #112]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 800227a:	220c      	movs	r2, #12
 800227c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800229c:	4811      	ldr	r0, [pc, #68]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 800229e:	f00c fb43 	bl	800e928 <HAL_UART_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80022a8:	f000 fa50 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ac:	2100      	movs	r1, #0
 80022ae:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 80022b0:	f00e f8fe 	bl	80104b0 <HAL_UARTEx_SetTxFifoThreshold>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80022ba:	f000 fa47 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022be:	2100      	movs	r1, #0
 80022c0:	4808      	ldr	r0, [pc, #32]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 80022c2:	f00e f933 	bl	801052c <HAL_UARTEx_SetRxFifoThreshold>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80022cc:	f000 fa3e 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022d0:	4804      	ldr	r0, [pc, #16]	@ (80022e4 <MX_USART3_UART_Init+0x90>)
 80022d2:	f00e f8b4 	bl	801043e <HAL_UARTEx_DisableFifoMode>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022dc:	f000 fa36 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	24000a14 	.word	0x24000a14
 80022e8:	40004800 	.word	0x40004800

080022ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <MX_DMA_Init+0x8c>)
 80022f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <MX_DMA_Init+0x8c>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <MX_DMA_Init+0x8c>)
 8002304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <MX_DMA_Init+0x8c>)
 8002312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002316:	4a18      	ldr	r2, [pc, #96]	@ (8002378 <MX_DMA_Init+0x8c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_DMA_Init+0x8c>)
 8002322:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	200d      	movs	r0, #13
 8002334:	f003 f869 	bl	800540a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002338:	200d      	movs	r0, #13
 800233a:	f003 f880 	bl	800543e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	200e      	movs	r0, #14
 8002344:	f003 f861 	bl	800540a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002348:	200e      	movs	r0, #14
 800234a:	f003 f878 	bl	800543e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	2039      	movs	r0, #57	@ 0x39
 8002354:	f003 f859 	bl	800540a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002358:	2039      	movs	r0, #57	@ 0x39
 800235a:	f003 f870 	bl	800543e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	203b      	movs	r0, #59	@ 0x3b
 8002364:	f003 f851 	bl	800540a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002368:	203b      	movs	r0, #59	@ 0x3b
 800236a:	f003 f868 	bl	800543e <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	58024400 	.word	0x58024400

0800237c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	615a      	str	r2, [r3, #20]
 8002392:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002394:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <MX_FMC_Init+0x98>)
 8002396:	4a20      	ldr	r2, [pc, #128]	@ (8002418 <MX_FMC_Init+0x9c>)
 8002398:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800239a:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <MX_FMC_Init+0x98>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80023a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <MX_FMC_Init+0x98>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <MX_FMC_Init+0x98>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 80023ac:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <MX_FMC_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <MX_FMC_Init+0x98>)
 80023b4:	2240      	movs	r2, #64	@ 0x40
 80023b6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <MX_FMC_Init+0x98>)
 80023ba:	2280      	movs	r2, #128	@ 0x80
 80023bc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <MX_FMC_Init+0x98>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <MX_FMC_Init+0x98>)
 80023c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023ca:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <MX_FMC_Init+0x98>)
 80023ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <MX_FMC_Init+0x98>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80023da:	2310      	movs	r3, #16
 80023dc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80023de:	2310      	movs	r3, #16
 80023e0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80023e2:	2310      	movs	r3, #16
 80023e4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80023e6:	2310      	movs	r3, #16
 80023e8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80023ea:	2310      	movs	r3, #16
 80023ec:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80023ee:	2310      	movs	r3, #16
 80023f0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80023f2:	2310      	movs	r3, #16
 80023f4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4806      	ldr	r0, [pc, #24]	@ (8002414 <MX_FMC_Init+0x98>)
 80023fc:	f009 fd8c 	bl	800bf18 <HAL_SDRAM_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8002406:	f000 f9a1 	bl	800274c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800240a:	bf00      	nop
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	24000aa4 	.word	0x24000aa4
 8002418:	52004140 	.word	0x52004140

0800241c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	@ 0x30
 8002420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002432:	4bbe      	ldr	r3, [pc, #760]	@ (800272c <MX_GPIO_Init+0x310>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002438:	4abc      	ldr	r2, [pc, #752]	@ (800272c <MX_GPIO_Init+0x310>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002442:	4bba      	ldr	r3, [pc, #744]	@ (800272c <MX_GPIO_Init+0x310>)
 8002444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002450:	4bb6      	ldr	r3, [pc, #728]	@ (800272c <MX_GPIO_Init+0x310>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002456:	4ab5      	ldr	r2, [pc, #724]	@ (800272c <MX_GPIO_Init+0x310>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002460:	4bb2      	ldr	r3, [pc, #712]	@ (800272c <MX_GPIO_Init+0x310>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800246e:	4baf      	ldr	r3, [pc, #700]	@ (800272c <MX_GPIO_Init+0x310>)
 8002470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002474:	4aad      	ldr	r2, [pc, #692]	@ (800272c <MX_GPIO_Init+0x310>)
 8002476:	f043 0320 	orr.w	r3, r3, #32
 800247a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800247e:	4bab      	ldr	r3, [pc, #684]	@ (800272c <MX_GPIO_Init+0x310>)
 8002480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4ba7      	ldr	r3, [pc, #668]	@ (800272c <MX_GPIO_Init+0x310>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002492:	4aa6      	ldr	r2, [pc, #664]	@ (800272c <MX_GPIO_Init+0x310>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800249c:	4ba3      	ldr	r3, [pc, #652]	@ (800272c <MX_GPIO_Init+0x310>)
 800249e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4ba0      	ldr	r3, [pc, #640]	@ (800272c <MX_GPIO_Init+0x310>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	4a9e      	ldr	r2, [pc, #632]	@ (800272c <MX_GPIO_Init+0x310>)
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ba:	4b9c      	ldr	r3, [pc, #624]	@ (800272c <MX_GPIO_Init+0x310>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024c8:	4b98      	ldr	r3, [pc, #608]	@ (800272c <MX_GPIO_Init+0x310>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ce:	4a97      	ldr	r2, [pc, #604]	@ (800272c <MX_GPIO_Init+0x310>)
 80024d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d8:	4b94      	ldr	r3, [pc, #592]	@ (800272c <MX_GPIO_Init+0x310>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e6:	4b91      	ldr	r3, [pc, #580]	@ (800272c <MX_GPIO_Init+0x310>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ec:	4a8f      	ldr	r2, [pc, #572]	@ (800272c <MX_GPIO_Init+0x310>)
 80024ee:	f043 0308 	orr.w	r3, r3, #8
 80024f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f6:	4b8d      	ldr	r3, [pc, #564]	@ (800272c <MX_GPIO_Init+0x310>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS485_DIR_Pin|DO_1_PWM_Pin|DO_2_PWM_Pin, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	f640 2108 	movw	r1, #2568	@ 0xa08
 800250a:	4889      	ldr	r0, [pc, #548]	@ (8002730 <MX_GPIO_Init+0x314>)
 800250c:	f006 fbba 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	2110      	movs	r1, #16
 8002514:	4886      	ldr	r0, [pc, #536]	@ (8002730 <MX_GPIO_Init+0x314>)
 8002516:	f006 fbb5 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DO_5_Pin|DO_6_Pin|IOL3_ENCQ_Pin|IOL3_ENL_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 4143 	mov.w	r1, #49920	@ 0xc300
 8002520:	4884      	ldr	r0, [pc, #528]	@ (8002734 <MX_GPIO_Init+0x318>)
 8002522:	f006 fbaf 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, IOL2_RST_Pin|IOL4_ENL_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800252c:	4882      	ldr	r0, [pc, #520]	@ (8002738 <MX_GPIO_Init+0x31c>)
 800252e:	f006 fba9 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_CS_GPIO_Port, Flash_CS_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	2101      	movs	r1, #1
 8002536:	4881      	ldr	r0, [pc, #516]	@ (800273c <MX_GPIO_Init+0x320>)
 8002538:	f006 fba4 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IOL1_RST_Pin|IOL2_ENL_Pin|IOL2_ENCQ_Pin, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	f640 0118 	movw	r1, #2072	@ 0x818
 8002542:	487f      	ldr	r0, [pc, #508]	@ (8002740 <MX_GPIO_Init+0x324>)
 8002544:	f006 fb9e 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IOL1_ENCQ_Pin|IOL1_ENL_Pin|IOL3_RST_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	218c      	movs	r1, #140	@ 0x8c
 800254c:	487d      	ldr	r0, [pc, #500]	@ (8002744 <MX_GPIO_Init+0x328>)
 800254e:	f006 fb99 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_3_PWM_Pin|DO_4_PWM_Pin|IOL4_RST_Pin|IOL4_ENCQ_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 41d8 	mov.w	r1, #27648	@ 0x6c00
 8002558:	487b      	ldr	r0, [pc, #492]	@ (8002748 <MX_GPIO_Init+0x32c>)
 800255a:	f006 fb93 	bl	8008c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_DIR_Pin */
  GPIO_InitStruct.Pin = RS485_DIR_Pin;
 800255e:	2308      	movs	r3, #8
 8002560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256a:	2303      	movs	r3, #3
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RS485_DIR_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	486e      	ldr	r0, [pc, #440]	@ (8002730 <MX_GPIO_Init+0x314>)
 8002576:	f006 f9dd 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800257a:	2310      	movs	r3, #16
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002586:	2302      	movs	r3, #2
 8002588:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	4867      	ldr	r0, [pc, #412]	@ (8002730 <MX_GPIO_Init+0x314>)
 8002592:	f006 f9cf 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_8_Pin DI_1_ENC_A_Pin DI_2_ENC_B_Pin */
  GPIO_InitStruct.Pin = DI_8_Pin|DI_1_ENC_A_Pin|DI_2_ENC_B_Pin;
 8002596:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 800259a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4862      	ldr	r0, [pc, #392]	@ (8002734 <MX_GPIO_Init+0x318>)
 80025ac:	f006 f9c2 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_5_Pin DO_6_Pin IOL3_ENCQ_Pin IOL3_ENL_Pin */
  GPIO_InitStruct.Pin = DO_5_Pin|DO_6_Pin|IOL3_ENCQ_Pin|IOL3_ENL_Pin;
 80025b0:	f44f 4343 	mov.w	r3, #49920	@ 0xc300
 80025b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	485a      	ldr	r0, [pc, #360]	@ (8002734 <MX_GPIO_Init+0x318>)
 80025ca:	f006 f9b3 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL2_RST_Pin IOL4_ENL_Pin */
  GPIO_InitStruct.Pin = IOL2_RST_Pin|IOL4_ENL_Pin;
 80025ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4854      	ldr	r0, [pc, #336]	@ (8002738 <MX_GPIO_Init+0x31c>)
 80025e8:	f006 f9a4 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_CS_Pin */
  GPIO_InitStruct.Pin = Flash_CS_Pin;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Flash_CS_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4619      	mov	r1, r3
 8002602:	484e      	ldr	r0, [pc, #312]	@ (800273c <MX_GPIO_Init+0x320>)
 8002604:	f006 f996 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_3_ENC_Z_Pin DI_4_Pin DI_5_Pin DI_6_Pin
                           DI_7_Pin */
  GPIO_InitStruct.Pin = DI_3_ENC_Z_Pin|DI_4_Pin|DI_5_Pin|DI_6_Pin
 8002608:	f44f 734d 	mov.w	r3, #820	@ 0x334
 800260c:	61fb      	str	r3, [r7, #28]
                          |DI_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	4847      	ldr	r0, [pc, #284]	@ (800273c <MX_GPIO_Init+0x320>)
 800261e:	f006 f989 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_1_PWM_Pin DO_2_PWM_Pin */
  GPIO_InitStruct.Pin = DO_1_PWM_Pin|DO_2_PWM_Pin;
 8002622:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	4619      	mov	r1, r3
 800263a:	483d      	ldr	r0, [pc, #244]	@ (8002730 <MX_GPIO_Init+0x314>)
 800263c:	f006 f97a 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL1_RST_Pin */
  GPIO_InitStruct.Pin = IOL1_RST_Pin;
 8002640:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IOL1_RST_GPIO_Port, &GPIO_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	4839      	ldr	r0, [pc, #228]	@ (8002740 <MX_GPIO_Init+0x324>)
 800265a:	f006 f96b 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL1_ENCQ_Pin IOL1_ENL_Pin IOL3_RST_Pin */
  GPIO_InitStruct.Pin = IOL1_ENCQ_Pin|IOL1_ENL_Pin|IOL3_RST_Pin;
 800265e:	238c      	movs	r3, #140	@ 0x8c
 8002660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
 8002664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	4833      	ldr	r0, [pc, #204]	@ (8002744 <MX_GPIO_Init+0x328>)
 8002676:	f006 f95d 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL1_IRQ_Pin IOL2_IRQ_Pin */
  GPIO_InitStruct.Pin = IOL1_IRQ_Pin|IOL2_IRQ_Pin;
 800267a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800267e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002680:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	482c      	ldr	r0, [pc, #176]	@ (8002744 <MX_GPIO_Init+0x328>)
 8002692:	f006 f94f 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL3_IRQ_Pin */
  GPIO_InitStruct.Pin = IOL3_IRQ_Pin;
 8002696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800269a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800269c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IOL3_IRQ_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4619      	mov	r1, r3
 80026ac:	4826      	ldr	r0, [pc, #152]	@ (8002748 <MX_GPIO_Init+0x32c>)
 80026ae:	f006 f941 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_3_PWM_Pin DO_4_PWM_Pin */
  GPIO_InitStruct.Pin = DO_3_PWM_Pin|DO_4_PWM_Pin;
 80026b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	481f      	ldr	r0, [pc, #124]	@ (8002748 <MX_GPIO_Init+0x32c>)
 80026cc:	f006 f932 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL4_RST_Pin IOL4_ENCQ_Pin */
  GPIO_InitStruct.Pin = IOL4_RST_Pin|IOL4_ENCQ_Pin;
 80026d0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80026d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026d6:	2311      	movs	r3, #17
 80026d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4817      	ldr	r0, [pc, #92]	@ (8002748 <MX_GPIO_Init+0x32c>)
 80026ea:	f006 f923 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pin : IOL4_IRQ_Pin */
  GPIO_InitStruct.Pin = IOL4_IRQ_Pin;
 80026ee:	2304      	movs	r3, #4
 80026f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IOL4_IRQ_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	480f      	ldr	r0, [pc, #60]	@ (8002740 <MX_GPIO_Init+0x324>)
 8002704:	f006 f916 	bl	8008934 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOL2_ENL_Pin IOL2_ENCQ_Pin */
  GPIO_InitStruct.Pin = IOL2_ENL_Pin|IOL2_ENCQ_Pin;
 8002708:	2318      	movs	r3, #24
 800270a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270c:	2301      	movs	r3, #1
 800270e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4619      	mov	r1, r3
 800271e:	4808      	ldr	r0, [pc, #32]	@ (8002740 <MX_GPIO_Init+0x324>)
 8002720:	f006 f908 	bl	8008934 <HAL_GPIO_Init>

}
 8002724:	bf00      	nop
 8002726:	3730      	adds	r7, #48	@ 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58024400 	.word	0x58024400
 8002730:	58021000 	.word	0x58021000
 8002734:	58020800 	.word	0x58020800
 8002738:	58021400 	.word	0x58021400
 800273c:	58020400 	.word	0x58020400
 8002740:	58020c00 	.word	0x58020c00
 8002744:	58021800 	.word	0x58021800
 8002748:	58020000 	.word	0x58020000

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <Error_Handler+0x8>

08002758 <printSwitchFdbEntry>:
#include "stdlib.h"


// Function to print SwitchFdbEntry
void printSwitchFdbEntry(const SwitchFdbEntry *entry) 
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	DebugPrintf("Switch FDB Entry:\n");
 8002760:	4813      	ldr	r0, [pc, #76]	@ (80027b0 <printSwitchFdbEntry+0x58>)
 8002762:	f7fe f84d 	bl	8000800 <DebugPrintf>
    DebugPrintf("  MAC Address: ");
 8002766:	4813      	ldr	r0, [pc, #76]	@ (80027b4 <printSwitchFdbEntry+0x5c>)
 8002768:	f7fe f84a 	bl	8000800 <DebugPrintf>
    printMacAddrAsBytes(&entry->macAddr);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe f88a 	bl	8000888 <printMacAddrAsBytes>
    DebugPrintf("\n");
 8002774:	4810      	ldr	r0, [pc, #64]	@ (80027b8 <printSwitchFdbEntry+0x60>)
 8002776:	f7fe f843 	bl	8000800 <DebugPrintf>
    DebugPrintf("  Source Port: %u\n", entry->srcPort);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	799b      	ldrb	r3, [r3, #6]
 800277e:	4619      	mov	r1, r3
 8002780:	480e      	ldr	r0, [pc, #56]	@ (80027bc <printSwitchFdbEntry+0x64>)
 8002782:	f7fe f83d 	bl	8000800 <DebugPrintf>
    DebugPrintf("  Destination Ports: 0x%08X\n", entry->destPorts);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4619      	mov	r1, r3
 800278c:	480c      	ldr	r0, [pc, #48]	@ (80027c0 <printSwitchFdbEntry+0x68>)
 800278e:	f7fe f837 	bl	8000800 <DebugPrintf>
    DebugPrintf("  Override: %s\n", entry->override ? "true" : "false");
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7b1b      	ldrb	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <printSwitchFdbEntry+0x46>
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <printSwitchFdbEntry+0x6c>)
 800279c:	e000      	b.n	80027a0 <printSwitchFdbEntry+0x48>
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <printSwitchFdbEntry+0x70>)
 80027a0:	4619      	mov	r1, r3
 80027a2:	480a      	ldr	r0, [pc, #40]	@ (80027cc <printSwitchFdbEntry+0x74>)
 80027a4:	f7fe f82c 	bl	8000800 <DebugPrintf>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	0801174c 	.word	0x0801174c
 80027b4:	08011760 	.word	0x08011760
 80027b8:	08011770 	.word	0x08011770
 80027bc:	08011774 	.word	0x08011774
 80027c0:	08011788 	.word	0x08011788
 80027c4:	080117a8 	.word	0x080117a8
 80027c8:	080117b0 	.word	0x080117b0
 80027cc:	080117b8 	.word	0x080117b8

080027d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_MspInit+0x30>)
 80027d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027dc:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_MspInit+0x30>)
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_MspInit+0x30>)
 80027e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	58024400 	.word	0x58024400

08002804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b0b8      	sub	sp, #224	@ 0xe0
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281c:	f107 0318 	add.w	r3, r7, #24
 8002820:	22b4      	movs	r2, #180	@ 0xb4
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f00e f80d 	bl	8010844 <memset>
  if(hadc->Instance==ADC1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a39      	ldr	r2, [pc, #228]	@ (8002914 <HAL_ADC_MspInit+0x110>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d16a      	bne.n	800290a <HAL_ADC_MspInit+0x106>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002834:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002838:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800283a:	2304      	movs	r3, #4
 800283c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800283e:	230c      	movs	r3, #12
 8002840:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002842:	2302      	movs	r3, #2
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002846:	2302      	movs	r3, #2
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800284a:	2302      	movs	r3, #2
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800284e:	23c0      	movs	r3, #192	@ 0xc0
 8002850:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002860:	f107 0318 	add.w	r3, r7, #24
 8002864:	4618      	mov	r0, r3
 8002866:	f007 fac3 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002870:	f7ff ff6c 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002874:	4b28      	ldr	r3, [pc, #160]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 8002876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800287a:	4a27      	ldr	r2, [pc, #156]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 800287c:	f043 0320 	orr.w	r3, r3, #32
 8002880:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 8002886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b21      	ldr	r3, [pc, #132]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 8002894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002898:	4a1f      	ldr	r2, [pc, #124]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b0:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b6:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028c0:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_ADC_MspInit+0x114>)
 80028c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = AI_1_Pin;
 80028ce:	2340      	movs	r3, #64	@ 0x40
 80028d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(AI_1_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028e4:	4619      	mov	r1, r3
 80028e6:	480d      	ldr	r0, [pc, #52]	@ (800291c <HAL_ADC_MspInit+0x118>)
 80028e8:	f006 f824 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AI_2_Pin;
 80028ec:	2302      	movs	r3, #2
 80028ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f2:	2303      	movs	r3, #3
 80028f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(AI_2_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002902:	4619      	mov	r1, r3
 8002904:	4806      	ldr	r0, [pc, #24]	@ (8002920 <HAL_ADC_MspInit+0x11c>)
 8002906:	f006 f815 	bl	8008934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	37e0      	adds	r7, #224	@ 0xe0
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40022000 	.word	0x40022000
 8002918:	58024400 	.word	0x58024400
 800291c:	58020000 	.word	0x58020000
 8002920:	58020400 	.word	0x58020400

08002924 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	@ 0x38
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a49      	ldr	r2, [pc, #292]	@ (8002a68 <HAL_ETH_MspInit+0x144>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f040 808b 	bne.w	8002a5e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002948:	4b48      	ldr	r3, [pc, #288]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 800294a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800294e:	4a47      	ldr	r2, [pc, #284]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 8002950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002954:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002958:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 800295a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800295e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002966:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 8002968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800296c:	4a3f      	ldr	r2, [pc, #252]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002972:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002976:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 8002978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002984:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 8002986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800298a:	4a38      	ldr	r2, [pc, #224]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 800298c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002990:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002994:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 8002996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029a8:	4a30      	ldr	r2, [pc, #192]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c6:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029d0:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029de:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e4:	4a21      	ldr	r2, [pc, #132]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_ETH_MspInit+0x148>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80029fc:	2332      	movs	r3, #50	@ 0x32
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a0c:	230b      	movs	r3, #11
 8002a0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4816      	ldr	r0, [pc, #88]	@ (8002a70 <HAL_ETH_MspInit+0x14c>)
 8002a18:	f005 ff8c 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002a1c:	2386      	movs	r3, #134	@ 0x86
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a2c:	230b      	movs	r3, #11
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a34:	4619      	mov	r1, r3
 8002a36:	480f      	ldr	r0, [pc, #60]	@ (8002a74 <HAL_ETH_MspInit+0x150>)
 8002a38:	f005 ff7c 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002a3c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a4e:	230b      	movs	r3, #11
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	4807      	ldr	r0, [pc, #28]	@ (8002a78 <HAL_ETH_MspInit+0x154>)
 8002a5a:	f005 ff6b 	bl	8008934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3738      	adds	r7, #56	@ 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40028000 	.word	0x40028000
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	58020800 	.word	0x58020800
 8002a74:	58020000 	.word	0x58020000
 8002a78:	58021800 	.word	0x58021800

08002a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0b6      	sub	sp, #216	@ 0xd8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	22b4      	movs	r2, #180	@ 0xb4
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00d fed1 	bl	8010844 <memset>
  if(hi2c->Instance==I2C4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a25      	ldr	r2, [pc, #148]	@ (8002b3c <HAL_I2C_MspInit+0xc0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d142      	bne.n	8002b32 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002aac:	2310      	movs	r3, #16
 8002aae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f007 f998 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002ac6:	f7ff fe41 	bl	800274c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_I2C_MspInit+0xc4>)
 8002acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <HAL_I2C_MspInit+0xc4>)
 8002ad2:	f043 0308 	orr.w	r3, r3, #8
 8002ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_I2C_MspInit+0xc4>)
 8002adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = IOL_I2C4_SCL_Pin|IOL_I2C4_SDA_Pin;
 8002ae8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002aec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af0:	2312      	movs	r3, #18
 8002af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002b02:	2304      	movs	r3, #4
 8002b04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b08:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480d      	ldr	r0, [pc, #52]	@ (8002b44 <HAL_I2C_MspInit+0xc8>)
 8002b10:	f005 ff10 	bl	8008934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_I2C_MspInit+0xc4>)
 8002b16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b1a:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <HAL_I2C_MspInit+0xc4>)
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_I2C_MspInit+0xc4>)
 8002b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	37d8      	adds	r7, #216	@ 0xd8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58001c00 	.word	0x58001c00
 8002b40:	58024400 	.word	0x58024400
 8002b44:	58020c00 	.word	0x58020c00

08002b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b60:	f107 0320 	add.w	r3, r7, #32
 8002b64:	22b4      	movs	r2, #180	@ 0xb4
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00d fe6b 	bl	8010844 <memset>
  if(hspi->Instance==SPI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a7a      	ldr	r2, [pc, #488]	@ (8002d5c <HAL_SPI_MspInit+0x214>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	f040 8103 	bne.w	8002d80 <HAL_SPI_MspInit+0x238>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f007 f931 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002b94:	f7ff fdda 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b98:	4b71      	ldr	r3, [pc, #452]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b9e:	4a70      	ldr	r2, [pc, #448]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbc:	4a68      	ldr	r2, [pc, #416]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc6:	4b66      	ldr	r3, [pc, #408]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd4:	4b62      	ldr	r3, [pc, #392]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bda:	4a61      	ldr	r2, [pc, #388]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002be4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bf8:	4a59      	ldr	r2, [pc, #356]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c02:	4b57      	ldr	r3, [pc, #348]	@ (8002d60 <HAL_SPI_MspInit+0x218>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c10:	2320      	movs	r3, #32
 8002c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c28:	2305      	movs	r3, #5
 8002c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c32:	4619      	mov	r1, r3
 8002c34:	484b      	ldr	r0, [pc, #300]	@ (8002d64 <HAL_SPI_MspInit+0x21c>)
 8002c36:	f005 fe7d 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c52:	2305      	movs	r3, #5
 8002c54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4842      	ldr	r0, [pc, #264]	@ (8002d68 <HAL_SPI_MspInit+0x220>)
 8002c60:	f005 fe68 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c7e:	2305      	movs	r3, #5
 8002c80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4838      	ldr	r0, [pc, #224]	@ (8002d6c <HAL_SPI_MspInit+0x224>)
 8002c8c:	f005 fe52 	bl	8008934 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream2;
 8002c90:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002c92:	4a38      	ldr	r2, [pc, #224]	@ (8002d74 <HAL_SPI_MspInit+0x22c>)
 8002c94:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002c96:	4b36      	ldr	r3, [pc, #216]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002c98:	2226      	movs	r2, #38	@ 0x26
 8002c9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c9c:	4b34      	ldr	r3, [pc, #208]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002c9e:	2240      	movs	r2, #64	@ 0x40
 8002ca0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca2:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca8:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002cc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cc8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cca:	4b29      	ldr	r3, [pc, #164]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002cd0:	4827      	ldr	r0, [pc, #156]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002cd2:	f002 fbcf 	bl	8005474 <HAL_DMA_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_SPI_MspInit+0x198>
    {
      Error_Handler();
 8002cdc:	f7ff fd36 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a23      	ldr	r2, [pc, #140]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002ce4:	679a      	str	r2, [r3, #120]	@ 0x78
 8002ce6:	4a22      	ldr	r2, [pc, #136]	@ (8002d70 <HAL_SPI_MspInit+0x228>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream3;
 8002cec:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002cee:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_SPI_MspInit+0x234>)
 8002cf0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002cf4:	2225      	movs	r2, #37	@ 0x25
 8002cf6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d12:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d18:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d1e:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d24:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d2c:	4812      	ldr	r0, [pc, #72]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d2e:	f002 fba1 	bl	8005474 <HAL_DMA_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_SPI_MspInit+0x1f4>
    {
      Error_Handler();
 8002d38:	f7ff fd08 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d40:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d42:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <HAL_SPI_MspInit+0x230>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	2023      	movs	r0, #35	@ 0x23
 8002d4e:	f002 fb5c 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002d52:	2023      	movs	r0, #35	@ 0x23
 8002d54:	f002 fb73 	bl	800543e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002d58:	e0be      	b.n	8002ed8 <HAL_SPI_MspInit+0x390>
 8002d5a:	bf00      	nop
 8002d5c:	40013000 	.word	0x40013000
 8002d60:	58024400 	.word	0x58024400
 8002d64:	58020000 	.word	0x58020000
 8002d68:	58020c00 	.word	0x58020c00
 8002d6c:	58021800 	.word	0x58021800
 8002d70:	240004cc 	.word	0x240004cc
 8002d74:	40020040 	.word	0x40020040
 8002d78:	24000544 	.word	0x24000544
 8002d7c:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI4)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a56      	ldr	r2, [pc, #344]	@ (8002ee0 <HAL_SPI_MspInit+0x398>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	f040 80a6 	bne.w	8002ed8 <HAL_SPI_MspInit+0x390>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d96:	f107 0320 	add.w	r3, r7, #32
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f007 f828 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_SPI_MspInit+0x262>
      Error_Handler();
 8002da6:	f7ff fcd1 	bl	800274c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002daa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee4 <HAL_SPI_MspInit+0x39c>)
 8002dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee4 <HAL_SPI_MspInit+0x39c>)
 8002db2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_SPI_MspInit+0x39c>)
 8002dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc8:	4b46      	ldr	r3, [pc, #280]	@ (8002ee4 <HAL_SPI_MspInit+0x39c>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	4a45      	ldr	r2, [pc, #276]	@ (8002ee4 <HAL_SPI_MspInit+0x39c>)
 8002dd0:	f043 0310 	orr.w	r3, r3, #16
 8002dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd8:	4b42      	ldr	r3, [pc, #264]	@ (8002ee4 <HAL_SPI_MspInit+0x39c>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002de6:	2364      	movs	r3, #100	@ 0x64
 8002de8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002dfe:	2305      	movs	r3, #5
 8002e00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4837      	ldr	r0, [pc, #220]	@ (8002ee8 <HAL_SPI_MspInit+0x3a0>)
 8002e0c:	f005 fd92 	bl	8008934 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8002e10:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e12:	4a37      	ldr	r2, [pc, #220]	@ (8002ef0 <HAL_SPI_MspInit+0x3a8>)
 8002e14:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002e16:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e18:	2254      	movs	r2, #84	@ 0x54
 8002e1a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e1e:	2240      	movs	r2, #64	@ 0x40
 8002e20:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e22:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e28:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e2e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e36:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e42:	4b2a      	ldr	r3, [pc, #168]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e48:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e4a:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002e50:	4826      	ldr	r0, [pc, #152]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e52:	f002 fb0f 	bl	8005474 <HAL_DMA_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_SPI_MspInit+0x318>
      Error_Handler();
 8002e5c:	f7ff fc76 	bl	800274c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a22      	ldr	r2, [pc, #136]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e64:	679a      	str	r2, [r3, #120]	@ 0x78
 8002e66:	4a21      	ldr	r2, [pc, #132]	@ (8002eec <HAL_SPI_MspInit+0x3a4>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8002e6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <HAL_SPI_MspInit+0x3b0>)
 8002e70:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002e72:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e74:	2253      	movs	r2, #83	@ 0x53
 8002e76:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e8a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e92:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002e98:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002ea0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ea4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002eac:	4811      	ldr	r0, [pc, #68]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002eae:	f002 fae1 	bl	8005474 <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_SPI_MspInit+0x374>
      Error_Handler();
 8002eb8:	f7ff fc48 	bl	800274c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002ec0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <HAL_SPI_MspInit+0x3ac>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 3, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2103      	movs	r1, #3
 8002ecc:	2054      	movs	r0, #84	@ 0x54
 8002ece:	f002 fa9c 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002ed2:	2054      	movs	r0, #84	@ 0x54
 8002ed4:	f002 fab3 	bl	800543e <HAL_NVIC_EnableIRQ>
}
 8002ed8:	bf00      	nop
 8002eda:	37e8      	adds	r7, #232	@ 0xe8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013400 	.word	0x40013400
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	58021000 	.word	0x58021000
 8002eec:	240005bc 	.word	0x240005bc
 8002ef0:	40020428 	.word	0x40020428
 8002ef4:	24000634 	.word	0x24000634
 8002ef8:	40020458 	.word	0x40020458

08002efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a16      	ldr	r2, [pc, #88]	@ (8002f64 <HAL_TIM_Base_MspInit+0x68>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10f      	bne.n	8002f2e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f0e:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <HAL_TIM_Base_MspInit+0x6c>)
 8002f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f14:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <HAL_TIM_Base_MspInit+0x6c>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_TIM_Base_MspInit+0x6c>)
 8002f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f2c:	e013      	b.n	8002f56 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f36:	d10e      	bne.n	8002f56 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_TIM_Base_MspInit+0x6c>)
 8002f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <HAL_TIM_Base_MspInit+0x6c>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f48:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_TIM_Base_MspInit+0x6c>)
 8002f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40010000 	.word	0x40010000
 8002f68:	58024400 	.word	0x58024400

08002f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8c:	d13f      	bne.n	800300e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <HAL_TIM_MspPostInit+0xac>)
 8002f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f94:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_TIM_MspPostInit+0xac>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <HAL_TIM_MspPostInit+0xac>)
 8002fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fac:	4b1a      	ldr	r3, [pc, #104]	@ (8003018 <HAL_TIM_MspPostInit+0xac>)
 8002fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fb2:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <HAL_TIM_MspPostInit+0xac>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fbc:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <HAL_TIM_MspPostInit+0xac>)
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AO_4_PWM_Pin|AO_1_PWM_Pin;
 8002fca:	f248 0308 	movw	r3, #32776	@ 0x8008
 8002fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480d      	ldr	r0, [pc, #52]	@ (800301c <HAL_TIM_MspPostInit+0xb0>)
 8002fe8:	f005 fca4 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AO_3_PWM_Pin|AO_2_PWM_Pin;
 8002fec:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	4805      	ldr	r0, [pc, #20]	@ (8003020 <HAL_TIM_MspPostInit+0xb4>)
 800300a:	f005 fc93 	bl	8008934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	@ 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	58024400 	.word	0x58024400
 800301c:	58020000 	.word	0x58020000
 8003020:	58020400 	.word	0x58020400

08003024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b0c2      	sub	sp, #264	@ 0x108
 8003028:	af00      	add	r7, sp, #0
 800302a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800302e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003032:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003044:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003048:	22b4      	movs	r2, #180	@ 0xb4
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f00d fbf9 	bl	8010844 <memset>
  if(huart->Instance==UART4)
 8003052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4ab9      	ldr	r2, [pc, #740]	@ (8003344 <HAL_UART_MspInit+0x320>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d170      	bne.n	8003146 <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003064:	2302      	movs	r3, #2
 8003066:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800306e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003072:	4618      	mov	r0, r3
 8003074:	f006 febc 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800307e:	f7ff fb65 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003082:	4bb1      	ldr	r3, [pc, #708]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003088:	4aaf      	ldr	r2, [pc, #700]	@ (8003348 <HAL_UART_MspInit+0x324>)
 800308a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800308e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003092:	4bad      	ldr	r3, [pc, #692]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003098:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4ba9      	ldr	r3, [pc, #676]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80030a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a6:	4aa8      	ldr	r2, [pc, #672]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030b0:	4ba5      	ldr	r3, [pc, #660]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	4ba2      	ldr	r3, [pc, #648]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80030c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030c4:	4aa0      	ldr	r2, [pc, #640]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80030d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PA12     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = IOL4_TX_U4_Pin;
 80030dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80030f6:	2306      	movs	r3, #6
 80030f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(IOL4_TX_U4_GPIO_Port, &GPIO_InitStruct);
 80030fc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003100:	4619      	mov	r1, r3
 8003102:	4892      	ldr	r0, [pc, #584]	@ (800334c <HAL_UART_MspInit+0x328>)
 8003104:	f005 fc16 	bl	8008934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IOL4_RX_U4_Pin;
 8003108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800310c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003122:	2308      	movs	r3, #8
 8003124:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(IOL4_RX_U4_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800312c:	4619      	mov	r1, r3
 800312e:	4888      	ldr	r0, [pc, #544]	@ (8003350 <HAL_UART_MspInit+0x32c>)
 8003130:	f005 fc00 	bl	8008934 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003134:	2200      	movs	r2, #0
 8003136:	2100      	movs	r1, #0
 8003138:	2034      	movs	r0, #52	@ 0x34
 800313a:	f002 f966 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800313e:	2034      	movs	r0, #52	@ 0x34
 8003140:	f002 f97d 	bl	800543e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003144:	e1e5      	b.n	8003512 <HAL_UART_MspInit+0x4ee>
  else if(huart->Instance==UART5)
 8003146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800314a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a80      	ldr	r2, [pc, #512]	@ (8003354 <HAL_UART_MspInit+0x330>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d14b      	bne.n	80031f0 <HAL_UART_MspInit+0x1cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003158:	2302      	movs	r3, #2
 800315a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003162:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003166:	4618      	mov	r0, r3
 8003168:	f006 fe42 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8003172:	f7ff faeb 	bl	800274c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003176:	4b74      	ldr	r3, [pc, #464]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800317c:	4a72      	ldr	r2, [pc, #456]	@ (8003348 <HAL_UART_MspInit+0x324>)
 800317e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003186:	4b70      	ldr	r3, [pc, #448]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800318c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003194:	4b6c      	ldr	r3, [pc, #432]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800319a:	4a6b      	ldr	r2, [pc, #428]	@ (8003348 <HAL_UART_MspInit+0x324>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031a4:	4b68      	ldr	r3, [pc, #416]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = IOL1_RX_U5_Pin|IOL1_TX_U5_Pin;
 80031b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80031b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80031cc:	230e      	movs	r3, #14
 80031ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031d6:	4619      	mov	r1, r3
 80031d8:	485f      	ldr	r0, [pc, #380]	@ (8003358 <HAL_UART_MspInit+0x334>)
 80031da:	f005 fbab 	bl	8008934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	2035      	movs	r0, #53	@ 0x35
 80031e4:	f002 f911 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80031e8:	2035      	movs	r0, #53	@ 0x35
 80031ea:	f002 f928 	bl	800543e <HAL_NVIC_EnableIRQ>
}
 80031ee:	e190      	b.n	8003512 <HAL_UART_MspInit+0x4ee>
  else if(huart->Instance==UART7)
 80031f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a57      	ldr	r2, [pc, #348]	@ (800335c <HAL_UART_MspInit+0x338>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d14a      	bne.n	8003298 <HAL_UART_MspInit+0x274>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003202:	2302      	movs	r3, #2
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003210:	4618      	mov	r0, r3
 8003212:	f006 fded 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800321c:	f7ff fa96 	bl	800274c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003220:	4b49      	ldr	r3, [pc, #292]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003226:	4a48      	ldr	r2, [pc, #288]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800322c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003230:	4b45      	ldr	r3, [pc, #276]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003236:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800323a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800323e:	4b42      	ldr	r3, [pc, #264]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003244:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_UART_MspInit+0x324>)
 8003250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = IOL2_RX_U7_Pin|IOL2_RX_U7F7_Pin;
 800325c:	23c0      	movs	r3, #192	@ 0xc0
 800325e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003274:	2307      	movs	r3, #7
 8003276:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800327a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800327e:	4619      	mov	r1, r3
 8003280:	4837      	ldr	r0, [pc, #220]	@ (8003360 <HAL_UART_MspInit+0x33c>)
 8003282:	f005 fb57 	bl	8008934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	2100      	movs	r1, #0
 800328a:	2052      	movs	r0, #82	@ 0x52
 800328c:	f002 f8bd 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003290:	2052      	movs	r0, #82	@ 0x52
 8003292:	f002 f8d4 	bl	800543e <HAL_NVIC_EnableIRQ>
}
 8003296:	e13c      	b.n	8003512 <HAL_UART_MspInit+0x4ee>
  else if(huart->Instance==USART1)
 8003298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800329c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003364 <HAL_UART_MspInit+0x340>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d15e      	bne.n	8003368 <HAL_UART_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032b8:	4618      	mov	r0, r3
 80032ba:	f006 fd99 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 80032c4:	f7ff fa42 	bl	800274c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80032ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80032d0:	f043 0310 	orr.w	r3, r3, #16
 80032d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80032da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ec:	4a16      	ldr	r2, [pc, #88]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_UART_MspInit+0x324>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = IOL3_TX_U1_Pin|IOL3_TX_U1B15_Pin;
 8003304:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003308:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800331e:	2304      	movs	r3, #4
 8003320:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003328:	4619      	mov	r1, r3
 800332a:	480b      	ldr	r0, [pc, #44]	@ (8003358 <HAL_UART_MspInit+0x334>)
 800332c:	f005 fb02 	bl	8008934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2100      	movs	r1, #0
 8003334:	2025      	movs	r0, #37	@ 0x25
 8003336:	f002 f868 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800333a:	2025      	movs	r0, #37	@ 0x25
 800333c:	f002 f87f 	bl	800543e <HAL_NVIC_EnableIRQ>
}
 8003340:	e0e7      	b.n	8003512 <HAL_UART_MspInit+0x4ee>
 8003342:	bf00      	nop
 8003344:	40004c00 	.word	0x40004c00
 8003348:	58024400 	.word	0x58024400
 800334c:	58020000 	.word	0x58020000
 8003350:	58020800 	.word	0x58020800
 8003354:	40005000 	.word	0x40005000
 8003358:	58020400 	.word	0x58020400
 800335c:	40007800 	.word	0x40007800
 8003360:	58021400 	.word	0x58021400
 8003364:	40011000 	.word	0x40011000
  else if(huart->Instance==USART2)
 8003368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800336c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a69      	ldr	r2, [pc, #420]	@ (800351c <HAL_UART_MspInit+0x4f8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d14a      	bne.n	8003410 <HAL_UART_MspInit+0x3ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800337a:	2302      	movs	r3, #2
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003384:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003388:	4618      	mov	r0, r3
 800338a:	f006 fd31 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8003394:	f7ff f9da 	bl	800274c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003398:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 800339a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800339e:	4a60      	ldr	r2, [pc, #384]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 80033aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 80033b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033bc:	4a58      	ldr	r2, [pc, #352]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 80033be:	f043 0308 	orr.w	r3, r3, #8
 80033c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c6:	4b56      	ldr	r3, [pc, #344]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 80033c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RS485_TX_U2_Pin|RS485_RX_U2_Pin;
 80033d4:	2360      	movs	r3, #96	@ 0x60
 80033d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ec:	2307      	movs	r3, #7
 80033ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80033f6:	4619      	mov	r1, r3
 80033f8:	484a      	ldr	r0, [pc, #296]	@ (8003524 <HAL_UART_MspInit+0x500>)
 80033fa:	f005 fa9b 	bl	8008934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	2026      	movs	r0, #38	@ 0x26
 8003404:	f002 f801 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003408:	2026      	movs	r0, #38	@ 0x26
 800340a:	f002 f818 	bl	800543e <HAL_NVIC_EnableIRQ>
}
 800340e:	e080      	b.n	8003512 <HAL_UART_MspInit+0x4ee>
  else if(huart->Instance==USART3)
 8003410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a42      	ldr	r2, [pc, #264]	@ (8003528 <HAL_UART_MspInit+0x504>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d177      	bne.n	8003512 <HAL_UART_MspInit+0x4ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003422:	2302      	movs	r3, #2
 8003424:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800342c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003430:	4618      	mov	r0, r3
 8003432:	f006 fcdd 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_UART_MspInit+0x41c>
      Error_Handler();
 800343c:	f7ff f986 	bl	800274c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003440:	4b37      	ldr	r3, [pc, #220]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003446:	4a36      	ldr	r2, [pc, #216]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800344c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003450:	4b33      	ldr	r3, [pc, #204]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	4b30      	ldr	r3, [pc, #192]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003464:	4a2e      	ldr	r2, [pc, #184]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800346e:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800347c:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 800347e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003482:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800348c:	4b24      	ldr	r3, [pc, #144]	@ (8003520 <HAL_UART_MspInit+0x4fc>)
 800348e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003492:	f003 0204 	and.w	r2, r3, #4
 8003496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800349a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034a8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = DBUG_RX_U3_Pin;
 80034aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034c4:	2307      	movs	r3, #7
 80034c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(DBUG_RX_U3_GPIO_Port, &GPIO_InitStruct);
 80034ca:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4816      	ldr	r0, [pc, #88]	@ (800352c <HAL_UART_MspInit+0x508>)
 80034d2:	f005 fa2f 	bl	8008934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DBUG_TX_U3_Pin;
 80034d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034f0:	2307      	movs	r3, #7
 80034f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(DBUG_TX_U3_GPIO_Port, &GPIO_InitStruct);
 80034f6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80034fa:	4619      	mov	r1, r3
 80034fc:	480c      	ldr	r0, [pc, #48]	@ (8003530 <HAL_UART_MspInit+0x50c>)
 80034fe:	f005 fa19 	bl	8008934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	2027      	movs	r0, #39	@ 0x27
 8003508:	f001 ff7f 	bl	800540a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800350c:	2027      	movs	r0, #39	@ 0x27
 800350e:	f001 ff96 	bl	800543e <HAL_NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40004400 	.word	0x40004400
 8003520:	58024400 	.word	0x58024400
 8003524:	58020c00 	.word	0x58020c00
 8003528:	40004800 	.word	0x40004800
 800352c:	58020400 	.word	0x58020400
 8003530:	58020800 	.word	0x58020800

08003534 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003534:	b580      	push	{r7, lr}
 8003536:	b0b4      	sub	sp, #208	@ 0xd0
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800353a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800354a:	4b5a      	ldr	r3, [pc, #360]	@ (80036b4 <HAL_FMC_MspInit+0x180>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 80ac 	bne.w	80036ac <HAL_FMC_MspInit+0x178>
    return;
  }
  FMC_Initialized = 1;
 8003554:	4b57      	ldr	r3, [pc, #348]	@ (80036b4 <HAL_FMC_MspInit+0x180>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800355a:	f107 0308 	add.w	r3, r7, #8
 800355e:	22b4      	movs	r2, #180	@ 0xb4
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f00d f96e 	bl	8010844 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003568:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800356c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800356e:	2300      	movs	r3, #0
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4618      	mov	r0, r3
 8003578:	f006 fc3a 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8003582:	f7ff f8e3 	bl	800274c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003586:	4b4c      	ldr	r3, [pc, #304]	@ (80036b8 <HAL_FMC_MspInit+0x184>)
 8003588:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800358c:	4a4a      	ldr	r2, [pc, #296]	@ (80036b8 <HAL_FMC_MspInit+0x184>)
 800358e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003592:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003596:	4b48      	ldr	r3, [pc, #288]	@ (80036b8 <HAL_FMC_MspInit+0x184>)
 8003598:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800359c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
  PC12   ------> FMC_D6
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80035a4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80035a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035be:	230c      	movs	r3, #12
 80035c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035c4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80035c8:	4619      	mov	r1, r3
 80035ca:	483c      	ldr	r0, [pc, #240]	@ (80036bc <HAL_FMC_MspInit+0x188>)
 80035cc:	f005 f9b2 	bl	8008934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80035d0:	230d      	movs	r3, #13
 80035d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e8:	230c      	movs	r3, #12
 80035ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ee:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80035f2:	4619      	mov	r1, r3
 80035f4:	4832      	ldr	r0, [pc, #200]	@ (80036c0 <HAL_FMC_MspInit+0x18c>)
 80035f6:	f005 f99d 	bl	8008934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80035fa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80035fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360e:	2303      	movs	r3, #3
 8003610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003614:	230c      	movs	r3, #12
 8003616:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800361a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800361e:	4619      	mov	r1, r3
 8003620:	4828      	ldr	r0, [pc, #160]	@ (80036c4 <HAL_FMC_MspInit+0x190>)
 8003622:	f005 f987 	bl	8008934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8003626:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800362a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003640:	230c      	movs	r3, #12
 8003642:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003646:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800364a:	4619      	mov	r1, r3
 800364c:	481e      	ldr	r0, [pc, #120]	@ (80036c8 <HAL_FMC_MspInit+0x194>)
 800364e:	f005 f971 	bl	8008934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8003652:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8003656:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800366c:	230c      	movs	r3, #12
 800366e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003672:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003676:	4619      	mov	r1, r3
 8003678:	4814      	ldr	r0, [pc, #80]	@ (80036cc <HAL_FMC_MspInit+0x198>)
 800367a:	f005 f95b 	bl	8008934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800367e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003682:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF1_FMC;
 8003698:	2301      	movs	r3, #1
 800369a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80036a2:	4619      	mov	r1, r3
 80036a4:	4806      	ldr	r0, [pc, #24]	@ (80036c0 <HAL_FMC_MspInit+0x18c>)
 80036a6:	f005 f945 	bl	8008934 <HAL_GPIO_Init>
 80036aa:	e000      	b.n	80036ae <HAL_FMC_MspInit+0x17a>
    return;
 80036ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80036ae:	37d0      	adds	r7, #208	@ 0xd0
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	24000ae0 	.word	0x24000ae0
 80036b8:	58024400 	.word	0x58024400
 80036bc:	58021400 	.word	0x58021400
 80036c0:	58020800 	.word	0x58020800
 80036c4:	58021800 	.word	0x58021800
 80036c8:	58021000 	.word	0x58021000
 80036cc:	58020c00 	.word	0x58020c00

080036d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80036d8:	f7ff ff2c 	bl	8003534 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <NMI_Handler+0x4>

080036ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <HardFault_Handler+0x4>

080036f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <MemManage_Handler+0x4>

080036fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <BusFault_Handler+0x4>

08003704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <UsageFault_Handler+0x4>

0800370c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373a:	f000 f9c5 	bl	8003ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <DMA1_Stream2_IRQHandler+0x10>)
 800374a:	f003 f9b9 	bl	8006ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	240004cc 	.word	0x240004cc

08003758 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800375c:	4802      	ldr	r0, [pc, #8]	@ (8003768 <DMA1_Stream3_IRQHandler+0x10>)
 800375e:	f003 f9af 	bl	8006ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	24000544 	.word	0x24000544

0800376c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003770:	4802      	ldr	r0, [pc, #8]	@ (800377c <SPI1_IRQHandler+0x10>)
 8003772:	f009 fdb9 	bl	800d2e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	240003bc 	.word	0x240003bc

08003780 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003784:	4802      	ldr	r0, [pc, #8]	@ (8003790 <USART1_IRQHandler+0x10>)
 8003786:	f00b f9b5 	bl	800eaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	240008f4 	.word	0x240008f4

08003794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003798:	4802      	ldr	r0, [pc, #8]	@ (80037a4 <USART2_IRQHandler+0x10>)
 800379a:	f00b f9ab 	bl	800eaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	24000984 	.word	0x24000984

080037a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037ac:	4802      	ldr	r0, [pc, #8]	@ (80037b8 <USART3_IRQHandler+0x10>)
 80037ae:	f00b f9a1 	bl	800eaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	24000a14 	.word	0x24000a14

080037bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <UART4_IRQHandler+0x10>)
 80037c2:	f00b f997 	bl	800eaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24000744 	.word	0x24000744

080037d0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80037d4:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <UART5_IRQHandler+0x10>)
 80037d6:	f00b f98d 	bl	800eaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	240007d4 	.word	0x240007d4

080037e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <DMA2_Stream1_IRQHandler+0x10>)
 80037ea:	f003 f969 	bl	8006ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	240005bc 	.word	0x240005bc

080037f8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <DMA2_Stream3_IRQHandler+0x10>)
 80037fe:	f003 f95f 	bl	8006ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	24000634 	.word	0x24000634

0800380c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <UART7_IRQHandler+0x10>)
 8003812:	f00b f96f 	bl	800eaf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	24000864 	.word	0x24000864

08003820 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <SPI4_IRQHandler+0x10>)
 8003826:	f009 fd5f 	bl	800d2e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	24000444 	.word	0x24000444

08003834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800383c:	4a14      	ldr	r2, [pc, #80]	@ (8003890 <_sbrk+0x5c>)
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <_sbrk+0x60>)
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003848:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003850:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <_sbrk+0x64>)
 8003852:	4a12      	ldr	r2, [pc, #72]	@ (800389c <_sbrk+0x68>)
 8003854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003856:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <_sbrk+0x64>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	429a      	cmp	r2, r3
 8003862:	d207      	bcs.n	8003874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003864:	f00c fff6 	bl	8010854 <__errno>
 8003868:	4603      	mov	r3, r0
 800386a:	220c      	movs	r2, #12
 800386c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	e009      	b.n	8003888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <_sbrk+0x64>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <_sbrk+0x64>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <_sbrk+0x64>)
 8003884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	24050000 	.word	0x24050000
 8003894:	00000400 	.word	0x00000400
 8003898:	24000ae4 	.word	0x24000ae4
 800389c:	24000c38 	.word	0x24000c38

080038a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038a4:	4b32      	ldr	r3, [pc, #200]	@ (8003970 <SystemInit+0xd0>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	4a31      	ldr	r2, [pc, #196]	@ (8003970 <SystemInit+0xd0>)
 80038ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003974 <SystemInit+0xd4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	2b06      	cmp	r3, #6
 80038be:	d807      	bhi.n	80038d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003974 <SystemInit+0xd4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 030f 	bic.w	r3, r3, #15
 80038c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003974 <SystemInit+0xd4>)
 80038ca:	f043 0307 	orr.w	r3, r3, #7
 80038ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038d0:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <SystemInit+0xd8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a28      	ldr	r2, [pc, #160]	@ (8003978 <SystemInit+0xd8>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038dc:	4b26      	ldr	r3, [pc, #152]	@ (8003978 <SystemInit+0xd8>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038e2:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <SystemInit+0xd8>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4924      	ldr	r1, [pc, #144]	@ (8003978 <SystemInit+0xd8>)
 80038e8:	4b24      	ldr	r3, [pc, #144]	@ (800397c <SystemInit+0xdc>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038ee:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <SystemInit+0xd4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <SystemInit+0xd4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 030f 	bic.w	r3, r3, #15
 8003902:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <SystemInit+0xd4>)
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <SystemInit+0xd8>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003910:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <SystemInit+0xd8>)
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003916:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <SystemInit+0xd8>)
 8003918:	2200      	movs	r2, #0
 800391a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <SystemInit+0xd8>)
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <SystemInit+0xe0>)
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003922:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <SystemInit+0xd8>)
 8003924:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <SystemInit+0xe4>)
 8003926:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <SystemInit+0xd8>)
 800392a:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <SystemInit+0xe8>)
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <SystemInit+0xd8>)
 8003930:	2200      	movs	r2, #0
 8003932:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003934:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <SystemInit+0xd8>)
 8003936:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <SystemInit+0xe8>)
 8003938:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800393a:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <SystemInit+0xd8>)
 800393c:	2200      	movs	r2, #0
 800393e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003940:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <SystemInit+0xd8>)
 8003942:	4a11      	ldr	r2, [pc, #68]	@ (8003988 <SystemInit+0xe8>)
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <SystemInit+0xd8>)
 8003948:	2200      	movs	r2, #0
 800394a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <SystemInit+0xd8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <SystemInit+0xd8>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003956:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003958:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <SystemInit+0xd8>)
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <SystemInit+0xec>)
 8003960:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003964:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00
 8003974:	52002000 	.word	0x52002000
 8003978:	58024400 	.word	0x58024400
 800397c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003980:	02020200 	.word	0x02020200
 8003984:	01ff0000 	.word	0x01ff0000
 8003988:	01010280 	.word	0x01010280
 800398c:	52004000 	.word	0x52004000

08003990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003994:	f7ff ff84 	bl	80038a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003998:	480c      	ldr	r0, [pc, #48]	@ (80039cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800399a:	490d      	ldr	r1, [pc, #52]	@ (80039d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a0:	e002      	b.n	80039a8 <LoopCopyDataInit>

080039a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a6:	3304      	adds	r3, #4

080039a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039ac:	d3f9      	bcc.n	80039a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ae:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039b0:	4c0a      	ldr	r4, [pc, #40]	@ (80039dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80039b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b4:	e001      	b.n	80039ba <LoopFillZerobss>

080039b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b8:	3204      	adds	r2, #4

080039ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039bc:	d3fb      	bcc.n	80039b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039be:	f00c ff4f 	bl	8010860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039c2:	f7fd fdfd 	bl	80015c0 <main>
  bx  lr
 80039c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80039cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039d0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80039d4:	08011894 	.word	0x08011894
  ldr r2, =_sbss
 80039d8:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80039dc:	24000c34 	.word	0x24000c34

080039e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039e0:	e7fe      	b.n	80039e0 <ADC3_IRQHandler>
	...

080039e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ea:	2003      	movs	r0, #3
 80039ec:	f001 fd02 	bl	80053f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039f0:	f006 f828 	bl	8009a44 <HAL_RCC_GetSysClockFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <HAL_Init+0x68>)
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	4913      	ldr	r1, [pc, #76]	@ (8003a50 <HAL_Init+0x6c>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <HAL_Init+0x68>)
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	4a0e      	ldr	r2, [pc, #56]	@ (8003a50 <HAL_Init+0x6c>)
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
 8003a24:	4a0b      	ldr	r2, [pc, #44]	@ (8003a54 <HAL_Init+0x70>)
 8003a26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a28:	4a0b      	ldr	r2, [pc, #44]	@ (8003a58 <HAL_Init+0x74>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a2e:	200f      	movs	r0, #15
 8003a30:	f000 f814 	bl	8003a5c <HAL_InitTick>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e002      	b.n	8003a44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a3e:	f7fe fec7 	bl	80027d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	08011810 	.word	0x08011810
 8003a54:	24000004 	.word	0x24000004
 8003a58:	24000000 	.word	0x24000000

08003a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a64:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_InitTick+0x60>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e021      	b.n	8003ab4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a70:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <HAL_InitTick+0x64>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <HAL_InitTick+0x60>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fce7 	bl	800545a <HAL_SYSTICK_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00e      	b.n	8003ab4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d80a      	bhi.n	8003ab2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f001 fcb1 	bl	800540a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa8:	4a06      	ldr	r2, [pc, #24]	@ (8003ac4 <HAL_InitTick+0x68>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2400000c 	.word	0x2400000c
 8003ac0:	24000000 	.word	0x24000000
 8003ac4:	24000008 	.word	0x24000008

08003ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_IncTick+0x20>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_IncTick+0x24>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <HAL_IncTick+0x24>)
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2400000c 	.word	0x2400000c
 8003aec:	24000ae8 	.word	0x24000ae8

08003af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return uwTick;
 8003af4:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <HAL_GetTick+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	24000ae8 	.word	0x24000ae8

08003b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff ffee 	bl	8003af0 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d005      	beq.n	8003b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_Delay+0x44>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2e:	bf00      	nop
 8003b30:	f7ff ffde 	bl	8003af0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d8f7      	bhi.n	8003b30 <HAL_Delay+0x28>
  {
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2400000c 	.word	0x2400000c

08003b50 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8003b60:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	58000400 	.word	0x58000400

08003b78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3360      	adds	r3, #96	@ 0x60
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a10      	ldr	r2, [pc, #64]	@ (8003c40 <LL_ADC_SetOffset+0x60>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10b      	bne.n	8003c1c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c1a:	e00b      	b.n	8003c34 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	601a      	str	r2, [r3, #0]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	58026000 	.word	0x58026000

08003c44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3360      	adds	r3, #96	@ 0x60
 8003c52:	461a      	mov	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	611a      	str	r2, [r3, #16]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3360      	adds	r3, #96	@ 0x60
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	601a      	str	r2, [r3, #0]
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58026000 	.word	0x58026000

08003ce8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d28 <LL_ADC_SetOffsetSaturation+0x40>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10e      	bne.n	8003d1a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3360      	adds	r3, #96	@ 0x60
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	58026000 	.word	0x58026000

08003d2c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <LL_ADC_SetOffsetSign+0x40>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10e      	bne.n	8003d5e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3360      	adds	r3, #96	@ 0x60
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	58026000 	.word	0x58026000

08003d70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3360      	adds	r3, #96	@ 0x60
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003dc0 <LL_ADC_SetOffsetState+0x50>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003da2:	e007      	b.n	8003db4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	58026000 	.word	0x58026000

08003dc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3330      	adds	r3, #48	@ 0x30
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	4413      	add	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	211f      	movs	r1, #31
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0e9b      	lsrs	r3, r3, #26
 8003dfc:	f003 011f 	and.w	r1, r3, #31
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	0e5b      	lsrs	r3, r3, #25
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	4413      	add	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	0d1b      	lsrs	r3, r3, #20
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2107      	movs	r1, #7
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	401a      	ands	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	0d1b      	lsrs	r3, r3, #20
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	@ (8003eec <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d115      	bne.n	8003eb4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0318 	and.w	r3, r3, #24
 8003e9e:	4914      	ldr	r1, [pc, #80]	@ (8003ef0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ea0:	40d9      	lsrs	r1, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	400b      	ands	r3, r1
 8003ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003eb2:	e014      	b.n	8003ede <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0318 	and.w	r3, r3, #24
 8003eca:	4909      	ldr	r1, [pc, #36]	@ (8003ef0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ecc:	40d9      	lsrs	r1, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	400b      	ands	r3, r1
 8003ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	58026000 	.word	0x58026000
 8003ef0:	000fffff 	.word	0x000fffff

08003ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6093      	str	r3, [r2, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	5fffffc0 	.word	0x5fffffc0

08003f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2c:	d101      	bne.n	8003f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	6fffffc0 	.word	0x6fffffc0

08003f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f7c:	d101      	bne.n	8003f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <LL_ADC_IsEnabled+0x18>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LL_ADC_IsEnabled+0x1a>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d101      	bne.n	8003fce <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d101      	bne.n	8003ff4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b089      	sub	sp, #36	@ 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e1ee      	b.n	80043fc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fe fbe9 	bl	8002804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff67 	bl	8003f18 <LL_ADC_IsDeepPowerDownEnabled>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff4d 	bl	8003ef4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff82 	bl	8003f68 <LL_ADC_IsInternalRegulatorEnabled>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d114      	bne.n	8004094 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff66 	bl	8003f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004074:	4b8e      	ldr	r3, [pc, #568]	@ (80042b0 <HAL_ADC_Init+0x2ac>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	4a8e      	ldr	r2, [pc, #568]	@ (80042b4 <HAL_ADC_Init+0x2b0>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	3301      	adds	r3, #1
 8004084:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004086:	e002      	b.n	800408e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3b01      	subs	r3, #1
 800408c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f9      	bne.n	8004088 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff65 	bl	8003f68 <LL_ADC_IsInternalRegulatorEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	f043 0210 	orr.w	r2, r3, #16
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff ff76 	bl	8003fb6 <LL_ADC_REG_IsConversionOngoing>
 80040ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 8188 	bne.w	80043ea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 8184 	bne.w	80043ea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040ea:	f043 0202 	orr.w	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff ff4a 	bl	8003f90 <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d136      	bne.n	8004170 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6c      	ldr	r2, [pc, #432]	@ (80042b8 <HAL_ADC_Init+0x2b4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_ADC_Init+0x112>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6a      	ldr	r2, [pc, #424]	@ (80042bc <HAL_ADC_Init+0x2b8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10e      	bne.n	8004134 <HAL_ADC_Init+0x130>
 8004116:	4868      	ldr	r0, [pc, #416]	@ (80042b8 <HAL_ADC_Init+0x2b4>)
 8004118:	f7ff ff3a 	bl	8003f90 <LL_ADC_IsEnabled>
 800411c:	4604      	mov	r4, r0
 800411e:	4867      	ldr	r0, [pc, #412]	@ (80042bc <HAL_ADC_Init+0x2b8>)
 8004120:	f7ff ff36 	bl	8003f90 <LL_ADC_IsEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	4323      	orrs	r3, r4
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e008      	b.n	8004146 <HAL_ADC_Init+0x142>
 8004134:	4862      	ldr	r0, [pc, #392]	@ (80042c0 <HAL_ADC_Init+0x2bc>)
 8004136:	f7ff ff2b 	bl	8003f90 <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <HAL_ADC_Init+0x2b4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_ADC_Init+0x15a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a58      	ldr	r2, [pc, #352]	@ (80042bc <HAL_ADC_Init+0x2b8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_ADC_Init+0x15e>
 800415e:	4a59      	ldr	r2, [pc, #356]	@ (80042c4 <HAL_ADC_Init+0x2c0>)
 8004160:	e000      	b.n	8004164 <HAL_ADC_Init+0x160>
 8004162:	4a59      	ldr	r2, [pc, #356]	@ (80042c8 <HAL_ADC_Init+0x2c4>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7ff fd04 	bl	8003b78 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a52      	ldr	r2, [pc, #328]	@ (80042c0 <HAL_ADC_Init+0x2bc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d129      	bne.n	80041ce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7e5b      	ldrb	r3, [r3, #25]
 800417e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004184:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800418a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d013      	beq.n	80041bc <HAL_ADC_Init+0x1b8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d00d      	beq.n	80041b8 <HAL_ADC_Init+0x1b4>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b1c      	cmp	r3, #28
 80041a2:	d007      	beq.n	80041b4 <HAL_ADC_Init+0x1b0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b18      	cmp	r3, #24
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_Init+0x1ac>
 80041ac:	2318      	movs	r3, #24
 80041ae:	e006      	b.n	80041be <HAL_ADC_Init+0x1ba>
 80041b0:	2300      	movs	r3, #0
 80041b2:	e004      	b.n	80041be <HAL_ADC_Init+0x1ba>
 80041b4:	2310      	movs	r3, #16
 80041b6:	e002      	b.n	80041be <HAL_ADC_Init+0x1ba>
 80041b8:	2308      	movs	r3, #8
 80041ba:	e000      	b.n	80041be <HAL_ADC_Init+0x1ba>
 80041bc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80041be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	e00e      	b.n	80041ec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7e5b      	ldrb	r3, [r3, #25]
 80041d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80041de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	3b01      	subs	r3, #1
 80041fc:	045b      	lsls	r3, r3, #17
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <HAL_ADC_Init+0x2bc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d115      	bne.n	8004256 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4b26      	ldr	r3, [pc, #152]	@ (80042cc <HAL_ADC_Init+0x2c8>)
 8004232:	4013      	ands	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	430b      	orrs	r3, r1
 800423c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	611a      	str	r2, [r3, #16]
 8004254:	e009      	b.n	800426a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <HAL_ADC_Init+0x2cc>)
 800425e:	4013      	ands	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	430b      	orrs	r3, r1
 8004268:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fea1 	bl	8003fb6 <LL_ADC_REG_IsConversionOngoing>
 8004274:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff feae 	bl	8003fdc <LL_ADC_INJ_IsConversionOngoing>
 8004280:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 808e 	bne.w	80043a6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 808a 	bne.w	80043a6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0a      	ldr	r2, [pc, #40]	@ (80042c0 <HAL_ADC_Init+0x2bc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d11b      	bne.n	80042d4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7e1b      	ldrb	r3, [r3, #24]
 80042a0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042a8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e018      	b.n	80042e2 <HAL_ADC_Init+0x2de>
 80042b0:	24000000 	.word	0x24000000
 80042b4:	053e2d63 	.word	0x053e2d63
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40022100 	.word	0x40022100
 80042c0:	58026000 	.word	0x58026000
 80042c4:	40022300 	.word	0x40022300
 80042c8:	58026300 	.word	0x58026300
 80042cc:	fff04007 	.word	0xfff04007
 80042d0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7e1b      	ldrb	r3, [r3, #24]
 80042d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	4b46      	ldr	r3, [pc, #280]	@ (8004404 <HAL_ADC_Init+0x400>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d137      	bne.n	8004370 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3f      	ldr	r2, [pc, #252]	@ (8004408 <HAL_ADC_Init+0x404>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d116      	bne.n	800433e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	4b3d      	ldr	r3, [pc, #244]	@ (800440c <HAL_ADC_Init+0x408>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800432e:	430a      	orrs	r2, r1
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	611a      	str	r2, [r3, #16]
 800433c:	e020      	b.n	8004380 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	4b32      	ldr	r3, [pc, #200]	@ (8004410 <HAL_ADC_Init+0x40c>)
 8004346:	4013      	ands	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800434c:	3a01      	subs	r2, #1
 800434e:	0411      	lsls	r1, r2, #16
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004360:	430a      	orrs	r2, r1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	611a      	str	r2, [r3, #16]
 800436e:	e007      	b.n	8004380 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1b      	ldr	r2, [pc, #108]	@ (8004408 <HAL_ADC_Init+0x404>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d002      	beq.n	80043a6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fd63 	bl	8004e6c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10c      	bne.n	80043c8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	f023 010f 	bic.w	r1, r3, #15
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c6:	e007      	b.n	80043d8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020f 	bic.w	r2, r2, #15
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043dc:	f023 0303 	bic.w	r3, r3, #3
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60
 80043e8:	e007      	b.n	80043fa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ee:	f043 0210 	orr.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3724      	adds	r7, #36	@ 0x24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd90      	pop	{r4, r7, pc}
 8004404:	ffffbffc 	.word	0xffffbffc
 8004408:	58026000 	.word	0x58026000
 800440c:	fc00f81f 	.word	0xfc00f81f
 8004410:	fc00f81e 	.word	0xfc00f81e

08004414 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b0b9      	sub	sp, #228	@ 0xe4
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800442e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4aa9      	ldr	r2, [pc, #676]	@ (80046dc <HAL_ADC_ConfigChannel+0x2c8>)
 8004436:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x34>
 8004442:	2302      	movs	r3, #2
 8004444:	f000 bcfa 	b.w	8004e3c <HAL_ADC_ConfigChannel+0xa28>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fdae 	bl	8003fb6 <LL_ADC_REG_IsConversionOngoing>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 84de 	bne.w	8004e1e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a9e      	ldr	r2, [pc, #632]	@ (80046e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d033      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <HAL_ADC_ConfigChannel+0x76>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0e9b      	lsrs	r3, r3, #26
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2201      	movs	r2, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	e01d      	b.n	80044c6 <HAL_ADC_ConfigChannel+0xb2>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800449e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e004      	b.n	80044bc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80044b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	69d1      	ldr	r1, [r2, #28]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f7ff fc6f 	bl	8003dc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fd63 	bl	8003fb6 <LL_ADC_REG_IsConversionOngoing>
 80044f0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fd6f 	bl	8003fdc <LL_ADC_INJ_IsConversionOngoing>
 80044fe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 8270 	bne.w	80049ec <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800450c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004510:	2b00      	cmp	r3, #0
 8004512:	f040 826b 	bne.w	80049ec <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	461a      	mov	r2, r3
 8004524:	f7ff fc7a 	bl	8003e1c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6c      	ldr	r2, [pc, #432]	@ (80046e0 <HAL_ADC_ConfigChannel+0x2cc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10d      	bne.n	800454e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800454c:	e032      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800454e:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800455a:	d10b      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x160>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	e01d      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x19c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_ADC_ConfigChannel+0x186>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	e00a      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x19c>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d048      	beq.n	800464e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6919      	ldr	r1, [r3, #16]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045cc:	f7ff fb08 	bl	8003be0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a42      	ldr	r2, [pc, #264]	@ (80046e0 <HAL_ADC_ConfigChannel+0x2cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d119      	bne.n	800460e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6919      	ldr	r1, [r3, #16]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7ff fba0 	bl	8003d2c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6919      	ldr	r1, [r3, #16]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x1f0>
 80045fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004602:	e000      	b.n	8004606 <HAL_ADC_ConfigChannel+0x1f2>
 8004604:	2300      	movs	r3, #0
 8004606:	461a      	mov	r2, r3
 8004608:	f7ff fb6e 	bl	8003ce8 <LL_ADC_SetOffsetSaturation>
 800460c:	e1ee      	b.n	80049ec <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6919      	ldr	r1, [r3, #16]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800461c:	2b01      	cmp	r3, #1
 800461e:	d102      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x212>
 8004620:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004624:	e000      	b.n	8004628 <HAL_ADC_ConfigChannel+0x214>
 8004626:	2300      	movs	r3, #0
 8004628:	461a      	mov	r2, r3
 800462a:	f7ff fb3b 	bl	8003ca4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6919      	ldr	r1, [r3, #16]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	7e1b      	ldrb	r3, [r3, #24]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x230>
 800463e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004642:	e000      	b.n	8004646 <HAL_ADC_ConfigChannel+0x232>
 8004644:	2300      	movs	r3, #0
 8004646:	461a      	mov	r2, r3
 8004648:	f7ff fb12 	bl	8003c70 <LL_ADC_SetDataRightShift>
 800464c:	e1ce      	b.n	80049ec <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a23      	ldr	r2, [pc, #140]	@ (80046e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	f040 8181 	bne.w	800495c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff faef 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 8004666:	4603      	mov	r3, r0
 8004668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x272>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fae4 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 800467c:	4603      	mov	r3, r0
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	e01e      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x2b0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fad9 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 8004692:	4603      	mov	r3, r0
 8004694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80046a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80046a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80046ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80046b4:	2320      	movs	r3, #32
 80046b6:	e004      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80046b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x2d4>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0e9b      	lsrs	r3, r3, #26
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	e01e      	b.n	800471a <HAL_ADC_ConfigChannel+0x306>
 80046dc:	47ff0000 	.word	0x47ff0000
 80046e0:	58026000 	.word	0x58026000
 80046e4:	5c001000 	.word	0x5c001000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80046fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e004      	b.n	800471a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	429a      	cmp	r2, r3
 800471c:	d106      	bne.n	800472c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fb22 	bl	8003d70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fa86 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x344>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fa7b 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	f003 021f 	and.w	r2, r3, #31
 8004756:	e01e      	b.n	8004796 <HAL_ADC_ConfigChannel+0x382>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fa70 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 8004764:	4603      	mov	r3, r0
 8004766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004776:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800477a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800477e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004786:	2320      	movs	r3, #32
 8004788:	e004      	b.n	8004794 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800478a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x39a>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0e9b      	lsrs	r3, r3, #26
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	e018      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x3cc>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80047c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80047ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80047d2:	2320      	movs	r3, #32
 80047d4:	e004      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80047d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d106      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fabf 	bl	8003d70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2102      	movs	r1, #2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fa23 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 80047fe:	4603      	mov	r3, r0
 8004800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <HAL_ADC_ConfigChannel+0x40a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fa18 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 8004814:	4603      	mov	r3, r0
 8004816:	0e9b      	lsrs	r3, r3, #26
 8004818:	f003 021f 	and.w	r2, r3, #31
 800481c:	e01e      	b.n	800485c <HAL_ADC_ConfigChannel+0x448>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2102      	movs	r1, #2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fa0d 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 800482a:	4603      	mov	r3, r0
 800482c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800483c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e004      	b.n	800485a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004850:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x460>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	0e9b      	lsrs	r3, r3, #26
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	e014      	b.n	800489e <HAL_ADC_ConfigChannel+0x48a>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004884:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004888:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e004      	b.n	800489e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004894:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	429a      	cmp	r2, r3
 80048a0:	d106      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2102      	movs	r1, #2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fa60 	bl	8003d70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2103      	movs	r1, #3
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f9c4 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 80048bc:	4603      	mov	r3, r0
 80048be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x4c8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2103      	movs	r1, #3
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f9b9 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 80048d2:	4603      	mov	r3, r0
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	f003 021f 	and.w	r2, r3, #31
 80048da:	e017      	b.n	800490c <HAL_ADC_ConfigChannel+0x4f8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2103      	movs	r1, #3
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff f9ae 	bl	8003c44 <LL_ADC_GetOffsetChannel>
 80048e8:	4603      	mov	r3, r0
 80048ea:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80048f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048f6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80048f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80048fe:	2320      	movs	r3, #32
 8004900:	e003      	b.n	800490a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x510>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	0e9b      	lsrs	r3, r3, #26
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	e011      	b.n	8004948 <HAL_ADC_ConfigChannel+0x534>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004934:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800493c:	2320      	movs	r3, #32
 800493e:	e003      	b.n	8004948 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004942:	fab3 f383 	clz	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	429a      	cmp	r2, r3
 800494a:	d14f      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	2103      	movs	r1, #3
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fa0b 	bl	8003d70 <LL_ADC_SetOffsetState>
 800495a:	e047      	b.n	80049ec <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004962:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	069b      	lsls	r3, r3, #26
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800497e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	069b      	lsls	r3, r3, #26
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80049a2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	069b      	lsls	r3, r3, #26
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d107      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80049c6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	069b      	lsls	r3, r3, #26
 80049d8:	429a      	cmp	r2, r3
 80049da:	d107      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80049ea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff facd 	bl	8003f90 <LL_ADC_IsEnabled>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8219 	bne.w	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f7ff fa32 	bl	8003e74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4aa1      	ldr	r2, [pc, #644]	@ (8004c9c <HAL_ADC_ConfigChannel+0x888>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	f040 812e 	bne.w	8004c78 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x630>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0e9b      	lsrs	r3, r3, #26
 8004a32:	3301      	adds	r3, #1
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2b09      	cmp	r3, #9
 8004a3a:	bf94      	ite	ls
 8004a3c:	2301      	movls	r3, #1
 8004a3e:	2300      	movhi	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e019      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x664>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	e003      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	bf94      	ite	ls
 8004a72:	2301      	movls	r3, #1
 8004a74:	2300      	movhi	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d079      	beq.n	8004b70 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d107      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x684>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	0e9b      	lsrs	r3, r3, #26
 8004a8e:	3301      	adds	r3, #1
 8004a90:	069b      	lsls	r3, r3, #26
 8004a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a96:	e015      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x6b0>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aa8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	e003      	b.n	8004abc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	069b      	lsls	r3, r3, #26
 8004ac0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x6d0>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	e017      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x700>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004afc:	2320      	movs	r3, #32
 8004afe:	e003      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	ea42 0103 	orr.w	r1, r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x726>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	0e9b      	lsrs	r3, r3, #26
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	051b      	lsls	r3, r3, #20
 8004b38:	e018      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x758>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e003      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	fab3 f383 	clz	r3, r3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f003 021f 	and.w	r2, r3, #31
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	e07e      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x778>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	3301      	adds	r3, #1
 8004b84:	069b      	lsls	r3, r3, #26
 8004b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b8a:	e015      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x7a4>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	fa93 f3a3 	rbit	r3, r3
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004ba4:	2320      	movs	r3, #32
 8004ba6:	e003      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	069b      	lsls	r3, r3, #26
 8004bb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x7c4>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	e017      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x7f4>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	fa93 f3a3 	rbit	r3, r3
 8004be4:	61bb      	str	r3, [r7, #24]
  return result;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	e003      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f303 	lsl.w	r3, r1, r3
 8004c08:	ea42 0103 	orr.w	r1, r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x820>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	0e9b      	lsrs	r3, r3, #26
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	3b1e      	subs	r3, #30
 8004c2c:	051b      	lsls	r3, r3, #20
 8004c2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c32:	e01b      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x858>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	60fb      	str	r3, [r7, #12]
  return result;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	e003      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f003 021f 	and.w	r2, r3, #31
 8004c5e:	4613      	mov	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4413      	add	r3, r2
 8004c64:	3b1e      	subs	r3, #30
 8004c66:	051b      	lsls	r3, r3, #20
 8004c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	4619      	mov	r1, r3
 8004c74:	f7ff f8d2 	bl	8003e1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f280 80d7 	bge.w	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a06      	ldr	r2, [pc, #24]	@ (8004ca0 <HAL_ADC_ConfigChannel+0x88c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_ADC_ConfigChannel+0x882>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a04      	ldr	r2, [pc, #16]	@ (8004ca4 <HAL_ADC_ConfigChannel+0x890>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10a      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x898>
 8004c96:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <HAL_ADC_ConfigChannel+0x894>)
 8004c98:	e009      	b.n	8004cae <HAL_ADC_ConfigChannel+0x89a>
 8004c9a:	bf00      	nop
 8004c9c:	47ff0000 	.word	0x47ff0000
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40022100 	.word	0x40022100
 8004ca8:	40022300 	.word	0x40022300
 8004cac:	4b65      	ldr	r3, [pc, #404]	@ (8004e44 <HAL_ADC_ConfigChannel+0xa30>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ff88 	bl	8003bc4 <LL_ADC_GetCommonPathInternalCh>
 8004cb4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a62      	ldr	r2, [pc, #392]	@ (8004e48 <HAL_ADC_ConfigChannel+0xa34>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_ADC_ConfigChannel+0x8b8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a61      	ldr	r2, [pc, #388]	@ (8004e4c <HAL_ADC_ConfigChannel+0xa38>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10e      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x8d6>
 8004ccc:	485e      	ldr	r0, [pc, #376]	@ (8004e48 <HAL_ADC_ConfigChannel+0xa34>)
 8004cce:	f7ff f95f 	bl	8003f90 <LL_ADC_IsEnabled>
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	485d      	ldr	r0, [pc, #372]	@ (8004e4c <HAL_ADC_ConfigChannel+0xa38>)
 8004cd6:	f7ff f95b 	bl	8003f90 <LL_ADC_IsEnabled>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4323      	orrs	r3, r4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e008      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x8e8>
 8004cea:	4859      	ldr	r0, [pc, #356]	@ (8004e50 <HAL_ADC_ConfigChannel+0xa3c>)
 8004cec:	f7ff f950 	bl	8003f90 <LL_ADC_IsEnabled>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2301      	moveq	r3, #1
 8004cf8:	2300      	movne	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8084 	beq.w	8004e0a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a53      	ldr	r2, [pc, #332]	@ (8004e54 <HAL_ADC_ConfigChannel+0xa40>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d132      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x95e>
 8004d0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d12c      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8004e50 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	f040 8086 	bne.w	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a47      	ldr	r2, [pc, #284]	@ (8004e48 <HAL_ADC_ConfigChannel+0xa34>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <HAL_ADC_ConfigChannel+0x924>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a46      	ldr	r2, [pc, #280]	@ (8004e4c <HAL_ADC_ConfigChannel+0xa38>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x928>
 8004d38:	4a47      	ldr	r2, [pc, #284]	@ (8004e58 <HAL_ADC_ConfigChannel+0xa44>)
 8004d3a:	e000      	b.n	8004d3e <HAL_ADC_ConfigChannel+0x92a>
 8004d3c:	4a41      	ldr	r2, [pc, #260]	@ (8004e44 <HAL_ADC_ConfigChannel+0xa30>)
 8004d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fe ff28 	bl	8003b9e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d4e:	4b43      	ldr	r3, [pc, #268]	@ (8004e5c <HAL_ADC_ConfigChannel+0xa48>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	099b      	lsrs	r3, r3, #6
 8004d54:	4a42      	ldr	r2, [pc, #264]	@ (8004e60 <HAL_ADC_ConfigChannel+0xa4c>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d62:	e002      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f9      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d70:	e05e      	b.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3b      	ldr	r2, [pc, #236]	@ (8004e64 <HAL_ADC_ConfigChannel+0xa50>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d120      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x9aa>
 8004d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11a      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a30      	ldr	r2, [pc, #192]	@ (8004e50 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d14e      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a2c      	ldr	r2, [pc, #176]	@ (8004e48 <HAL_ADC_ConfigChannel+0xa34>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_ADC_ConfigChannel+0x992>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e4c <HAL_ADC_ConfigChannel+0xa38>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x996>
 8004da6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e58 <HAL_ADC_ConfigChannel+0xa44>)
 8004da8:	e000      	b.n	8004dac <HAL_ADC_ConfigChannel+0x998>
 8004daa:	4a26      	ldr	r2, [pc, #152]	@ (8004e44 <HAL_ADC_ConfigChannel+0xa30>)
 8004dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7fe fef1 	bl	8003b9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dbc:	e038      	b.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a29      	ldr	r2, [pc, #164]	@ (8004e68 <HAL_ADC_ConfigChannel+0xa54>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d133      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
 8004dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d12d      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <HAL_ADC_ConfigChannel+0xa3c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d128      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <HAL_ADC_ConfigChannel+0xa34>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_ADC_ConfigChannel+0x9de>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a17      	ldr	r2, [pc, #92]	@ (8004e4c <HAL_ADC_ConfigChannel+0xa38>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x9e2>
 8004df2:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <HAL_ADC_ConfigChannel+0xa44>)
 8004df4:	e000      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x9e4>
 8004df6:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <HAL_ADC_ConfigChannel+0xa30>)
 8004df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7fe fecb 	bl	8003b9e <LL_ADC_SetCommonPathInternalCh>
 8004e08:	e012      	b.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004e1c:	e008      	b.n	8004e30 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e38:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	37e4      	adds	r7, #228	@ 0xe4
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd90      	pop	{r4, r7, pc}
 8004e44:	58026300 	.word	0x58026300
 8004e48:	40022000 	.word	0x40022000
 8004e4c:	40022100 	.word	0x40022100
 8004e50:	58026000 	.word	0x58026000
 8004e54:	c7520000 	.word	0xc7520000
 8004e58:	40022300 	.word	0x40022300
 8004e5c:	24000000 	.word	0x24000000
 8004e60:	053e2d63 	.word	0x053e2d63
 8004e64:	c3210000 	.word	0xc3210000
 8004e68:	cb840000 	.word	0xcb840000

08004e6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6b      	ldr	r2, [pc, #428]	@ (8005028 <ADC_ConfigureBoostMode+0x1bc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <ADC_ConfigureBoostMode+0x1c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6a      	ldr	r2, [pc, #424]	@ (800502c <ADC_ConfigureBoostMode+0x1c0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d109      	bne.n	8004e9c <ADC_ConfigureBoostMode+0x30>
 8004e88:	4b69      	ldr	r3, [pc, #420]	@ (8005030 <ADC_ConfigureBoostMode+0x1c4>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e008      	b.n	8004eae <ADC_ConfigureBoostMode+0x42>
 8004e9c:	4b65      	ldr	r3, [pc, #404]	@ (8005034 <ADC_ConfigureBoostMode+0x1c8>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01c      	beq.n	8004eec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004eb2:	f004 ff41 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8004eb6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ec0:	d010      	beq.n	8004ee4 <ADC_ConfigureBoostMode+0x78>
 8004ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ec6:	d871      	bhi.n	8004fac <ADC_ConfigureBoostMode+0x140>
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ecc:	d002      	beq.n	8004ed4 <ADC_ConfigureBoostMode+0x68>
 8004ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ed2:	d16b      	bne.n	8004fac <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
        break;
 8004ee2:	e066      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	60fb      	str	r3, [r7, #12]
        break;
 8004eea:	e062      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004eec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004ef0:	f005 fe78 	bl	800abe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ef4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004efe:	d051      	beq.n	8004fa4 <ADC_ConfigureBoostMode+0x138>
 8004f00:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f04:	d854      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f06:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f0a:	d047      	beq.n	8004f9c <ADC_ConfigureBoostMode+0x130>
 8004f0c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f10:	d84e      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f12:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f16:	d03d      	beq.n	8004f94 <ADC_ConfigureBoostMode+0x128>
 8004f18:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f1c:	d848      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f22:	d033      	beq.n	8004f8c <ADC_ConfigureBoostMode+0x120>
 8004f24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f28:	d842      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f2a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004f2e:	d029      	beq.n	8004f84 <ADC_ConfigureBoostMode+0x118>
 8004f30:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004f34:	d83c      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f36:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f3a:	d01a      	beq.n	8004f72 <ADC_ConfigureBoostMode+0x106>
 8004f3c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f40:	d836      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f42:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f46:	d014      	beq.n	8004f72 <ADC_ConfigureBoostMode+0x106>
 8004f48:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f4c:	d830      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f52:	d00e      	beq.n	8004f72 <ADC_ConfigureBoostMode+0x106>
 8004f54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f58:	d82a      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f5e:	d008      	beq.n	8004f72 <ADC_ConfigureBoostMode+0x106>
 8004f60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f64:	d824      	bhi.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
 8004f66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f6a:	d002      	beq.n	8004f72 <ADC_ConfigureBoostMode+0x106>
 8004f6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f70:	d11e      	bne.n	8004fb0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	0c9b      	lsrs	r3, r3, #18
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	60fb      	str	r3, [r7, #12]
        break;
 8004f82:	e016      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	60fb      	str	r3, [r7, #12]
        break;
 8004f8a:	e012      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	60fb      	str	r3, [r7, #12]
        break;
 8004f92:	e00e      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	60fb      	str	r3, [r7, #12]
        break;
 8004f9a:	e00a      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	09db      	lsrs	r3, r3, #7
 8004fa0:	60fb      	str	r3, [r7, #12]
        break;
 8004fa2:	e006      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	60fb      	str	r3, [r7, #12]
        break;
 8004faa:	e002      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
        break;
 8004fac:	bf00      	nop
 8004fae:	e000      	b.n	8004fb2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004fb0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a1f      	ldr	r2, [pc, #124]	@ (8005038 <ADC_ConfigureBoostMode+0x1cc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d808      	bhi.n	8004fd2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004fce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004fd0:	e025      	b.n	800501e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	@ (800503c <ADC_ConfigureBoostMode+0x1d0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d80a      	bhi.n	8004ff0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fec:	609a      	str	r2, [r3, #8]
}
 8004fee:	e016      	b.n	800501e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a13      	ldr	r2, [pc, #76]	@ (8005040 <ADC_ConfigureBoostMode+0x1d4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d80a      	bhi.n	800500e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	e007      	b.n	800501e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800501c:	609a      	str	r2, [r3, #8]
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000
 800502c:	40022100 	.word	0x40022100
 8005030:	40022300 	.word	0x40022300
 8005034:	58026300 	.word	0x58026300
 8005038:	005f5e10 	.word	0x005f5e10
 800503c:	00bebc20 	.word	0x00bebc20
 8005040:	017d7840 	.word	0x017d7840

08005044 <LL_ADC_IsEnabled>:
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <LL_ADC_IsEnabled+0x18>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <LL_ADC_IsEnabled+0x1a>
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <LL_ADC_REG_IsConversionOngoing>:
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d101      	bne.n	8005082 <LL_ADC_REG_IsConversionOngoing+0x18>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b0a3      	sub	sp, #140	@ 0x8c
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e0c1      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80050b6:	2300      	movs	r3, #0
 80050b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a5e      	ldr	r2, [pc, #376]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d102      	bne.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e001      	b.n	80050d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0a0      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ffb9 	bl	800506a <LL_ADC_REG_IsConversionOngoing>
 80050f8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff ffb2 	bl	800506a <LL_ADC_REG_IsConversionOngoing>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 8081 	bne.w	8005210 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800510e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d17c      	bne.n	8005210 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a48      	ldr	r2, [pc, #288]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d004      	beq.n	800512a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a46      	ldr	r2, [pc, #280]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800512a:	4b46      	ldr	r3, [pc, #280]	@ (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800512c:	e000      	b.n	8005130 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800512e:	4b46      	ldr	r3, [pc, #280]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005130:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d039      	beq.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800513a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	431a      	orrs	r2, r3
 8005148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800514a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3a      	ldr	r2, [pc, #232]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a39      	ldr	r2, [pc, #228]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10e      	bne.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005160:	4836      	ldr	r0, [pc, #216]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005162:	f7ff ff6f 	bl	8005044 <LL_ADC_IsEnabled>
 8005166:	4604      	mov	r4, r0
 8005168:	4835      	ldr	r0, [pc, #212]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800516a:	f7ff ff6b 	bl	8005044 <LL_ADC_IsEnabled>
 800516e:	4603      	mov	r3, r0
 8005170:	4323      	orrs	r3, r4
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e008      	b.n	8005190 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800517e:	4833      	ldr	r0, [pc, #204]	@ (800524c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005180:	f7ff ff60 	bl	8005044 <LL_ADC_IsEnabled>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d047      	beq.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	4b2d      	ldr	r3, [pc, #180]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800519a:	4013      	ands	r3, r2
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	6811      	ldr	r1, [r2, #0]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	6892      	ldr	r2, [r2, #8]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	431a      	orrs	r2, r3
 80051a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ac:	e03a      	b.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10e      	bne.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80051ce:	481b      	ldr	r0, [pc, #108]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051d0:	f7ff ff38 	bl	8005044 <LL_ADC_IsEnabled>
 80051d4:	4604      	mov	r4, r0
 80051d6:	481a      	ldr	r0, [pc, #104]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051d8:	f7ff ff34 	bl	8005044 <LL_ADC_IsEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	4323      	orrs	r3, r4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e008      	b.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80051ec:	4817      	ldr	r0, [pc, #92]	@ (800524c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80051ee:	f7ff ff29 	bl	8005044 <LL_ADC_IsEnabled>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d010      	beq.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005202:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005208:	4013      	ands	r3, r2
 800520a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800520c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800520e:	e009      	b.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005222:	e000      	b.n	8005226 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005224:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800522e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005232:	4618      	mov	r0, r3
 8005234:	378c      	adds	r7, #140	@ 0x8c
 8005236:	46bd      	mov	sp, r7
 8005238:	bd90      	pop	{r4, r7, pc}
 800523a:	bf00      	nop
 800523c:	40022000 	.word	0x40022000
 8005240:	40022100 	.word	0x40022100
 8005244:	40022300 	.word	0x40022300
 8005248:	58026300 	.word	0x58026300
 800524c:	58026000 	.word	0x58026000
 8005250:	fffff0e0 	.word	0xfffff0e0

08005254 <__NVIC_SetPriorityGrouping>:
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005264:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <__NVIC_SetPriorityGrouping+0x40>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005270:	4013      	ands	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <__NVIC_SetPriorityGrouping+0x44>)
 800527e:	4313      	orrs	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005282:	4a04      	ldr	r2, [pc, #16]	@ (8005294 <__NVIC_SetPriorityGrouping+0x40>)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	60d3      	str	r3, [r2, #12]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	e000ed00 	.word	0xe000ed00
 8005298:	05fa0000 	.word	0x05fa0000

0800529c <__NVIC_GetPriorityGrouping>:
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a0:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <__NVIC_GetPriorityGrouping+0x18>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	0a1b      	lsrs	r3, r3, #8
 80052a6:	f003 0307 	and.w	r3, r3, #7
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	e000ed00 	.word	0xe000ed00

080052b8 <__NVIC_EnableIRQ>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	db0b      	blt.n	80052e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	f003 021f 	and.w	r2, r3, #31
 80052d0:	4907      	ldr	r1, [pc, #28]	@ (80052f0 <__NVIC_EnableIRQ+0x38>)
 80052d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	2001      	movs	r0, #1
 80052da:	fa00 f202 	lsl.w	r2, r0, r2
 80052de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000e100 	.word	0xe000e100

080052f4 <__NVIC_SetPriority>:
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	6039      	str	r1, [r7, #0]
 80052fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	db0a      	blt.n	800531e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	490c      	ldr	r1, [pc, #48]	@ (8005340 <__NVIC_SetPriority+0x4c>)
 800530e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005312:	0112      	lsls	r2, r2, #4
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	440b      	add	r3, r1
 8005318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800531c:	e00a      	b.n	8005334 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	b2da      	uxtb	r2, r3
 8005322:	4908      	ldr	r1, [pc, #32]	@ (8005344 <__NVIC_SetPriority+0x50>)
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	3b04      	subs	r3, #4
 800532c:	0112      	lsls	r2, r2, #4
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	440b      	add	r3, r1
 8005332:	761a      	strb	r2, [r3, #24]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	e000e100 	.word	0xe000e100
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <NVIC_EncodePriority>:
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	@ 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f1c3 0307 	rsb	r3, r3, #7
 8005362:	2b04      	cmp	r3, #4
 8005364:	bf28      	it	cs
 8005366:	2304      	movcs	r3, #4
 8005368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3304      	adds	r3, #4
 800536e:	2b06      	cmp	r3, #6
 8005370:	d902      	bls.n	8005378 <NVIC_EncodePriority+0x30>
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3b03      	subs	r3, #3
 8005376:	e000      	b.n	800537a <NVIC_EncodePriority+0x32>
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43da      	mvns	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	401a      	ands	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005390:	f04f 31ff 	mov.w	r1, #4294967295
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	fa01 f303 	lsl.w	r3, r1, r3
 800539a:	43d9      	mvns	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a0:	4313      	orrs	r3, r2
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	@ 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053c0:	d301      	bcc.n	80053c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053c2:	2301      	movs	r3, #1
 80053c4:	e00f      	b.n	80053e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053c6:	4a0a      	ldr	r2, [pc, #40]	@ (80053f0 <SysTick_Config+0x40>)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ce:	210f      	movs	r1, #15
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	f7ff ff8e 	bl	80052f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <SysTick_Config+0x40>)
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053de:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <SysTick_Config+0x40>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010

080053f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff ff29 	bl	8005254 <__NVIC_SetPriorityGrouping>
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	4603      	mov	r3, r0
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005418:	f7ff ff40 	bl	800529c <__NVIC_GetPriorityGrouping>
 800541c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	6978      	ldr	r0, [r7, #20]
 8005424:	f7ff ff90 	bl	8005348 <NVIC_EncodePriority>
 8005428:	4602      	mov	r2, r0
 800542a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff5f 	bl	80052f4 <__NVIC_SetPriority>
}
 8005436:	bf00      	nop
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	4603      	mov	r3, r0
 8005446:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ff33 	bl	80052b8 <__NVIC_EnableIRQ>
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff ffa4 	bl	80053b0 <SysTick_Config>
 8005468:	4603      	mov	r3, r0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800547c:	f7fe fb38 	bl	8003af0 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e312      	b.n	8005ab2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a66      	ldr	r2, [pc, #408]	@ (800562c <HAL_DMA_Init+0x1b8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d04a      	beq.n	800552c <HAL_DMA_Init+0xb8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a65      	ldr	r2, [pc, #404]	@ (8005630 <HAL_DMA_Init+0x1bc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d045      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a63      	ldr	r2, [pc, #396]	@ (8005634 <HAL_DMA_Init+0x1c0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d040      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a62      	ldr	r2, [pc, #392]	@ (8005638 <HAL_DMA_Init+0x1c4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d03b      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a60      	ldr	r2, [pc, #384]	@ (800563c <HAL_DMA_Init+0x1c8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d036      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5f      	ldr	r2, [pc, #380]	@ (8005640 <HAL_DMA_Init+0x1cc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d031      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005644 <HAL_DMA_Init+0x1d0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d02c      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5c      	ldr	r2, [pc, #368]	@ (8005648 <HAL_DMA_Init+0x1d4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d027      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5a      	ldr	r2, [pc, #360]	@ (800564c <HAL_DMA_Init+0x1d8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a59      	ldr	r2, [pc, #356]	@ (8005650 <HAL_DMA_Init+0x1dc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d01d      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a57      	ldr	r2, [pc, #348]	@ (8005654 <HAL_DMA_Init+0x1e0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_DMA_Init+0xb8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a56      	ldr	r2, [pc, #344]	@ (8005658 <HAL_DMA_Init+0x1e4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_DMA_Init+0xb8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a54      	ldr	r2, [pc, #336]	@ (800565c <HAL_DMA_Init+0x1e8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_DMA_Init+0xb8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a53      	ldr	r2, [pc, #332]	@ (8005660 <HAL_DMA_Init+0x1ec>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_DMA_Init+0xb8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a51      	ldr	r2, [pc, #324]	@ (8005664 <HAL_DMA_Init+0x1f0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_DMA_Init+0xb8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a50      	ldr	r2, [pc, #320]	@ (8005668 <HAL_DMA_Init+0x1f4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d101      	bne.n	8005530 <HAL_DMA_Init+0xbc>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_DMA_Init+0xbe>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 813c 	beq.w	80057b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a37      	ldr	r2, [pc, #220]	@ (800562c <HAL_DMA_Init+0x1b8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d04a      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a36      	ldr	r2, [pc, #216]	@ (8005630 <HAL_DMA_Init+0x1bc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d045      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a34      	ldr	r2, [pc, #208]	@ (8005634 <HAL_DMA_Init+0x1c0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d040      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a33      	ldr	r2, [pc, #204]	@ (8005638 <HAL_DMA_Init+0x1c4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03b      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a31      	ldr	r2, [pc, #196]	@ (800563c <HAL_DMA_Init+0x1c8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d036      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a30      	ldr	r2, [pc, #192]	@ (8005640 <HAL_DMA_Init+0x1cc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d031      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2e      	ldr	r2, [pc, #184]	@ (8005644 <HAL_DMA_Init+0x1d0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02c      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2d      	ldr	r2, [pc, #180]	@ (8005648 <HAL_DMA_Init+0x1d4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d027      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2b      	ldr	r2, [pc, #172]	@ (800564c <HAL_DMA_Init+0x1d8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005650 <HAL_DMA_Init+0x1dc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a28      	ldr	r2, [pc, #160]	@ (8005654 <HAL_DMA_Init+0x1e0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a27      	ldr	r2, [pc, #156]	@ (8005658 <HAL_DMA_Init+0x1e4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a25      	ldr	r2, [pc, #148]	@ (800565c <HAL_DMA_Init+0x1e8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a24      	ldr	r2, [pc, #144]	@ (8005660 <HAL_DMA_Init+0x1ec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a22      	ldr	r2, [pc, #136]	@ (8005664 <HAL_DMA_Init+0x1f0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_Init+0x174>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a21      	ldr	r2, [pc, #132]	@ (8005668 <HAL_DMA_Init+0x1f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <HAL_DMA_Init+0x186>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e007      	b.n	800560a <HAL_DMA_Init+0x196>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800560a:	e02f      	b.n	800566c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800560c:	f7fe fa70 	bl	8003af0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b05      	cmp	r3, #5
 8005618:	d928      	bls.n	800566c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2203      	movs	r2, #3
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e242      	b.n	8005ab2 <HAL_DMA_Init+0x63e>
 800562c:	40020010 	.word	0x40020010
 8005630:	40020028 	.word	0x40020028
 8005634:	40020040 	.word	0x40020040
 8005638:	40020058 	.word	0x40020058
 800563c:	40020070 	.word	0x40020070
 8005640:	40020088 	.word	0x40020088
 8005644:	400200a0 	.word	0x400200a0
 8005648:	400200b8 	.word	0x400200b8
 800564c:	40020410 	.word	0x40020410
 8005650:	40020428 	.word	0x40020428
 8005654:	40020440 	.word	0x40020440
 8005658:	40020458 	.word	0x40020458
 800565c:	40020470 	.word	0x40020470
 8005660:	40020488 	.word	0x40020488
 8005664:	400204a0 	.word	0x400204a0
 8005668:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1c8      	bne.n	800560c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4b83      	ldr	r3, [pc, #524]	@ (8005894 <HAL_DMA_Init+0x420>)
 8005686:	4013      	ands	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005692:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800569e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d107      	bne.n	80056d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	4313      	orrs	r3, r2
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b28      	cmp	r3, #40	@ 0x28
 80056d6:	d903      	bls.n	80056e0 <HAL_DMA_Init+0x26c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80056de:	d91f      	bls.n	8005720 <HAL_DMA_Init+0x2ac>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80056e6:	d903      	bls.n	80056f0 <HAL_DMA_Init+0x27c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b42      	cmp	r3, #66	@ 0x42
 80056ee:	d917      	bls.n	8005720 <HAL_DMA_Init+0x2ac>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b46      	cmp	r3, #70	@ 0x46
 80056f6:	d903      	bls.n	8005700 <HAL_DMA_Init+0x28c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b48      	cmp	r3, #72	@ 0x48
 80056fe:	d90f      	bls.n	8005720 <HAL_DMA_Init+0x2ac>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b4e      	cmp	r3, #78	@ 0x4e
 8005706:	d903      	bls.n	8005710 <HAL_DMA_Init+0x29c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b52      	cmp	r3, #82	@ 0x52
 800570e:	d907      	bls.n	8005720 <HAL_DMA_Init+0x2ac>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b73      	cmp	r3, #115	@ 0x73
 8005716:	d905      	bls.n	8005724 <HAL_DMA_Init+0x2b0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b77      	cmp	r3, #119	@ 0x77
 800571e:	d801      	bhi.n	8005724 <HAL_DMA_Init+0x2b0>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <HAL_DMA_Init+0x2b2>
 8005724:	2300      	movs	r3, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005730:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0307 	bic.w	r3, r3, #7
 8005748:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	2b04      	cmp	r3, #4
 800575a:	d117      	bne.n	800578c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00e      	beq.n	800578c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f002 fb3a 	bl	8007de8 <DMA_CheckFifoParam>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2240      	movs	r2, #64	@ 0x40
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e192      	b.n	8005ab2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f002 fa75 	bl	8007c84 <DMA_CalcBaseAndBitshift>
 800579a:	4603      	mov	r3, r0
 800579c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	223f      	movs	r2, #63	@ 0x3f
 80057a8:	409a      	lsls	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	e0c8      	b.n	8005942 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a38      	ldr	r2, [pc, #224]	@ (8005898 <HAL_DMA_Init+0x424>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d022      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a37      	ldr	r2, [pc, #220]	@ (800589c <HAL_DMA_Init+0x428>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01d      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <HAL_DMA_Init+0x42c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d018      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a34      	ldr	r2, [pc, #208]	@ (80058a4 <HAL_DMA_Init+0x430>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a32      	ldr	r2, [pc, #200]	@ (80058a8 <HAL_DMA_Init+0x434>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00e      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a31      	ldr	r2, [pc, #196]	@ (80058ac <HAL_DMA_Init+0x438>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <HAL_DMA_Init+0x43c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_DMA_Init+0x38c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2e      	ldr	r2, [pc, #184]	@ (80058b4 <HAL_DMA_Init+0x440>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_DMA_Init+0x390>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_DMA_Init+0x392>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8092 	beq.w	8005930 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a21      	ldr	r2, [pc, #132]	@ (8005898 <HAL_DMA_Init+0x424>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d021      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a20      	ldr	r2, [pc, #128]	@ (800589c <HAL_DMA_Init+0x428>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d01c      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1e      	ldr	r2, [pc, #120]	@ (80058a0 <HAL_DMA_Init+0x42c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d017      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <HAL_DMA_Init+0x430>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d012      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1b      	ldr	r2, [pc, #108]	@ (80058a8 <HAL_DMA_Init+0x434>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00d      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1a      	ldr	r2, [pc, #104]	@ (80058ac <HAL_DMA_Init+0x438>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d008      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a18      	ldr	r2, [pc, #96]	@ (80058b0 <HAL_DMA_Init+0x43c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <HAL_DMA_Init+0x3e6>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a17      	ldr	r2, [pc, #92]	@ (80058b4 <HAL_DMA_Init+0x440>)
 8005858:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <HAL_DMA_Init+0x444>)
 8005876:	4013      	ands	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b40      	cmp	r3, #64	@ 0x40
 8005880:	d01c      	beq.n	80058bc <HAL_DMA_Init+0x448>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b80      	cmp	r3, #128	@ 0x80
 8005888:	d102      	bne.n	8005890 <HAL_DMA_Init+0x41c>
 800588a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800588e:	e016      	b.n	80058be <HAL_DMA_Init+0x44a>
 8005890:	2300      	movs	r3, #0
 8005892:	e014      	b.n	80058be <HAL_DMA_Init+0x44a>
 8005894:	fe10803f 	.word	0xfe10803f
 8005898:	58025408 	.word	0x58025408
 800589c:	5802541c 	.word	0x5802541c
 80058a0:	58025430 	.word	0x58025430
 80058a4:	58025444 	.word	0x58025444
 80058a8:	58025458 	.word	0x58025458
 80058ac:	5802546c 	.word	0x5802546c
 80058b0:	58025480 	.word	0x58025480
 80058b4:	58025494 	.word	0x58025494
 80058b8:	fffe000f 	.word	0xfffe000f
 80058bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68d2      	ldr	r2, [r2, #12]
 80058c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	4b6e      	ldr	r3, [pc, #440]	@ (8005abc <HAL_DMA_Init+0x648>)
 8005904:	4413      	add	r3, r2
 8005906:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac0 <HAL_DMA_Init+0x64c>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	009a      	lsls	r2, r3, #2
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f002 f9b5 	bl	8007c84 <DMA_CalcBaseAndBitshift>
 800591a:	4603      	mov	r3, r0
 800591c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2201      	movs	r2, #1
 8005928:	409a      	lsls	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	e008      	b.n	8005942 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2240      	movs	r2, #64	@ 0x40
 8005934:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2203      	movs	r2, #3
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0b7      	b.n	8005ab2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a5f      	ldr	r2, [pc, #380]	@ (8005ac4 <HAL_DMA_Init+0x650>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d072      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a5d      	ldr	r2, [pc, #372]	@ (8005ac8 <HAL_DMA_Init+0x654>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d06d      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5c      	ldr	r2, [pc, #368]	@ (8005acc <HAL_DMA_Init+0x658>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d068      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5a      	ldr	r2, [pc, #360]	@ (8005ad0 <HAL_DMA_Init+0x65c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d063      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a59      	ldr	r2, [pc, #356]	@ (8005ad4 <HAL_DMA_Init+0x660>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d05e      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a57      	ldr	r2, [pc, #348]	@ (8005ad8 <HAL_DMA_Init+0x664>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d059      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a56      	ldr	r2, [pc, #344]	@ (8005adc <HAL_DMA_Init+0x668>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d054      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a54      	ldr	r2, [pc, #336]	@ (8005ae0 <HAL_DMA_Init+0x66c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d04f      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a53      	ldr	r2, [pc, #332]	@ (8005ae4 <HAL_DMA_Init+0x670>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d04a      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a51      	ldr	r2, [pc, #324]	@ (8005ae8 <HAL_DMA_Init+0x674>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d045      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a50      	ldr	r2, [pc, #320]	@ (8005aec <HAL_DMA_Init+0x678>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d040      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a4e      	ldr	r2, [pc, #312]	@ (8005af0 <HAL_DMA_Init+0x67c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d03b      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a4d      	ldr	r2, [pc, #308]	@ (8005af4 <HAL_DMA_Init+0x680>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d036      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a4b      	ldr	r2, [pc, #300]	@ (8005af8 <HAL_DMA_Init+0x684>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d031      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4a      	ldr	r2, [pc, #296]	@ (8005afc <HAL_DMA_Init+0x688>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d02c      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a48      	ldr	r2, [pc, #288]	@ (8005b00 <HAL_DMA_Init+0x68c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d027      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a47      	ldr	r2, [pc, #284]	@ (8005b04 <HAL_DMA_Init+0x690>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a45      	ldr	r2, [pc, #276]	@ (8005b08 <HAL_DMA_Init+0x694>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01d      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a44      	ldr	r2, [pc, #272]	@ (8005b0c <HAL_DMA_Init+0x698>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a42      	ldr	r2, [pc, #264]	@ (8005b10 <HAL_DMA_Init+0x69c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a41      	ldr	r2, [pc, #260]	@ (8005b14 <HAL_DMA_Init+0x6a0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3f      	ldr	r2, [pc, #252]	@ (8005b18 <HAL_DMA_Init+0x6a4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3e      	ldr	r2, [pc, #248]	@ (8005b1c <HAL_DMA_Init+0x6a8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_DMA_Init+0x5be>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b20 <HAL_DMA_Init+0x6ac>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Init+0x5c2>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_DMA_Init+0x5c4>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d032      	beq.n	8005aa2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f002 fa4f 	bl	8007ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b80      	cmp	r3, #128	@ 0x80
 8005a48:	d102      	bne.n	8005a50 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <HAL_DMA_Init+0x61c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d80c      	bhi.n	8005a90 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 facc 	bl	8008014 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	e008      	b.n	8005aa2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	a7fdabf8 	.word	0xa7fdabf8
 8005ac0:	cccccccd 	.word	0xcccccccd
 8005ac4:	40020010 	.word	0x40020010
 8005ac8:	40020028 	.word	0x40020028
 8005acc:	40020040 	.word	0x40020040
 8005ad0:	40020058 	.word	0x40020058
 8005ad4:	40020070 	.word	0x40020070
 8005ad8:	40020088 	.word	0x40020088
 8005adc:	400200a0 	.word	0x400200a0
 8005ae0:	400200b8 	.word	0x400200b8
 8005ae4:	40020410 	.word	0x40020410
 8005ae8:	40020428 	.word	0x40020428
 8005aec:	40020440 	.word	0x40020440
 8005af0:	40020458 	.word	0x40020458
 8005af4:	40020470 	.word	0x40020470
 8005af8:	40020488 	.word	0x40020488
 8005afc:	400204a0 	.word	0x400204a0
 8005b00:	400204b8 	.word	0x400204b8
 8005b04:	58025408 	.word	0x58025408
 8005b08:	5802541c 	.word	0x5802541c
 8005b0c:	58025430 	.word	0x58025430
 8005b10:	58025444 	.word	0x58025444
 8005b14:	58025458 	.word	0x58025458
 8005b18:	5802546c 	.word	0x5802546c
 8005b1c:	58025480 	.word	0x58025480
 8005b20:	58025494 	.word	0x58025494

08005b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e226      	b.n	8005f8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_DMA_Start_IT+0x2a>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e21f      	b.n	8005f8e <HAL_DMA_Start_IT+0x46a>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f040 820a 	bne.w	8005f78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a68      	ldr	r2, [pc, #416]	@ (8005d18 <HAL_DMA_Start_IT+0x1f4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d04a      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a66      	ldr	r2, [pc, #408]	@ (8005d1c <HAL_DMA_Start_IT+0x1f8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d045      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a65      	ldr	r2, [pc, #404]	@ (8005d20 <HAL_DMA_Start_IT+0x1fc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d040      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a63      	ldr	r2, [pc, #396]	@ (8005d24 <HAL_DMA_Start_IT+0x200>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d03b      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a62      	ldr	r2, [pc, #392]	@ (8005d28 <HAL_DMA_Start_IT+0x204>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d036      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a60      	ldr	r2, [pc, #384]	@ (8005d2c <HAL_DMA_Start_IT+0x208>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d031      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5f      	ldr	r2, [pc, #380]	@ (8005d30 <HAL_DMA_Start_IT+0x20c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d02c      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8005d34 <HAL_DMA_Start_IT+0x210>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d027      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8005d38 <HAL_DMA_Start_IT+0x214>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d022      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8005d3c <HAL_DMA_Start_IT+0x218>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a59      	ldr	r2, [pc, #356]	@ (8005d40 <HAL_DMA_Start_IT+0x21c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d018      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a57      	ldr	r2, [pc, #348]	@ (8005d44 <HAL_DMA_Start_IT+0x220>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a56      	ldr	r2, [pc, #344]	@ (8005d48 <HAL_DMA_Start_IT+0x224>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a54      	ldr	r2, [pc, #336]	@ (8005d4c <HAL_DMA_Start_IT+0x228>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a53      	ldr	r2, [pc, #332]	@ (8005d50 <HAL_DMA_Start_IT+0x22c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_DMA_Start_IT+0xee>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a51      	ldr	r2, [pc, #324]	@ (8005d54 <HAL_DMA_Start_IT+0x230>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d108      	bne.n	8005c24 <HAL_DMA_Start_IT+0x100>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e007      	b.n	8005c34 <HAL_DMA_Start_IT+0x110>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f001 fe76 	bl	800792c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a34      	ldr	r2, [pc, #208]	@ (8005d18 <HAL_DMA_Start_IT+0x1f4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d04a      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <HAL_DMA_Start_IT+0x1f8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d045      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a31      	ldr	r2, [pc, #196]	@ (8005d20 <HAL_DMA_Start_IT+0x1fc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d040      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a30      	ldr	r2, [pc, #192]	@ (8005d24 <HAL_DMA_Start_IT+0x200>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d03b      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d28 <HAL_DMA_Start_IT+0x204>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d036      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <HAL_DMA_Start_IT+0x208>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d031      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <HAL_DMA_Start_IT+0x20c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d02c      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d34 <HAL_DMA_Start_IT+0x210>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d027      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a28      	ldr	r2, [pc, #160]	@ (8005d38 <HAL_DMA_Start_IT+0x214>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a27      	ldr	r2, [pc, #156]	@ (8005d3c <HAL_DMA_Start_IT+0x218>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a25      	ldr	r2, [pc, #148]	@ (8005d40 <HAL_DMA_Start_IT+0x21c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a24      	ldr	r2, [pc, #144]	@ (8005d44 <HAL_DMA_Start_IT+0x220>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <HAL_DMA_Start_IT+0x224>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a21      	ldr	r2, [pc, #132]	@ (8005d4c <HAL_DMA_Start_IT+0x228>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_DMA_Start_IT+0x22c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x1bc>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <HAL_DMA_Start_IT+0x230>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d101      	bne.n	8005ce4 <HAL_DMA_Start_IT+0x1c0>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <HAL_DMA_Start_IT+0x1c2>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 021e 	bic.w	r2, r3, #30
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0216 	orr.w	r2, r2, #22
 8005cfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d03e      	beq.n	8005d84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0208 	orr.w	r2, r2, #8
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e035      	b.n	8005d84 <HAL_DMA_Start_IT+0x260>
 8005d18:	40020010 	.word	0x40020010
 8005d1c:	40020028 	.word	0x40020028
 8005d20:	40020040 	.word	0x40020040
 8005d24:	40020058 	.word	0x40020058
 8005d28:	40020070 	.word	0x40020070
 8005d2c:	40020088 	.word	0x40020088
 8005d30:	400200a0 	.word	0x400200a0
 8005d34:	400200b8 	.word	0x400200b8
 8005d38:	40020410 	.word	0x40020410
 8005d3c:	40020428 	.word	0x40020428
 8005d40:	40020440 	.word	0x40020440
 8005d44:	40020458 	.word	0x40020458
 8005d48:	40020470 	.word	0x40020470
 8005d4c:	40020488 	.word	0x40020488
 8005d50:	400204a0 	.word	0x400204a0
 8005d54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 020e 	bic.w	r2, r3, #14
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 020a 	orr.w	r2, r2, #10
 8005d6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0204 	orr.w	r2, r2, #4
 8005d82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a83      	ldr	r2, [pc, #524]	@ (8005f98 <HAL_DMA_Start_IT+0x474>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d072      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a82      	ldr	r2, [pc, #520]	@ (8005f9c <HAL_DMA_Start_IT+0x478>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d06d      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a80      	ldr	r2, [pc, #512]	@ (8005fa0 <HAL_DMA_Start_IT+0x47c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d068      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a7f      	ldr	r2, [pc, #508]	@ (8005fa4 <HAL_DMA_Start_IT+0x480>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d063      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a7d      	ldr	r2, [pc, #500]	@ (8005fa8 <HAL_DMA_Start_IT+0x484>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d05e      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a7c      	ldr	r2, [pc, #496]	@ (8005fac <HAL_DMA_Start_IT+0x488>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d059      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fb0 <HAL_DMA_Start_IT+0x48c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d054      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a79      	ldr	r2, [pc, #484]	@ (8005fb4 <HAL_DMA_Start_IT+0x490>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d04f      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a77      	ldr	r2, [pc, #476]	@ (8005fb8 <HAL_DMA_Start_IT+0x494>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d04a      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a76      	ldr	r2, [pc, #472]	@ (8005fbc <HAL_DMA_Start_IT+0x498>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d045      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a74      	ldr	r2, [pc, #464]	@ (8005fc0 <HAL_DMA_Start_IT+0x49c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d040      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a73      	ldr	r2, [pc, #460]	@ (8005fc4 <HAL_DMA_Start_IT+0x4a0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d03b      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a71      	ldr	r2, [pc, #452]	@ (8005fc8 <HAL_DMA_Start_IT+0x4a4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d036      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a70      	ldr	r2, [pc, #448]	@ (8005fcc <HAL_DMA_Start_IT+0x4a8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d031      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a6e      	ldr	r2, [pc, #440]	@ (8005fd0 <HAL_DMA_Start_IT+0x4ac>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02c      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6d      	ldr	r2, [pc, #436]	@ (8005fd4 <HAL_DMA_Start_IT+0x4b0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d027      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a6b      	ldr	r2, [pc, #428]	@ (8005fd8 <HAL_DMA_Start_IT+0x4b4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d022      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a6a      	ldr	r2, [pc, #424]	@ (8005fdc <HAL_DMA_Start_IT+0x4b8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d01d      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a68      	ldr	r2, [pc, #416]	@ (8005fe0 <HAL_DMA_Start_IT+0x4bc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a67      	ldr	r2, [pc, #412]	@ (8005fe4 <HAL_DMA_Start_IT+0x4c0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a65      	ldr	r2, [pc, #404]	@ (8005fe8 <HAL_DMA_Start_IT+0x4c4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a64      	ldr	r2, [pc, #400]	@ (8005fec <HAL_DMA_Start_IT+0x4c8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a62      	ldr	r2, [pc, #392]	@ (8005ff0 <HAL_DMA_Start_IT+0x4cc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_DMA_Start_IT+0x350>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a61      	ldr	r2, [pc, #388]	@ (8005ff4 <HAL_DMA_Start_IT+0x4d0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d101      	bne.n	8005e78 <HAL_DMA_Start_IT+0x354>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_DMA_Start_IT+0x356>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01a      	beq.n	8005eb4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eb2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a37      	ldr	r2, [pc, #220]	@ (8005f98 <HAL_DMA_Start_IT+0x474>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04a      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a36      	ldr	r2, [pc, #216]	@ (8005f9c <HAL_DMA_Start_IT+0x478>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d045      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a34      	ldr	r2, [pc, #208]	@ (8005fa0 <HAL_DMA_Start_IT+0x47c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d040      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a33      	ldr	r2, [pc, #204]	@ (8005fa4 <HAL_DMA_Start_IT+0x480>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d03b      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a31      	ldr	r2, [pc, #196]	@ (8005fa8 <HAL_DMA_Start_IT+0x484>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d036      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a30      	ldr	r2, [pc, #192]	@ (8005fac <HAL_DMA_Start_IT+0x488>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d031      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb0 <HAL_DMA_Start_IT+0x48c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02c      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb4 <HAL_DMA_Start_IT+0x490>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d027      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb8 <HAL_DMA_Start_IT+0x494>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2a      	ldr	r2, [pc, #168]	@ (8005fbc <HAL_DMA_Start_IT+0x498>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d01d      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a28      	ldr	r2, [pc, #160]	@ (8005fc0 <HAL_DMA_Start_IT+0x49c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a27      	ldr	r2, [pc, #156]	@ (8005fc4 <HAL_DMA_Start_IT+0x4a0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a25      	ldr	r2, [pc, #148]	@ (8005fc8 <HAL_DMA_Start_IT+0x4a4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a24      	ldr	r2, [pc, #144]	@ (8005fcc <HAL_DMA_Start_IT+0x4a8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <HAL_DMA_Start_IT+0x4ac>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_DMA_Start_IT+0x430>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a21      	ldr	r2, [pc, #132]	@ (8005fd4 <HAL_DMA_Start_IT+0x4b0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <HAL_DMA_Start_IT+0x442>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e012      	b.n	8005f8c <HAL_DMA_Start_IT+0x468>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e009      	b.n	8005f8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40020010 	.word	0x40020010
 8005f9c:	40020028 	.word	0x40020028
 8005fa0:	40020040 	.word	0x40020040
 8005fa4:	40020058 	.word	0x40020058
 8005fa8:	40020070 	.word	0x40020070
 8005fac:	40020088 	.word	0x40020088
 8005fb0:	400200a0 	.word	0x400200a0
 8005fb4:	400200b8 	.word	0x400200b8
 8005fb8:	40020410 	.word	0x40020410
 8005fbc:	40020428 	.word	0x40020428
 8005fc0:	40020440 	.word	0x40020440
 8005fc4:	40020458 	.word	0x40020458
 8005fc8:	40020470 	.word	0x40020470
 8005fcc:	40020488 	.word	0x40020488
 8005fd0:	400204a0 	.word	0x400204a0
 8005fd4:	400204b8 	.word	0x400204b8
 8005fd8:	58025408 	.word	0x58025408
 8005fdc:	5802541c 	.word	0x5802541c
 8005fe0:	58025430 	.word	0x58025430
 8005fe4:	58025444 	.word	0x58025444
 8005fe8:	58025458 	.word	0x58025458
 8005fec:	5802546c 	.word	0x5802546c
 8005ff0:	58025480 	.word	0x58025480
 8005ff4:	58025494 	.word	0x58025494

08005ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006000:	f7fd fd76 	bl	8003af0 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e2dc      	b.n	80065ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d008      	beq.n	800602e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2280      	movs	r2, #128	@ 0x80
 8006020:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e2cd      	b.n	80065ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a76      	ldr	r2, [pc, #472]	@ (800620c <HAL_DMA_Abort+0x214>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04a      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a74      	ldr	r2, [pc, #464]	@ (8006210 <HAL_DMA_Abort+0x218>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d045      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a73      	ldr	r2, [pc, #460]	@ (8006214 <HAL_DMA_Abort+0x21c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d040      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a71      	ldr	r2, [pc, #452]	@ (8006218 <HAL_DMA_Abort+0x220>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d03b      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a70      	ldr	r2, [pc, #448]	@ (800621c <HAL_DMA_Abort+0x224>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d036      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a6e      	ldr	r2, [pc, #440]	@ (8006220 <HAL_DMA_Abort+0x228>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d031      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a6d      	ldr	r2, [pc, #436]	@ (8006224 <HAL_DMA_Abort+0x22c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d02c      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6b      	ldr	r2, [pc, #428]	@ (8006228 <HAL_DMA_Abort+0x230>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d027      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6a      	ldr	r2, [pc, #424]	@ (800622c <HAL_DMA_Abort+0x234>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d022      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a68      	ldr	r2, [pc, #416]	@ (8006230 <HAL_DMA_Abort+0x238>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01d      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <HAL_DMA_Abort+0x23c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d018      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a65      	ldr	r2, [pc, #404]	@ (8006238 <HAL_DMA_Abort+0x240>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a64      	ldr	r2, [pc, #400]	@ (800623c <HAL_DMA_Abort+0x244>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a62      	ldr	r2, [pc, #392]	@ (8006240 <HAL_DMA_Abort+0x248>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a61      	ldr	r2, [pc, #388]	@ (8006244 <HAL_DMA_Abort+0x24c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_DMA_Abort+0xd6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006248 <HAL_DMA_Abort+0x250>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d101      	bne.n	80060d2 <HAL_DMA_Abort+0xda>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <HAL_DMA_Abort+0xdc>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 021e 	bic.w	r2, r2, #30
 80060e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e00a      	b.n	8006116 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 020e 	bic.w	r2, r2, #14
 800610e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3c      	ldr	r2, [pc, #240]	@ (800620c <HAL_DMA_Abort+0x214>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d072      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3a      	ldr	r2, [pc, #232]	@ (8006210 <HAL_DMA_Abort+0x218>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d06d      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a39      	ldr	r2, [pc, #228]	@ (8006214 <HAL_DMA_Abort+0x21c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d068      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a37      	ldr	r2, [pc, #220]	@ (8006218 <HAL_DMA_Abort+0x220>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d063      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a36      	ldr	r2, [pc, #216]	@ (800621c <HAL_DMA_Abort+0x224>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d05e      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a34      	ldr	r2, [pc, #208]	@ (8006220 <HAL_DMA_Abort+0x228>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d059      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a33      	ldr	r2, [pc, #204]	@ (8006224 <HAL_DMA_Abort+0x22c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d054      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a31      	ldr	r2, [pc, #196]	@ (8006228 <HAL_DMA_Abort+0x230>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d04f      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a30      	ldr	r2, [pc, #192]	@ (800622c <HAL_DMA_Abort+0x234>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d04a      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2e      	ldr	r2, [pc, #184]	@ (8006230 <HAL_DMA_Abort+0x238>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d045      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2d      	ldr	r2, [pc, #180]	@ (8006234 <HAL_DMA_Abort+0x23c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d040      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2b      	ldr	r2, [pc, #172]	@ (8006238 <HAL_DMA_Abort+0x240>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d03b      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2a      	ldr	r2, [pc, #168]	@ (800623c <HAL_DMA_Abort+0x244>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d036      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a28      	ldr	r2, [pc, #160]	@ (8006240 <HAL_DMA_Abort+0x248>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d031      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a27      	ldr	r2, [pc, #156]	@ (8006244 <HAL_DMA_Abort+0x24c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d02c      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a25      	ldr	r2, [pc, #148]	@ (8006248 <HAL_DMA_Abort+0x250>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d027      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a24      	ldr	r2, [pc, #144]	@ (800624c <HAL_DMA_Abort+0x254>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d022      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a22      	ldr	r2, [pc, #136]	@ (8006250 <HAL_DMA_Abort+0x258>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01d      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a21      	ldr	r2, [pc, #132]	@ (8006254 <HAL_DMA_Abort+0x25c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d018      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006258 <HAL_DMA_Abort+0x260>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1e      	ldr	r2, [pc, #120]	@ (800625c <HAL_DMA_Abort+0x264>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00e      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006260 <HAL_DMA_Abort+0x268>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <HAL_DMA_Abort+0x26c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_DMA_Abort+0x20e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <HAL_DMA_Abort+0x270>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d132      	bne.n	800626c <HAL_DMA_Abort+0x274>
 8006206:	2301      	movs	r3, #1
 8006208:	e031      	b.n	800626e <HAL_DMA_Abort+0x276>
 800620a:	bf00      	nop
 800620c:	40020010 	.word	0x40020010
 8006210:	40020028 	.word	0x40020028
 8006214:	40020040 	.word	0x40020040
 8006218:	40020058 	.word	0x40020058
 800621c:	40020070 	.word	0x40020070
 8006220:	40020088 	.word	0x40020088
 8006224:	400200a0 	.word	0x400200a0
 8006228:	400200b8 	.word	0x400200b8
 800622c:	40020410 	.word	0x40020410
 8006230:	40020428 	.word	0x40020428
 8006234:	40020440 	.word	0x40020440
 8006238:	40020458 	.word	0x40020458
 800623c:	40020470 	.word	0x40020470
 8006240:	40020488 	.word	0x40020488
 8006244:	400204a0 	.word	0x400204a0
 8006248:	400204b8 	.word	0x400204b8
 800624c:	58025408 	.word	0x58025408
 8006250:	5802541c 	.word	0x5802541c
 8006254:	58025430 	.word	0x58025430
 8006258:	58025444 	.word	0x58025444
 800625c:	58025458 	.word	0x58025458
 8006260:	5802546c 	.word	0x5802546c
 8006264:	58025480 	.word	0x58025480
 8006268:	58025494 	.word	0x58025494
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006280:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a6d      	ldr	r2, [pc, #436]	@ (800643c <HAL_DMA_Abort+0x444>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d04a      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6b      	ldr	r2, [pc, #428]	@ (8006440 <HAL_DMA_Abort+0x448>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d045      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6a      	ldr	r2, [pc, #424]	@ (8006444 <HAL_DMA_Abort+0x44c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d040      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a68      	ldr	r2, [pc, #416]	@ (8006448 <HAL_DMA_Abort+0x450>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d03b      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a67      	ldr	r2, [pc, #412]	@ (800644c <HAL_DMA_Abort+0x454>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d036      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a65      	ldr	r2, [pc, #404]	@ (8006450 <HAL_DMA_Abort+0x458>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d031      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a64      	ldr	r2, [pc, #400]	@ (8006454 <HAL_DMA_Abort+0x45c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d02c      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a62      	ldr	r2, [pc, #392]	@ (8006458 <HAL_DMA_Abort+0x460>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d027      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a61      	ldr	r2, [pc, #388]	@ (800645c <HAL_DMA_Abort+0x464>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a5f      	ldr	r2, [pc, #380]	@ (8006460 <HAL_DMA_Abort+0x468>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01d      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006464 <HAL_DMA_Abort+0x46c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d018      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006468 <HAL_DMA_Abort+0x470>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a5b      	ldr	r2, [pc, #364]	@ (800646c <HAL_DMA_Abort+0x474>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a59      	ldr	r2, [pc, #356]	@ (8006470 <HAL_DMA_Abort+0x478>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a58      	ldr	r2, [pc, #352]	@ (8006474 <HAL_DMA_Abort+0x47c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_DMA_Abort+0x32a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a56      	ldr	r2, [pc, #344]	@ (8006478 <HAL_DMA_Abort+0x480>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d108      	bne.n	8006334 <HAL_DMA_Abort+0x33c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e007      	b.n	8006344 <HAL_DMA_Abort+0x34c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006344:	e013      	b.n	800636e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006346:	f7fd fbd3 	bl	8003af0 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b05      	cmp	r3, #5
 8006352:	d90c      	bls.n	800636e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2203      	movs	r2, #3
 800635e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e12d      	b.n	80065ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a2f      	ldr	r2, [pc, #188]	@ (800643c <HAL_DMA_Abort+0x444>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d04a      	beq.n	800641a <HAL_DMA_Abort+0x422>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2d      	ldr	r2, [pc, #180]	@ (8006440 <HAL_DMA_Abort+0x448>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d045      	beq.n	800641a <HAL_DMA_Abort+0x422>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <HAL_DMA_Abort+0x44c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d040      	beq.n	800641a <HAL_DMA_Abort+0x422>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <HAL_DMA_Abort+0x450>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d03b      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a29      	ldr	r2, [pc, #164]	@ (800644c <HAL_DMA_Abort+0x454>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d036      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a27      	ldr	r2, [pc, #156]	@ (8006450 <HAL_DMA_Abort+0x458>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d031      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a26      	ldr	r2, [pc, #152]	@ (8006454 <HAL_DMA_Abort+0x45c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d02c      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <HAL_DMA_Abort+0x460>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d027      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a23      	ldr	r2, [pc, #140]	@ (800645c <HAL_DMA_Abort+0x464>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d022      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a21      	ldr	r2, [pc, #132]	@ (8006460 <HAL_DMA_Abort+0x468>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01d      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a20      	ldr	r2, [pc, #128]	@ (8006464 <HAL_DMA_Abort+0x46c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d018      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <HAL_DMA_Abort+0x470>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1d      	ldr	r2, [pc, #116]	@ (800646c <HAL_DMA_Abort+0x474>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00e      	beq.n	800641a <HAL_DMA_Abort+0x422>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <HAL_DMA_Abort+0x478>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_DMA_Abort+0x422>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1a      	ldr	r2, [pc, #104]	@ (8006474 <HAL_DMA_Abort+0x47c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_DMA_Abort+0x422>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_DMA_Abort+0x480>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d101      	bne.n	800641e <HAL_DMA_Abort+0x426>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <HAL_DMA_Abort+0x428>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d02b      	beq.n	800647c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006428:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	223f      	movs	r2, #63	@ 0x3f
 8006434:	409a      	lsls	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	609a      	str	r2, [r3, #8]
 800643a:	e02a      	b.n	8006492 <HAL_DMA_Abort+0x49a>
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2201      	movs	r2, #1
 800648c:	409a      	lsls	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4f      	ldr	r2, [pc, #316]	@ (80065d4 <HAL_DMA_Abort+0x5dc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d072      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a4d      	ldr	r2, [pc, #308]	@ (80065d8 <HAL_DMA_Abort+0x5e0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d06d      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4c      	ldr	r2, [pc, #304]	@ (80065dc <HAL_DMA_Abort+0x5e4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d068      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a4a      	ldr	r2, [pc, #296]	@ (80065e0 <HAL_DMA_Abort+0x5e8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d063      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a49      	ldr	r2, [pc, #292]	@ (80065e4 <HAL_DMA_Abort+0x5ec>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d05e      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a47      	ldr	r2, [pc, #284]	@ (80065e8 <HAL_DMA_Abort+0x5f0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d059      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a46      	ldr	r2, [pc, #280]	@ (80065ec <HAL_DMA_Abort+0x5f4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d054      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a44      	ldr	r2, [pc, #272]	@ (80065f0 <HAL_DMA_Abort+0x5f8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04f      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a43      	ldr	r2, [pc, #268]	@ (80065f4 <HAL_DMA_Abort+0x5fc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d04a      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a41      	ldr	r2, [pc, #260]	@ (80065f8 <HAL_DMA_Abort+0x600>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d045      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a40      	ldr	r2, [pc, #256]	@ (80065fc <HAL_DMA_Abort+0x604>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d040      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a3e      	ldr	r2, [pc, #248]	@ (8006600 <HAL_DMA_Abort+0x608>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d03b      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a3d      	ldr	r2, [pc, #244]	@ (8006604 <HAL_DMA_Abort+0x60c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d036      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a3b      	ldr	r2, [pc, #236]	@ (8006608 <HAL_DMA_Abort+0x610>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d031      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a3a      	ldr	r2, [pc, #232]	@ (800660c <HAL_DMA_Abort+0x614>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d02c      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a38      	ldr	r2, [pc, #224]	@ (8006610 <HAL_DMA_Abort+0x618>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d027      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a37      	ldr	r2, [pc, #220]	@ (8006614 <HAL_DMA_Abort+0x61c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d022      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a35      	ldr	r2, [pc, #212]	@ (8006618 <HAL_DMA_Abort+0x620>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01d      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a34      	ldr	r2, [pc, #208]	@ (800661c <HAL_DMA_Abort+0x624>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a32      	ldr	r2, [pc, #200]	@ (8006620 <HAL_DMA_Abort+0x628>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a31      	ldr	r2, [pc, #196]	@ (8006624 <HAL_DMA_Abort+0x62c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2f      	ldr	r2, [pc, #188]	@ (8006628 <HAL_DMA_Abort+0x630>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2e      	ldr	r2, [pc, #184]	@ (800662c <HAL_DMA_Abort+0x634>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_DMA_Abort+0x58a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2c      	ldr	r2, [pc, #176]	@ (8006630 <HAL_DMA_Abort+0x638>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d101      	bne.n	8006586 <HAL_DMA_Abort+0x58e>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <HAL_DMA_Abort+0x590>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006594:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494

08006634 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e237      	b.n	8006ab6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d004      	beq.n	800665c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2280      	movs	r2, #128	@ 0x80
 8006656:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e22c      	b.n	8006ab6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5c      	ldr	r2, [pc, #368]	@ (80067d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d04a      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5b      	ldr	r2, [pc, #364]	@ (80067d8 <HAL_DMA_Abort_IT+0x1a4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d045      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a59      	ldr	r2, [pc, #356]	@ (80067dc <HAL_DMA_Abort_IT+0x1a8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d040      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a58      	ldr	r2, [pc, #352]	@ (80067e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d03b      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a56      	ldr	r2, [pc, #344]	@ (80067e4 <HAL_DMA_Abort_IT+0x1b0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d036      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a55      	ldr	r2, [pc, #340]	@ (80067e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d031      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a53      	ldr	r2, [pc, #332]	@ (80067ec <HAL_DMA_Abort_IT+0x1b8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d02c      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a52      	ldr	r2, [pc, #328]	@ (80067f0 <HAL_DMA_Abort_IT+0x1bc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d027      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a50      	ldr	r2, [pc, #320]	@ (80067f4 <HAL_DMA_Abort_IT+0x1c0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d022      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a4f      	ldr	r2, [pc, #316]	@ (80067f8 <HAL_DMA_Abort_IT+0x1c4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d01d      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a4d      	ldr	r2, [pc, #308]	@ (80067fc <HAL_DMA_Abort_IT+0x1c8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d018      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006800 <HAL_DMA_Abort_IT+0x1cc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006804 <HAL_DMA_Abort_IT+0x1d0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00e      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a49      	ldr	r2, [pc, #292]	@ (8006808 <HAL_DMA_Abort_IT+0x1d4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d009      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a47      	ldr	r2, [pc, #284]	@ (800680c <HAL_DMA_Abort_IT+0x1d8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_DMA_Abort_IT+0xc8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a46      	ldr	r2, [pc, #280]	@ (8006810 <HAL_DMA_Abort_IT+0x1dc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d101      	bne.n	8006700 <HAL_DMA_Abort_IT+0xcc>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <HAL_DMA_Abort_IT+0xce>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8086 	beq.w	8006814 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2204      	movs	r2, #4
 800670c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2f      	ldr	r2, [pc, #188]	@ (80067d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d04a      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2e      	ldr	r2, [pc, #184]	@ (80067d8 <HAL_DMA_Abort_IT+0x1a4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d045      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <HAL_DMA_Abort_IT+0x1a8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d040      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2b      	ldr	r2, [pc, #172]	@ (80067e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d03b      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <HAL_DMA_Abort_IT+0x1b0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d036      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a28      	ldr	r2, [pc, #160]	@ (80067e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d031      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a26      	ldr	r2, [pc, #152]	@ (80067ec <HAL_DMA_Abort_IT+0x1b8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d02c      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a25      	ldr	r2, [pc, #148]	@ (80067f0 <HAL_DMA_Abort_IT+0x1bc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d027      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a23      	ldr	r2, [pc, #140]	@ (80067f4 <HAL_DMA_Abort_IT+0x1c0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d022      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a22      	ldr	r2, [pc, #136]	@ (80067f8 <HAL_DMA_Abort_IT+0x1c4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d01d      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a20      	ldr	r2, [pc, #128]	@ (80067fc <HAL_DMA_Abort_IT+0x1c8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d018      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1f      	ldr	r2, [pc, #124]	@ (8006800 <HAL_DMA_Abort_IT+0x1cc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d013      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1d      	ldr	r2, [pc, #116]	@ (8006804 <HAL_DMA_Abort_IT+0x1d0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00e      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <HAL_DMA_Abort_IT+0x1d4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d009      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <HAL_DMA_Abort_IT+0x1d8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x17c>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a19      	ldr	r2, [pc, #100]	@ (8006810 <HAL_DMA_Abort_IT+0x1dc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d108      	bne.n	80067c2 <HAL_DMA_Abort_IT+0x18e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0201 	bic.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e178      	b.n	8006ab4 <HAL_DMA_Abort_IT+0x480>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e16f      	b.n	8006ab4 <HAL_DMA_Abort_IT+0x480>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 020e 	bic.w	r2, r2, #14
 8006822:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a6c      	ldr	r2, [pc, #432]	@ (80069dc <HAL_DMA_Abort_IT+0x3a8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d04a      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6b      	ldr	r2, [pc, #428]	@ (80069e0 <HAL_DMA_Abort_IT+0x3ac>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d045      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a69      	ldr	r2, [pc, #420]	@ (80069e4 <HAL_DMA_Abort_IT+0x3b0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d040      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a68      	ldr	r2, [pc, #416]	@ (80069e8 <HAL_DMA_Abort_IT+0x3b4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d03b      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a66      	ldr	r2, [pc, #408]	@ (80069ec <HAL_DMA_Abort_IT+0x3b8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d036      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a65      	ldr	r2, [pc, #404]	@ (80069f0 <HAL_DMA_Abort_IT+0x3bc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d031      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a63      	ldr	r2, [pc, #396]	@ (80069f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d02c      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a62      	ldr	r2, [pc, #392]	@ (80069f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d027      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a60      	ldr	r2, [pc, #384]	@ (80069fc <HAL_DMA_Abort_IT+0x3c8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d022      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a5f      	ldr	r2, [pc, #380]	@ (8006a00 <HAL_DMA_Abort_IT+0x3cc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d01d      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a5d      	ldr	r2, [pc, #372]	@ (8006a04 <HAL_DMA_Abort_IT+0x3d0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5c      	ldr	r2, [pc, #368]	@ (8006a08 <HAL_DMA_Abort_IT+0x3d4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5a      	ldr	r2, [pc, #360]	@ (8006a0c <HAL_DMA_Abort_IT+0x3d8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a59      	ldr	r2, [pc, #356]	@ (8006a10 <HAL_DMA_Abort_IT+0x3dc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a57      	ldr	r2, [pc, #348]	@ (8006a14 <HAL_DMA_Abort_IT+0x3e0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_DMA_Abort_IT+0x290>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a56      	ldr	r2, [pc, #344]	@ (8006a18 <HAL_DMA_Abort_IT+0x3e4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <HAL_DMA_Abort_IT+0x2a2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e007      	b.n	80068e6 <HAL_DMA_Abort_IT+0x2b2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3c      	ldr	r2, [pc, #240]	@ (80069dc <HAL_DMA_Abort_IT+0x3a8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d072      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3a      	ldr	r2, [pc, #232]	@ (80069e0 <HAL_DMA_Abort_IT+0x3ac>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d06d      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a39      	ldr	r2, [pc, #228]	@ (80069e4 <HAL_DMA_Abort_IT+0x3b0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d068      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a37      	ldr	r2, [pc, #220]	@ (80069e8 <HAL_DMA_Abort_IT+0x3b4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d063      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a36      	ldr	r2, [pc, #216]	@ (80069ec <HAL_DMA_Abort_IT+0x3b8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d05e      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a34      	ldr	r2, [pc, #208]	@ (80069f0 <HAL_DMA_Abort_IT+0x3bc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d059      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a33      	ldr	r2, [pc, #204]	@ (80069f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d054      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a31      	ldr	r2, [pc, #196]	@ (80069f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d04f      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a30      	ldr	r2, [pc, #192]	@ (80069fc <HAL_DMA_Abort_IT+0x3c8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d04a      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2e      	ldr	r2, [pc, #184]	@ (8006a00 <HAL_DMA_Abort_IT+0x3cc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d045      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a04 <HAL_DMA_Abort_IT+0x3d0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d040      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2b      	ldr	r2, [pc, #172]	@ (8006a08 <HAL_DMA_Abort_IT+0x3d4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d03b      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2a      	ldr	r2, [pc, #168]	@ (8006a0c <HAL_DMA_Abort_IT+0x3d8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d036      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a28      	ldr	r2, [pc, #160]	@ (8006a10 <HAL_DMA_Abort_IT+0x3dc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d031      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a27      	ldr	r2, [pc, #156]	@ (8006a14 <HAL_DMA_Abort_IT+0x3e0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d02c      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a25      	ldr	r2, [pc, #148]	@ (8006a18 <HAL_DMA_Abort_IT+0x3e4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d027      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a24      	ldr	r2, [pc, #144]	@ (8006a1c <HAL_DMA_Abort_IT+0x3e8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d022      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a22      	ldr	r2, [pc, #136]	@ (8006a20 <HAL_DMA_Abort_IT+0x3ec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01d      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a21      	ldr	r2, [pc, #132]	@ (8006a24 <HAL_DMA_Abort_IT+0x3f0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d018      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <HAL_DMA_Abort_IT+0x3f4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <HAL_DMA_Abort_IT+0x3f8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00e      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <HAL_DMA_Abort_IT+0x3fc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d009      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <HAL_DMA_Abort_IT+0x400>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_DMA_Abort_IT+0x3a2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a19      	ldr	r2, [pc, #100]	@ (8006a38 <HAL_DMA_Abort_IT+0x404>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d132      	bne.n	8006a3c <HAL_DMA_Abort_IT+0x408>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e031      	b.n	8006a3e <HAL_DMA_Abort_IT+0x40a>
 80069da:	bf00      	nop
 80069dc:	40020010 	.word	0x40020010
 80069e0:	40020028 	.word	0x40020028
 80069e4:	40020040 	.word	0x40020040
 80069e8:	40020058 	.word	0x40020058
 80069ec:	40020070 	.word	0x40020070
 80069f0:	40020088 	.word	0x40020088
 80069f4:	400200a0 	.word	0x400200a0
 80069f8:	400200b8 	.word	0x400200b8
 80069fc:	40020410 	.word	0x40020410
 8006a00:	40020428 	.word	0x40020428
 8006a04:	40020440 	.word	0x40020440
 8006a08:	40020458 	.word	0x40020458
 8006a0c:	40020470 	.word	0x40020470
 8006a10:	40020488 	.word	0x40020488
 8006a14:	400204a0 	.word	0x400204a0
 8006a18:	400204b8 	.word	0x400204b8
 8006a1c:	58025408 	.word	0x58025408
 8006a20:	5802541c 	.word	0x5802541c
 8006a24:	58025430 	.word	0x58025430
 8006a28:	58025444 	.word	0x58025444
 8006a2c:	58025458 	.word	0x58025458
 8006a30:	5802546c 	.word	0x5802546c
 8006a34:	58025480 	.word	0x58025480
 8006a38:	58025494 	.word	0x58025494
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d028      	beq.n	8006a94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	2201      	movs	r2, #1
 8006a62:	409a      	lsls	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	@ 0x28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006acc:	4b67      	ldr	r3, [pc, #412]	@ (8006c6c <HAL_DMA_IRQHandler+0x1ac>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a67      	ldr	r2, [pc, #412]	@ (8006c70 <HAL_DMA_IRQHandler+0x1b0>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	0a9b      	lsrs	r3, r3, #10
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a5f      	ldr	r2, [pc, #380]	@ (8006c74 <HAL_DMA_IRQHandler+0x1b4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d04a      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a5d      	ldr	r2, [pc, #372]	@ (8006c78 <HAL_DMA_IRQHandler+0x1b8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d045      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8006c7c <HAL_DMA_IRQHandler+0x1bc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d040      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a5a      	ldr	r2, [pc, #360]	@ (8006c80 <HAL_DMA_IRQHandler+0x1c0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d03b      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a59      	ldr	r2, [pc, #356]	@ (8006c84 <HAL_DMA_IRQHandler+0x1c4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d036      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a57      	ldr	r2, [pc, #348]	@ (8006c88 <HAL_DMA_IRQHandler+0x1c8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d031      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a56      	ldr	r2, [pc, #344]	@ (8006c8c <HAL_DMA_IRQHandler+0x1cc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d02c      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a54      	ldr	r2, [pc, #336]	@ (8006c90 <HAL_DMA_IRQHandler+0x1d0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d027      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a53      	ldr	r2, [pc, #332]	@ (8006c94 <HAL_DMA_IRQHandler+0x1d4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d022      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a51      	ldr	r2, [pc, #324]	@ (8006c98 <HAL_DMA_IRQHandler+0x1d8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01d      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a50      	ldr	r2, [pc, #320]	@ (8006c9c <HAL_DMA_IRQHandler+0x1dc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d018      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a4e      	ldr	r2, [pc, #312]	@ (8006ca0 <HAL_DMA_IRQHandler+0x1e0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d013      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4d      	ldr	r2, [pc, #308]	@ (8006ca4 <HAL_DMA_IRQHandler+0x1e4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00e      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a4b      	ldr	r2, [pc, #300]	@ (8006ca8 <HAL_DMA_IRQHandler+0x1e8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d009      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a4a      	ldr	r2, [pc, #296]	@ (8006cac <HAL_DMA_IRQHandler+0x1ec>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d004      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xd2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a48      	ldr	r2, [pc, #288]	@ (8006cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d101      	bne.n	8006b96 <HAL_DMA_IRQHandler+0xd6>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <HAL_DMA_IRQHandler+0xd8>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 842b 	beq.w	80073f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba2:	f003 031f 	and.w	r3, r3, #31
 8006ba6:	2208      	movs	r2, #8
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80a2 	beq.w	8006cf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c74 <HAL_DMA_IRQHandler+0x1b4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d04a      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8006c78 <HAL_DMA_IRQHandler+0x1b8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d045      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8006c7c <HAL_DMA_IRQHandler+0x1bc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d040      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c80 <HAL_DMA_IRQHandler+0x1c0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d03b      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a28      	ldr	r2, [pc, #160]	@ (8006c84 <HAL_DMA_IRQHandler+0x1c4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d036      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a27      	ldr	r2, [pc, #156]	@ (8006c88 <HAL_DMA_IRQHandler+0x1c8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d031      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a25      	ldr	r2, [pc, #148]	@ (8006c8c <HAL_DMA_IRQHandler+0x1cc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d02c      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a24      	ldr	r2, [pc, #144]	@ (8006c90 <HAL_DMA_IRQHandler+0x1d0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d027      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a22      	ldr	r2, [pc, #136]	@ (8006c94 <HAL_DMA_IRQHandler+0x1d4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d022      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a21      	ldr	r2, [pc, #132]	@ (8006c98 <HAL_DMA_IRQHandler+0x1d8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d01d      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c9c <HAL_DMA_IRQHandler+0x1dc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d018      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca0 <HAL_DMA_IRQHandler+0x1e0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d013      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca4 <HAL_DMA_IRQHandler+0x1e4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00e      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca8 <HAL_DMA_IRQHandler+0x1e8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d009      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a19      	ldr	r2, [pc, #100]	@ (8006cac <HAL_DMA_IRQHandler+0x1ec>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d004      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x194>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a18      	ldr	r2, [pc, #96]	@ (8006cb0 <HAL_DMA_IRQHandler+0x1f0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d12f      	bne.n	8006cb4 <HAL_DMA_IRQHandler+0x1f4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	e02e      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x208>
 8006c6a:	bf00      	nop
 8006c6c:	24000000 	.word	0x24000000
 8006c70:	1b4e81b5 	.word	0x1b4e81b5
 8006c74:	40020010 	.word	0x40020010
 8006c78:	40020028 	.word	0x40020028
 8006c7c:	40020040 	.word	0x40020040
 8006c80:	40020058 	.word	0x40020058
 8006c84:	40020070 	.word	0x40020070
 8006c88:	40020088 	.word	0x40020088
 8006c8c:	400200a0 	.word	0x400200a0
 8006c90:	400200b8 	.word	0x400200b8
 8006c94:	40020410 	.word	0x40020410
 8006c98:	40020428 	.word	0x40020428
 8006c9c:	40020440 	.word	0x40020440
 8006ca0:	40020458 	.word	0x40020458
 8006ca4:	40020470 	.word	0x40020470
 8006ca8:	40020488 	.word	0x40020488
 8006cac:	400204a0 	.word	0x400204a0
 8006cb0:	400204b8 	.word	0x400204b8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d015      	beq.n	8006cf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0204 	bic.w	r2, r2, #4
 8006cda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d06e      	beq.n	8006dec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a69      	ldr	r2, [pc, #420]	@ (8006eb8 <HAL_DMA_IRQHandler+0x3f8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d04a      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a67      	ldr	r2, [pc, #412]	@ (8006ebc <HAL_DMA_IRQHandler+0x3fc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d045      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a66      	ldr	r2, [pc, #408]	@ (8006ec0 <HAL_DMA_IRQHandler+0x400>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d040      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a64      	ldr	r2, [pc, #400]	@ (8006ec4 <HAL_DMA_IRQHandler+0x404>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d03b      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a63      	ldr	r2, [pc, #396]	@ (8006ec8 <HAL_DMA_IRQHandler+0x408>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d036      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a61      	ldr	r2, [pc, #388]	@ (8006ecc <HAL_DMA_IRQHandler+0x40c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d031      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a60      	ldr	r2, [pc, #384]	@ (8006ed0 <HAL_DMA_IRQHandler+0x410>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d02c      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a5e      	ldr	r2, [pc, #376]	@ (8006ed4 <HAL_DMA_IRQHandler+0x414>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d027      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a5d      	ldr	r2, [pc, #372]	@ (8006ed8 <HAL_DMA_IRQHandler+0x418>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d022      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8006edc <HAL_DMA_IRQHandler+0x41c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01d      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a5a      	ldr	r2, [pc, #360]	@ (8006ee0 <HAL_DMA_IRQHandler+0x420>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d018      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a58      	ldr	r2, [pc, #352]	@ (8006ee4 <HAL_DMA_IRQHandler+0x424>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a57      	ldr	r2, [pc, #348]	@ (8006ee8 <HAL_DMA_IRQHandler+0x428>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00e      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a55      	ldr	r2, [pc, #340]	@ (8006eec <HAL_DMA_IRQHandler+0x42c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a54      	ldr	r2, [pc, #336]	@ (8006ef0 <HAL_DMA_IRQHandler+0x430>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_DMA_IRQHandler+0x2ee>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a52      	ldr	r2, [pc, #328]	@ (8006ef4 <HAL_DMA_IRQHandler+0x434>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d10a      	bne.n	8006dc4 <HAL_DMA_IRQHandler+0x304>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bf14      	ite	ne
 8006dbc:	2301      	movne	r3, #1
 8006dbe:	2300      	moveq	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	e003      	b.n	8006dcc <HAL_DMA_IRQHandler+0x30c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00d      	beq.n	8006dec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	2201      	movs	r2, #1
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de4:	f043 0202 	orr.w	r2, r3, #2
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2204      	movs	r2, #4
 8006df6:	409a      	lsls	r2, r3
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 808f 	beq.w	8006f20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb8 <HAL_DMA_IRQHandler+0x3f8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d04a      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2a      	ldr	r2, [pc, #168]	@ (8006ebc <HAL_DMA_IRQHandler+0x3fc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d045      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a29      	ldr	r2, [pc, #164]	@ (8006ec0 <HAL_DMA_IRQHandler+0x400>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d040      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a27      	ldr	r2, [pc, #156]	@ (8006ec4 <HAL_DMA_IRQHandler+0x404>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d03b      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a26      	ldr	r2, [pc, #152]	@ (8006ec8 <HAL_DMA_IRQHandler+0x408>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d036      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a24      	ldr	r2, [pc, #144]	@ (8006ecc <HAL_DMA_IRQHandler+0x40c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d031      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a23      	ldr	r2, [pc, #140]	@ (8006ed0 <HAL_DMA_IRQHandler+0x410>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d02c      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a21      	ldr	r2, [pc, #132]	@ (8006ed4 <HAL_DMA_IRQHandler+0x414>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d027      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a20      	ldr	r2, [pc, #128]	@ (8006ed8 <HAL_DMA_IRQHandler+0x418>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1e      	ldr	r2, [pc, #120]	@ (8006edc <HAL_DMA_IRQHandler+0x41c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01d      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee0 <HAL_DMA_IRQHandler+0x420>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee4 <HAL_DMA_IRQHandler+0x424>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee8 <HAL_DMA_IRQHandler+0x428>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a18      	ldr	r2, [pc, #96]	@ (8006eec <HAL_DMA_IRQHandler+0x42c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a17      	ldr	r2, [pc, #92]	@ (8006ef0 <HAL_DMA_IRQHandler+0x430>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x3e2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <HAL_DMA_IRQHandler+0x434>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d12a      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0x438>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf14      	ite	ne
 8006eb0:	2301      	movne	r3, #1
 8006eb2:	2300      	moveq	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	e023      	b.n	8006f00 <HAL_DMA_IRQHandler+0x440>
 8006eb8:	40020010 	.word	0x40020010
 8006ebc:	40020028 	.word	0x40020028
 8006ec0:	40020040 	.word	0x40020040
 8006ec4:	40020058 	.word	0x40020058
 8006ec8:	40020070 	.word	0x40020070
 8006ecc:	40020088 	.word	0x40020088
 8006ed0:	400200a0 	.word	0x400200a0
 8006ed4:	400200b8 	.word	0x400200b8
 8006ed8:	40020410 	.word	0x40020410
 8006edc:	40020428 	.word	0x40020428
 8006ee0:	40020440 	.word	0x40020440
 8006ee4:	40020458 	.word	0x40020458
 8006ee8:	40020470 	.word	0x40020470
 8006eec:	40020488 	.word	0x40020488
 8006ef0:	400204a0 	.word	0x400204a0
 8006ef4:	400204b8 	.word	0x400204b8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f18:	f043 0204 	orr.w	r2, r3, #4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2210      	movs	r2, #16
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80a6 	beq.w	8007082 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a85      	ldr	r2, [pc, #532]	@ (8007150 <HAL_DMA_IRQHandler+0x690>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d04a      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a83      	ldr	r2, [pc, #524]	@ (8007154 <HAL_DMA_IRQHandler+0x694>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d045      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a82      	ldr	r2, [pc, #520]	@ (8007158 <HAL_DMA_IRQHandler+0x698>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d040      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a80      	ldr	r2, [pc, #512]	@ (800715c <HAL_DMA_IRQHandler+0x69c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d03b      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a7f      	ldr	r2, [pc, #508]	@ (8007160 <HAL_DMA_IRQHandler+0x6a0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d036      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a7d      	ldr	r2, [pc, #500]	@ (8007164 <HAL_DMA_IRQHandler+0x6a4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d031      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a7c      	ldr	r2, [pc, #496]	@ (8007168 <HAL_DMA_IRQHandler+0x6a8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d02c      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a7a      	ldr	r2, [pc, #488]	@ (800716c <HAL_DMA_IRQHandler+0x6ac>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d027      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a79      	ldr	r2, [pc, #484]	@ (8007170 <HAL_DMA_IRQHandler+0x6b0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a77      	ldr	r2, [pc, #476]	@ (8007174 <HAL_DMA_IRQHandler+0x6b4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01d      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a76      	ldr	r2, [pc, #472]	@ (8007178 <HAL_DMA_IRQHandler+0x6b8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a74      	ldr	r2, [pc, #464]	@ (800717c <HAL_DMA_IRQHandler+0x6bc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a73      	ldr	r2, [pc, #460]	@ (8007180 <HAL_DMA_IRQHandler+0x6c0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a71      	ldr	r2, [pc, #452]	@ (8007184 <HAL_DMA_IRQHandler+0x6c4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a70      	ldr	r2, [pc, #448]	@ (8007188 <HAL_DMA_IRQHandler+0x6c8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x516>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800718c <HAL_DMA_IRQHandler+0x6cc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10a      	bne.n	8006fec <HAL_DMA_IRQHandler+0x52c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	e009      	b.n	8007000 <HAL_DMA_IRQHandler+0x540>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d03e      	beq.n	8007082 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2210      	movs	r2, #16
 800700e:	409a      	lsls	r2, r3
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d018      	beq.n	8007054 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d108      	bne.n	8007042 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	d024      	beq.n	8007082 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	e01f      	b.n	8007082 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01b      	beq.n	8007082 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	e016      	b.n	8007082 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705e:	2b00      	cmp	r3, #0
 8007060:	d107      	bne.n	8007072 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0208 	bic.w	r2, r2, #8
 8007070:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2220      	movs	r2, #32
 800708c:	409a      	lsls	r2, r3
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8110 	beq.w	80072b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2c      	ldr	r2, [pc, #176]	@ (8007150 <HAL_DMA_IRQHandler+0x690>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d04a      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007154 <HAL_DMA_IRQHandler+0x694>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d045      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a29      	ldr	r2, [pc, #164]	@ (8007158 <HAL_DMA_IRQHandler+0x698>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d040      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a28      	ldr	r2, [pc, #160]	@ (800715c <HAL_DMA_IRQHandler+0x69c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d03b      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a26      	ldr	r2, [pc, #152]	@ (8007160 <HAL_DMA_IRQHandler+0x6a0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d036      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a25      	ldr	r2, [pc, #148]	@ (8007164 <HAL_DMA_IRQHandler+0x6a4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d031      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a23      	ldr	r2, [pc, #140]	@ (8007168 <HAL_DMA_IRQHandler+0x6a8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02c      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a22      	ldr	r2, [pc, #136]	@ (800716c <HAL_DMA_IRQHandler+0x6ac>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d027      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a20      	ldr	r2, [pc, #128]	@ (8007170 <HAL_DMA_IRQHandler+0x6b0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d022      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007174 <HAL_DMA_IRQHandler+0x6b4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01d      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1d      	ldr	r2, [pc, #116]	@ (8007178 <HAL_DMA_IRQHandler+0x6b8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1c      	ldr	r2, [pc, #112]	@ (800717c <HAL_DMA_IRQHandler+0x6bc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1a      	ldr	r2, [pc, #104]	@ (8007180 <HAL_DMA_IRQHandler+0x6c0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a19      	ldr	r2, [pc, #100]	@ (8007184 <HAL_DMA_IRQHandler+0x6c4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a17      	ldr	r2, [pc, #92]	@ (8007188 <HAL_DMA_IRQHandler+0x6c8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_DMA_IRQHandler+0x678>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a16      	ldr	r2, [pc, #88]	@ (800718c <HAL_DMA_IRQHandler+0x6cc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d12b      	bne.n	8007190 <HAL_DMA_IRQHandler+0x6d0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e02a      	b.n	80071a4 <HAL_DMA_IRQHandler+0x6e4>
 800714e:	bf00      	nop
 8007150:	40020010 	.word	0x40020010
 8007154:	40020028 	.word	0x40020028
 8007158:	40020040 	.word	0x40020040
 800715c:	40020058 	.word	0x40020058
 8007160:	40020070 	.word	0x40020070
 8007164:	40020088 	.word	0x40020088
 8007168:	400200a0 	.word	0x400200a0
 800716c:	400200b8 	.word	0x400200b8
 8007170:	40020410 	.word	0x40020410
 8007174:	40020428 	.word	0x40020428
 8007178:	40020440 	.word	0x40020440
 800717c:	40020458 	.word	0x40020458
 8007180:	40020470 	.word	0x40020470
 8007184:	40020488 	.word	0x40020488
 8007188:	400204a0 	.word	0x400204a0
 800718c:	400204b8 	.word	0x400204b8
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	bf14      	ite	ne
 800719e:	2301      	movne	r3, #1
 80071a0:	2300      	moveq	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8087 	beq.w	80072b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2220      	movs	r2, #32
 80071b4:	409a      	lsls	r2, r3
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d139      	bne.n	800723a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0216 	bic.w	r2, r2, #22
 80071d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <HAL_DMA_IRQHandler+0x736>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0208 	bic.w	r2, r2, #8
 8007204:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	223f      	movs	r2, #63	@ 0x3f
 8007210:	409a      	lsls	r2, r3
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 834a 	beq.w	80078c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
          }
          return;
 8007238:	e344      	b.n	80078c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d018      	beq.n	800727a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725a:	2b00      	cmp	r3, #0
 800725c:	d02c      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
 8007266:	e027      	b.n	80072b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d023      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
 8007278:	e01e      	b.n	80072b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10f      	bne.n	80072a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0210 	bic.w	r2, r2, #16
 8007296:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8306 	beq.w	80078ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 8088 	beq.w	80073e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2204      	movs	r2, #4
 80072d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a7a      	ldr	r2, [pc, #488]	@ (80074c8 <HAL_DMA_IRQHandler+0xa08>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d04a      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a79      	ldr	r2, [pc, #484]	@ (80074cc <HAL_DMA_IRQHandler+0xa0c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d045      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a77      	ldr	r2, [pc, #476]	@ (80074d0 <HAL_DMA_IRQHandler+0xa10>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d040      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a76      	ldr	r2, [pc, #472]	@ (80074d4 <HAL_DMA_IRQHandler+0xa14>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d03b      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a74      	ldr	r2, [pc, #464]	@ (80074d8 <HAL_DMA_IRQHandler+0xa18>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d036      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a73      	ldr	r2, [pc, #460]	@ (80074dc <HAL_DMA_IRQHandler+0xa1c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d031      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a71      	ldr	r2, [pc, #452]	@ (80074e0 <HAL_DMA_IRQHandler+0xa20>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d02c      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a70      	ldr	r2, [pc, #448]	@ (80074e4 <HAL_DMA_IRQHandler+0xa24>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d027      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6e      	ldr	r2, [pc, #440]	@ (80074e8 <HAL_DMA_IRQHandler+0xa28>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d022      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6d      	ldr	r2, [pc, #436]	@ (80074ec <HAL_DMA_IRQHandler+0xa2c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d01d      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6b      	ldr	r2, [pc, #428]	@ (80074f0 <HAL_DMA_IRQHandler+0xa30>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d018      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a6a      	ldr	r2, [pc, #424]	@ (80074f4 <HAL_DMA_IRQHandler+0xa34>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d013      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a68      	ldr	r2, [pc, #416]	@ (80074f8 <HAL_DMA_IRQHandler+0xa38>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00e      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a67      	ldr	r2, [pc, #412]	@ (80074fc <HAL_DMA_IRQHandler+0xa3c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d009      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a65      	ldr	r2, [pc, #404]	@ (8007500 <HAL_DMA_IRQHandler+0xa40>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d004      	beq.n	8007378 <HAL_DMA_IRQHandler+0x8b8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a64      	ldr	r2, [pc, #400]	@ (8007504 <HAL_DMA_IRQHandler+0xa44>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d108      	bne.n	800738a <HAL_DMA_IRQHandler+0x8ca>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0201 	bic.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e007      	b.n	800739a <HAL_DMA_IRQHandler+0x8da>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d307      	bcc.n	80073b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f2      	bne.n	800739a <HAL_DMA_IRQHandler+0x8da>
 80073b4:	e000      	b.n	80073b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80073b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2203      	movs	r2, #3
 80073ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80073ce:	e003      	b.n	80073d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8272 	beq.w	80078ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
 80073f2:	e26c      	b.n	80078ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a43      	ldr	r2, [pc, #268]	@ (8007508 <HAL_DMA_IRQHandler+0xa48>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a42      	ldr	r2, [pc, #264]	@ (800750c <HAL_DMA_IRQHandler+0xa4c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d01d      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a40      	ldr	r2, [pc, #256]	@ (8007510 <HAL_DMA_IRQHandler+0xa50>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a3f      	ldr	r2, [pc, #252]	@ (8007514 <HAL_DMA_IRQHandler+0xa54>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a3d      	ldr	r2, [pc, #244]	@ (8007518 <HAL_DMA_IRQHandler+0xa58>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3c      	ldr	r2, [pc, #240]	@ (800751c <HAL_DMA_IRQHandler+0xa5c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a3a      	ldr	r2, [pc, #232]	@ (8007520 <HAL_DMA_IRQHandler+0xa60>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_DMA_IRQHandler+0x984>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a39      	ldr	r2, [pc, #228]	@ (8007524 <HAL_DMA_IRQHandler+0xa64>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d101      	bne.n	8007448 <HAL_DMA_IRQHandler+0x988>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_DMA_IRQHandler+0x98a>
 8007448:	2300      	movs	r3, #0
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 823f 	beq.w	80078ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2204      	movs	r2, #4
 8007462:	409a      	lsls	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	4013      	ands	r3, r2
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80cd 	beq.w	8007608 <HAL_DMA_IRQHandler+0xb48>
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80c7 	beq.w	8007608 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747e:	f003 031f 	and.w	r3, r3, #31
 8007482:	2204      	movs	r2, #4
 8007484:	409a      	lsls	r2, r3
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d049      	beq.n	8007528 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8210 	beq.w	80078c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074b0:	e20a      	b.n	80078c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 8206 	beq.w	80078c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c4:	e200      	b.n	80078c8 <HAL_DMA_IRQHandler+0xe08>
 80074c6:	bf00      	nop
 80074c8:	40020010 	.word	0x40020010
 80074cc:	40020028 	.word	0x40020028
 80074d0:	40020040 	.word	0x40020040
 80074d4:	40020058 	.word	0x40020058
 80074d8:	40020070 	.word	0x40020070
 80074dc:	40020088 	.word	0x40020088
 80074e0:	400200a0 	.word	0x400200a0
 80074e4:	400200b8 	.word	0x400200b8
 80074e8:	40020410 	.word	0x40020410
 80074ec:	40020428 	.word	0x40020428
 80074f0:	40020440 	.word	0x40020440
 80074f4:	40020458 	.word	0x40020458
 80074f8:	40020470 	.word	0x40020470
 80074fc:	40020488 	.word	0x40020488
 8007500:	400204a0 	.word	0x400204a0
 8007504:	400204b8 	.word	0x400204b8
 8007508:	58025408 	.word	0x58025408
 800750c:	5802541c 	.word	0x5802541c
 8007510:	58025430 	.word	0x58025430
 8007514:	58025444 	.word	0x58025444
 8007518:	58025458 	.word	0x58025458
 800751c:	5802546c 	.word	0x5802546c
 8007520:	58025480 	.word	0x58025480
 8007524:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d160      	bne.n	80075f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a7f      	ldr	r2, [pc, #508]	@ (8007734 <HAL_DMA_IRQHandler+0xc74>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d04a      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7d      	ldr	r2, [pc, #500]	@ (8007738 <HAL_DMA_IRQHandler+0xc78>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d045      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a7c      	ldr	r2, [pc, #496]	@ (800773c <HAL_DMA_IRQHandler+0xc7c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d040      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a7a      	ldr	r2, [pc, #488]	@ (8007740 <HAL_DMA_IRQHandler+0xc80>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d03b      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a79      	ldr	r2, [pc, #484]	@ (8007744 <HAL_DMA_IRQHandler+0xc84>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d036      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a77      	ldr	r2, [pc, #476]	@ (8007748 <HAL_DMA_IRQHandler+0xc88>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d031      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a76      	ldr	r2, [pc, #472]	@ (800774c <HAL_DMA_IRQHandler+0xc8c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d02c      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a74      	ldr	r2, [pc, #464]	@ (8007750 <HAL_DMA_IRQHandler+0xc90>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d027      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a73      	ldr	r2, [pc, #460]	@ (8007754 <HAL_DMA_IRQHandler+0xc94>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a71      	ldr	r2, [pc, #452]	@ (8007758 <HAL_DMA_IRQHandler+0xc98>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01d      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a70      	ldr	r2, [pc, #448]	@ (800775c <HAL_DMA_IRQHandler+0xc9c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007760 <HAL_DMA_IRQHandler+0xca0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007764 <HAL_DMA_IRQHandler+0xca4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007768 <HAL_DMA_IRQHandler+0xca8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a6a      	ldr	r2, [pc, #424]	@ (800776c <HAL_DMA_IRQHandler+0xcac>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xb12>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a68      	ldr	r2, [pc, #416]	@ (8007770 <HAL_DMA_IRQHandler+0xcb0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <HAL_DMA_IRQHandler+0xb24>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0208 	bic.w	r2, r2, #8
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e007      	b.n	80075f4 <HAL_DMA_IRQHandler+0xb34>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8165 	beq.w	80078c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007606:	e15f      	b.n	80078c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2202      	movs	r2, #2
 8007612:	409a      	lsls	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80c5 	beq.w	80077a8 <HAL_DMA_IRQHandler+0xce8>
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80bf 	beq.w	80077a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	2202      	movs	r2, #2
 8007634:	409a      	lsls	r2, r3
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d018      	beq.n	8007676 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 813a 	beq.w	80078cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007660:	e134      	b.n	80078cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8130 	beq.w	80078cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007674:	e12a      	b.n	80078cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	f040 8089 	bne.w	8007794 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2b      	ldr	r2, [pc, #172]	@ (8007734 <HAL_DMA_IRQHandler+0xc74>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d04a      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a29      	ldr	r2, [pc, #164]	@ (8007738 <HAL_DMA_IRQHandler+0xc78>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d045      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a28      	ldr	r2, [pc, #160]	@ (800773c <HAL_DMA_IRQHandler+0xc7c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d040      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a26      	ldr	r2, [pc, #152]	@ (8007740 <HAL_DMA_IRQHandler+0xc80>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d03b      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a25      	ldr	r2, [pc, #148]	@ (8007744 <HAL_DMA_IRQHandler+0xc84>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d036      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a23      	ldr	r2, [pc, #140]	@ (8007748 <HAL_DMA_IRQHandler+0xc88>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d031      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a22      	ldr	r2, [pc, #136]	@ (800774c <HAL_DMA_IRQHandler+0xc8c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d02c      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a20      	ldr	r2, [pc, #128]	@ (8007750 <HAL_DMA_IRQHandler+0xc90>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d027      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007754 <HAL_DMA_IRQHandler+0xc94>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007758 <HAL_DMA_IRQHandler+0xc98>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1c      	ldr	r2, [pc, #112]	@ (800775c <HAL_DMA_IRQHandler+0xc9c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007760 <HAL_DMA_IRQHandler+0xca0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a19      	ldr	r2, [pc, #100]	@ (8007764 <HAL_DMA_IRQHandler+0xca4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a17      	ldr	r2, [pc, #92]	@ (8007768 <HAL_DMA_IRQHandler+0xca8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a16      	ldr	r2, [pc, #88]	@ (800776c <HAL_DMA_IRQHandler+0xcac>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_DMA_IRQHandler+0xc62>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a14      	ldr	r2, [pc, #80]	@ (8007770 <HAL_DMA_IRQHandler+0xcb0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d128      	bne.n	8007774 <HAL_DMA_IRQHandler+0xcb4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0214 	bic.w	r2, r2, #20
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e027      	b.n	8007784 <HAL_DMA_IRQHandler+0xcc4>
 8007734:	40020010 	.word	0x40020010
 8007738:	40020028 	.word	0x40020028
 800773c:	40020040 	.word	0x40020040
 8007740:	40020058 	.word	0x40020058
 8007744:	40020070 	.word	0x40020070
 8007748:	40020088 	.word	0x40020088
 800774c:	400200a0 	.word	0x400200a0
 8007750:	400200b8 	.word	0x400200b8
 8007754:	40020410 	.word	0x40020410
 8007758:	40020428 	.word	0x40020428
 800775c:	40020440 	.word	0x40020440
 8007760:	40020458 	.word	0x40020458
 8007764:	40020470 	.word	0x40020470
 8007768:	40020488 	.word	0x40020488
 800776c:	400204a0 	.word	0x400204a0
 8007770:	400204b8 	.word	0x400204b8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 020a 	bic.w	r2, r2, #10
 8007782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8097 	beq.w	80078cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077a6:	e091      	b.n	80078cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2208      	movs	r2, #8
 80077b2:	409a      	lsls	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	4013      	ands	r3, r2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8088 	beq.w	80078ce <HAL_DMA_IRQHandler+0xe0e>
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8082 	beq.w	80078ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a41      	ldr	r2, [pc, #260]	@ (80078d4 <HAL_DMA_IRQHandler+0xe14>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d04a      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a3f      	ldr	r2, [pc, #252]	@ (80078d8 <HAL_DMA_IRQHandler+0xe18>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d045      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3e      	ldr	r2, [pc, #248]	@ (80078dc <HAL_DMA_IRQHandler+0xe1c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d040      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a3c      	ldr	r2, [pc, #240]	@ (80078e0 <HAL_DMA_IRQHandler+0xe20>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d03b      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a3b      	ldr	r2, [pc, #236]	@ (80078e4 <HAL_DMA_IRQHandler+0xe24>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d036      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a39      	ldr	r2, [pc, #228]	@ (80078e8 <HAL_DMA_IRQHandler+0xe28>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d031      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a38      	ldr	r2, [pc, #224]	@ (80078ec <HAL_DMA_IRQHandler+0xe2c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d02c      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a36      	ldr	r2, [pc, #216]	@ (80078f0 <HAL_DMA_IRQHandler+0xe30>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d027      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a35      	ldr	r2, [pc, #212]	@ (80078f4 <HAL_DMA_IRQHandler+0xe34>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d022      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a33      	ldr	r2, [pc, #204]	@ (80078f8 <HAL_DMA_IRQHandler+0xe38>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01d      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a32      	ldr	r2, [pc, #200]	@ (80078fc <HAL_DMA_IRQHandler+0xe3c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a30      	ldr	r2, [pc, #192]	@ (8007900 <HAL_DMA_IRQHandler+0xe40>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a2f      	ldr	r2, [pc, #188]	@ (8007904 <HAL_DMA_IRQHandler+0xe44>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a2d      	ldr	r2, [pc, #180]	@ (8007908 <HAL_DMA_IRQHandler+0xe48>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a2c      	ldr	r2, [pc, #176]	@ (800790c <HAL_DMA_IRQHandler+0xe4c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_DMA_IRQHandler+0xdaa>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2a      	ldr	r2, [pc, #168]	@ (8007910 <HAL_DMA_IRQHandler+0xe50>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d108      	bne.n	800787c <HAL_DMA_IRQHandler+0xdbc>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 021c 	bic.w	r2, r2, #28
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	e007      	b.n	800788c <HAL_DMA_IRQHandler+0xdcc>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 020e 	bic.w	r2, r2, #14
 800788a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2201      	movs	r2, #1
 8007896:	409a      	lsls	r2, r3
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
 80078c2:	e004      	b.n	80078ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80078c4:	bf00      	nop
 80078c6:	e002      	b.n	80078ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078c8:	bf00      	nop
 80078ca:	e000      	b.n	80078ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078ce:	3728      	adds	r7, #40	@ 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40020010 	.word	0x40020010
 80078d8:	40020028 	.word	0x40020028
 80078dc:	40020040 	.word	0x40020040
 80078e0:	40020058 	.word	0x40020058
 80078e4:	40020070 	.word	0x40020070
 80078e8:	40020088 	.word	0x40020088
 80078ec:	400200a0 	.word	0x400200a0
 80078f0:	400200b8 	.word	0x400200b8
 80078f4:	40020410 	.word	0x40020410
 80078f8:	40020428 	.word	0x40020428
 80078fc:	40020440 	.word	0x40020440
 8007900:	40020458 	.word	0x40020458
 8007904:	40020470 	.word	0x40020470
 8007908:	40020488 	.word	0x40020488
 800790c:	400204a0 	.word	0x400204a0
 8007910:	400204b8 	.word	0x400204b8

08007914 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007944:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a7f      	ldr	r2, [pc, #508]	@ (8007b48 <DMA_SetConfig+0x21c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d072      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a7d      	ldr	r2, [pc, #500]	@ (8007b4c <DMA_SetConfig+0x220>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d06d      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a7c      	ldr	r2, [pc, #496]	@ (8007b50 <DMA_SetConfig+0x224>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d068      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a7a      	ldr	r2, [pc, #488]	@ (8007b54 <DMA_SetConfig+0x228>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d063      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a79      	ldr	r2, [pc, #484]	@ (8007b58 <DMA_SetConfig+0x22c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d05e      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a77      	ldr	r2, [pc, #476]	@ (8007b5c <DMA_SetConfig+0x230>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d059      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a76      	ldr	r2, [pc, #472]	@ (8007b60 <DMA_SetConfig+0x234>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d054      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a74      	ldr	r2, [pc, #464]	@ (8007b64 <DMA_SetConfig+0x238>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d04f      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a73      	ldr	r2, [pc, #460]	@ (8007b68 <DMA_SetConfig+0x23c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d04a      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a71      	ldr	r2, [pc, #452]	@ (8007b6c <DMA_SetConfig+0x240>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d045      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a70      	ldr	r2, [pc, #448]	@ (8007b70 <DMA_SetConfig+0x244>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d040      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007b74 <DMA_SetConfig+0x248>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d03b      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a6d      	ldr	r2, [pc, #436]	@ (8007b78 <DMA_SetConfig+0x24c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d036      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a6b      	ldr	r2, [pc, #428]	@ (8007b7c <DMA_SetConfig+0x250>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d031      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a6a      	ldr	r2, [pc, #424]	@ (8007b80 <DMA_SetConfig+0x254>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d02c      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a68      	ldr	r2, [pc, #416]	@ (8007b84 <DMA_SetConfig+0x258>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d027      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a67      	ldr	r2, [pc, #412]	@ (8007b88 <DMA_SetConfig+0x25c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d022      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a65      	ldr	r2, [pc, #404]	@ (8007b8c <DMA_SetConfig+0x260>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d01d      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a64      	ldr	r2, [pc, #400]	@ (8007b90 <DMA_SetConfig+0x264>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d018      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a62      	ldr	r2, [pc, #392]	@ (8007b94 <DMA_SetConfig+0x268>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a61      	ldr	r2, [pc, #388]	@ (8007b98 <DMA_SetConfig+0x26c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00e      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a5f      	ldr	r2, [pc, #380]	@ (8007b9c <DMA_SetConfig+0x270>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a5e      	ldr	r2, [pc, #376]	@ (8007ba0 <DMA_SetConfig+0x274>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <DMA_SetConfig+0x10a>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a5c      	ldr	r2, [pc, #368]	@ (8007ba4 <DMA_SetConfig+0x278>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d101      	bne.n	8007a3a <DMA_SetConfig+0x10e>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <DMA_SetConfig+0x110>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00d      	beq.n	8007a5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007a48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007a5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a39      	ldr	r2, [pc, #228]	@ (8007b48 <DMA_SetConfig+0x21c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d04a      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a38      	ldr	r2, [pc, #224]	@ (8007b4c <DMA_SetConfig+0x220>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d045      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a36      	ldr	r2, [pc, #216]	@ (8007b50 <DMA_SetConfig+0x224>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d040      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a35      	ldr	r2, [pc, #212]	@ (8007b54 <DMA_SetConfig+0x228>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d03b      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a33      	ldr	r2, [pc, #204]	@ (8007b58 <DMA_SetConfig+0x22c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d036      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a32      	ldr	r2, [pc, #200]	@ (8007b5c <DMA_SetConfig+0x230>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d031      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a30      	ldr	r2, [pc, #192]	@ (8007b60 <DMA_SetConfig+0x234>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d02c      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8007b64 <DMA_SetConfig+0x238>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d027      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b68 <DMA_SetConfig+0x23c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d022      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a2c      	ldr	r2, [pc, #176]	@ (8007b6c <DMA_SetConfig+0x240>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d01d      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8007b70 <DMA_SetConfig+0x244>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d018      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a29      	ldr	r2, [pc, #164]	@ (8007b74 <DMA_SetConfig+0x248>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d013      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a27      	ldr	r2, [pc, #156]	@ (8007b78 <DMA_SetConfig+0x24c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00e      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a26      	ldr	r2, [pc, #152]	@ (8007b7c <DMA_SetConfig+0x250>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d009      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a24      	ldr	r2, [pc, #144]	@ (8007b80 <DMA_SetConfig+0x254>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d004      	beq.n	8007afc <DMA_SetConfig+0x1d0>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a23      	ldr	r2, [pc, #140]	@ (8007b84 <DMA_SetConfig+0x258>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d101      	bne.n	8007b00 <DMA_SetConfig+0x1d4>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e000      	b.n	8007b02 <DMA_SetConfig+0x1d6>
 8007b00:	2300      	movs	r3, #0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d059      	beq.n	8007bba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	223f      	movs	r2, #63	@ 0x3f
 8007b10:	409a      	lsls	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007b24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b40      	cmp	r3, #64	@ 0x40
 8007b34:	d138      	bne.n	8007ba8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b46:	e086      	b.n	8007c56 <DMA_SetConfig+0x32a>
 8007b48:	40020010 	.word	0x40020010
 8007b4c:	40020028 	.word	0x40020028
 8007b50:	40020040 	.word	0x40020040
 8007b54:	40020058 	.word	0x40020058
 8007b58:	40020070 	.word	0x40020070
 8007b5c:	40020088 	.word	0x40020088
 8007b60:	400200a0 	.word	0x400200a0
 8007b64:	400200b8 	.word	0x400200b8
 8007b68:	40020410 	.word	0x40020410
 8007b6c:	40020428 	.word	0x40020428
 8007b70:	40020440 	.word	0x40020440
 8007b74:	40020458 	.word	0x40020458
 8007b78:	40020470 	.word	0x40020470
 8007b7c:	40020488 	.word	0x40020488
 8007b80:	400204a0 	.word	0x400204a0
 8007b84:	400204b8 	.word	0x400204b8
 8007b88:	58025408 	.word	0x58025408
 8007b8c:	5802541c 	.word	0x5802541c
 8007b90:	58025430 	.word	0x58025430
 8007b94:	58025444 	.word	0x58025444
 8007b98:	58025458 	.word	0x58025458
 8007b9c:	5802546c 	.word	0x5802546c
 8007ba0:	58025480 	.word	0x58025480
 8007ba4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	60da      	str	r2, [r3, #12]
}
 8007bb8:	e04d      	b.n	8007c56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a29      	ldr	r2, [pc, #164]	@ (8007c64 <DMA_SetConfig+0x338>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d022      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a27      	ldr	r2, [pc, #156]	@ (8007c68 <DMA_SetConfig+0x33c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01d      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a26      	ldr	r2, [pc, #152]	@ (8007c6c <DMA_SetConfig+0x340>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d018      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a24      	ldr	r2, [pc, #144]	@ (8007c70 <DMA_SetConfig+0x344>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a23      	ldr	r2, [pc, #140]	@ (8007c74 <DMA_SetConfig+0x348>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00e      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a21      	ldr	r2, [pc, #132]	@ (8007c78 <DMA_SetConfig+0x34c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d009      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a20      	ldr	r2, [pc, #128]	@ (8007c7c <DMA_SetConfig+0x350>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <DMA_SetConfig+0x2de>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a1e      	ldr	r2, [pc, #120]	@ (8007c80 <DMA_SetConfig+0x354>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d101      	bne.n	8007c0e <DMA_SetConfig+0x2e2>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <DMA_SetConfig+0x2e4>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d020      	beq.n	8007c56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c18:	f003 031f 	and.w	r3, r3, #31
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	409a      	lsls	r2, r3
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b40      	cmp	r3, #64	@ 0x40
 8007c32:	d108      	bne.n	8007c46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	60da      	str	r2, [r3, #12]
}
 8007c44:	e007      	b.n	8007c56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	60da      	str	r2, [r3, #12]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	58025408 	.word	0x58025408
 8007c68:	5802541c 	.word	0x5802541c
 8007c6c:	58025430 	.word	0x58025430
 8007c70:	58025444 	.word	0x58025444
 8007c74:	58025458 	.word	0x58025458
 8007c78:	5802546c 	.word	0x5802546c
 8007c7c:	58025480 	.word	0x58025480
 8007c80:	58025494 	.word	0x58025494

08007c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a42      	ldr	r2, [pc, #264]	@ (8007d9c <DMA_CalcBaseAndBitshift+0x118>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d04a      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a41      	ldr	r2, [pc, #260]	@ (8007da0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d045      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8007da4 <DMA_CalcBaseAndBitshift+0x120>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d040      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a3e      	ldr	r2, [pc, #248]	@ (8007da8 <DMA_CalcBaseAndBitshift+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d03b      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8007dac <DMA_CalcBaseAndBitshift+0x128>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d036      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8007db0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d031      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a39      	ldr	r2, [pc, #228]	@ (8007db4 <DMA_CalcBaseAndBitshift+0x130>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d02c      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a38      	ldr	r2, [pc, #224]	@ (8007db8 <DMA_CalcBaseAndBitshift+0x134>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d027      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a36      	ldr	r2, [pc, #216]	@ (8007dbc <DMA_CalcBaseAndBitshift+0x138>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d022      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a35      	ldr	r2, [pc, #212]	@ (8007dc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d01d      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a33      	ldr	r2, [pc, #204]	@ (8007dc4 <DMA_CalcBaseAndBitshift+0x140>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d018      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a32      	ldr	r2, [pc, #200]	@ (8007dc8 <DMA_CalcBaseAndBitshift+0x144>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d013      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a30      	ldr	r2, [pc, #192]	@ (8007dcc <DMA_CalcBaseAndBitshift+0x148>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00e      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2f      	ldr	r2, [pc, #188]	@ (8007dd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d009      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8007dd4 <DMA_CalcBaseAndBitshift+0x150>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <DMA_CalcBaseAndBitshift+0xa8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <DMA_CalcBaseAndBitshift+0x154>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d101      	bne.n	8007d30 <DMA_CalcBaseAndBitshift+0xac>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <DMA_CalcBaseAndBitshift+0xae>
 8007d30:	2300      	movs	r3, #0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d024      	beq.n	8007d80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	3b10      	subs	r3, #16
 8007d3e:	4a27      	ldr	r2, [pc, #156]	@ (8007ddc <DMA_CalcBaseAndBitshift+0x158>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	091b      	lsrs	r3, r3, #4
 8007d46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	4a24      	ldr	r2, [pc, #144]	@ (8007de0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007d50:	5cd3      	ldrb	r3, [r2, r3]
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d908      	bls.n	8007d70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	4b1f      	ldr	r3, [pc, #124]	@ (8007de4 <DMA_CalcBaseAndBitshift+0x160>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d6e:	e00d      	b.n	8007d8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b1b      	ldr	r3, [pc, #108]	@ (8007de4 <DMA_CalcBaseAndBitshift+0x160>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d7e:	e005      	b.n	8007d8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	40020010 	.word	0x40020010
 8007da0:	40020028 	.word	0x40020028
 8007da4:	40020040 	.word	0x40020040
 8007da8:	40020058 	.word	0x40020058
 8007dac:	40020070 	.word	0x40020070
 8007db0:	40020088 	.word	0x40020088
 8007db4:	400200a0 	.word	0x400200a0
 8007db8:	400200b8 	.word	0x400200b8
 8007dbc:	40020410 	.word	0x40020410
 8007dc0:	40020428 	.word	0x40020428
 8007dc4:	40020440 	.word	0x40020440
 8007dc8:	40020458 	.word	0x40020458
 8007dcc:	40020470 	.word	0x40020470
 8007dd0:	40020488 	.word	0x40020488
 8007dd4:	400204a0 	.word	0x400204a0
 8007dd8:	400204b8 	.word	0x400204b8
 8007ddc:	aaaaaaab 	.word	0xaaaaaaab
 8007de0:	08011820 	.word	0x08011820
 8007de4:	fffffc00 	.word	0xfffffc00

08007de8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d120      	bne.n	8007e3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d858      	bhi.n	8007eb6 <DMA_CheckFifoParam+0xce>
 8007e04:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <DMA_CheckFifoParam+0x24>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e1d 	.word	0x08007e1d
 8007e10:	08007e2f 	.word	0x08007e2f
 8007e14:	08007e1d 	.word	0x08007e1d
 8007e18:	08007eb7 	.word	0x08007eb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d048      	beq.n	8007eba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e2c:	e045      	b.n	8007eba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007e36:	d142      	bne.n	8007ebe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e3c:	e03f      	b.n	8007ebe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e46:	d123      	bne.n	8007e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d838      	bhi.n	8007ec2 <DMA_CheckFifoParam+0xda>
 8007e50:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <DMA_CheckFifoParam+0x70>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e69 	.word	0x08007e69
 8007e5c:	08007e6f 	.word	0x08007e6f
 8007e60:	08007e69 	.word	0x08007e69
 8007e64:	08007e81 	.word	0x08007e81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
        break;
 8007e6c:	e030      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d025      	beq.n	8007ec6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e7e:	e022      	b.n	8007ec6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007e88:	d11f      	bne.n	8007eca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e8e:	e01c      	b.n	8007eca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d902      	bls.n	8007e9e <DMA_CheckFifoParam+0xb6>
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d003      	beq.n	8007ea4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e9c:	e018      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8007ea2:	e015      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00e      	beq.n	8007ece <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb4:	e00b      	b.n	8007ece <DMA_CheckFifoParam+0xe6>
        break;
 8007eb6:	bf00      	nop
 8007eb8:	e00a      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8007eba:	bf00      	nop
 8007ebc:	e008      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8007ebe:	bf00      	nop
 8007ec0:	e006      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8007ec2:	bf00      	nop
 8007ec4:	e004      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8007ec6:	bf00      	nop
 8007ec8:	e002      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8007eca:	bf00      	nop
 8007ecc:	e000      	b.n	8007ed0 <DMA_CheckFifoParam+0xe8>
    break;
 8007ece:	bf00      	nop
    }
  }

  return status;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop

08007ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a38      	ldr	r2, [pc, #224]	@ (8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d022      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a36      	ldr	r2, [pc, #216]	@ (8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d01d      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a35      	ldr	r2, [pc, #212]	@ (8007fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a33      	ldr	r2, [pc, #204]	@ (8007fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a32      	ldr	r2, [pc, #200]	@ (8007fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a30      	ldr	r2, [pc, #192]	@ (8007fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8007fec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d101      	bne.n	8007f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007f42:	2300      	movs	r3, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d01a      	beq.n	8007f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	3b08      	subs	r3, #8
 8007f50:	4a28      	ldr	r2, [pc, #160]	@ (8007ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	091b      	lsrs	r3, r3, #4
 8007f58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4b26      	ldr	r3, [pc, #152]	@ (8007ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a24      	ldr	r2, [pc, #144]	@ (8007ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2201      	movs	r2, #1
 8007f76:	409a      	lsls	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f7c:	e024      	b.n	8007fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	3b10      	subs	r3, #16
 8007f86:	4a1e      	ldr	r2, [pc, #120]	@ (8008000 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	091b      	lsrs	r3, r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4a1c      	ldr	r2, [pc, #112]	@ (8008004 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d806      	bhi.n	8007fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d902      	bls.n	8007fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4b18      	ldr	r3, [pc, #96]	@ (800800c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	@ (8008010 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007fb8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007fc8:	bf00      	nop
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	58025408 	.word	0x58025408
 8007fd8:	5802541c 	.word	0x5802541c
 8007fdc:	58025430 	.word	0x58025430
 8007fe0:	58025444 	.word	0x58025444
 8007fe4:	58025458 	.word	0x58025458
 8007fe8:	5802546c 	.word	0x5802546c
 8007fec:	58025480 	.word	0x58025480
 8007ff0:	58025494 	.word	0x58025494
 8007ff4:	cccccccd 	.word	0xcccccccd
 8007ff8:	16009600 	.word	0x16009600
 8007ffc:	58025880 	.word	0x58025880
 8008000:	aaaaaaab 	.word	0xaaaaaaab
 8008004:	400204b8 	.word	0x400204b8
 8008008:	4002040f 	.word	0x4002040f
 800800c:	10008200 	.word	0x10008200
 8008010:	40020880 	.word	0x40020880

08008014 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d04a      	beq.n	80080c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d847      	bhi.n	80080c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a25      	ldr	r2, [pc, #148]	@ (80080cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d022      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a24      	ldr	r2, [pc, #144]	@ (80080d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d01d      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a22      	ldr	r2, [pc, #136]	@ (80080d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a21      	ldr	r2, [pc, #132]	@ (80080d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1f      	ldr	r2, [pc, #124]	@ (80080dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1e      	ldr	r2, [pc, #120]	@ (80080e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1c      	ldr	r2, [pc, #112]	@ (80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1b      	ldr	r2, [pc, #108]	@ (80080e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4b17      	ldr	r3, [pc, #92]	@ (80080ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a15      	ldr	r2, [pc, #84]	@ (80080f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800809c:	671a      	str	r2, [r3, #112]	@ 0x70
 800809e:	e009      	b.n	80080b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4b14      	ldr	r3, [pc, #80]	@ (80080f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a11      	ldr	r2, [pc, #68]	@ (80080f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80080b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	2201      	movs	r2, #1
 80080ba:	409a      	lsls	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	58025408 	.word	0x58025408
 80080d0:	5802541c 	.word	0x5802541c
 80080d4:	58025430 	.word	0x58025430
 80080d8:	58025444 	.word	0x58025444
 80080dc:	58025458 	.word	0x58025458
 80080e0:	5802546c 	.word	0x5802546c
 80080e4:	58025480 	.word	0x58025480
 80080e8:	58025494 	.word	0x58025494
 80080ec:	1600963f 	.word	0x1600963f
 80080f0:	58025940 	.word	0x58025940
 80080f4:	1000823f 	.word	0x1000823f
 80080f8:	40020940 	.word	0x40020940

080080fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e0c8      	b.n	80082a0 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fa fc04 	bl	8002924 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2223      	movs	r2, #35	@ 0x23
 8008120:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008122:	4b61      	ldr	r3, [pc, #388]	@ (80082a8 <HAL_ETH_Init+0x1ac>)
 8008124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008128:	4a5f      	ldr	r2, [pc, #380]	@ (80082a8 <HAL_ETH_Init+0x1ac>)
 800812a:	f043 0302 	orr.w	r3, r3, #2
 800812e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008132:	4b5d      	ldr	r3, [pc, #372]	@ (80082a8 <HAL_ETH_Init+0x1ac>)
 8008134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	60bb      	str	r3, [r7, #8]
 800813e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7a1b      	ldrb	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008148:	2000      	movs	r0, #0
 800814a:	f7fb fd01 	bl	8003b50 <HAL_SYSCFG_ETHInterfaceSelect>
 800814e:	e003      	b.n	8008158 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8008150:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008154:	f7fb fcfc 	bl	8003b50 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800816e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008170:	f7fb fcbe 	bl	8003af0 <HAL_GetTick>
 8008174:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008176:	e00f      	b.n	8008198 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8008178:	f7fb fcba 	bl	8003af0 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008186:	d907      	bls.n	8008198 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2204      	movs	r2, #4
 800818c:	675a      	str	r2, [r3, #116]	@ 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	22e0      	movs	r2, #224	@ 0xe0
 8008192:	66da      	str	r2, [r3, #108]	@ 0x6c
      /* Return Error */
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e083      	b.n	80082a0 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e6      	bne.n	8008178 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fac2 	bl	8008734 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80081b0:	f001 fdc2 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 80081b4:	4603      	mov	r3, r0
 80081b6:	4a3d      	ldr	r2, [pc, #244]	@ (80082ac <HAL_ETH_Init+0x1b0>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	0c9a      	lsrs	r2, r3, #18
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3a01      	subs	r2, #1
 80081c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fa15 	bl	80085f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80081da:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081ea:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	675a      	str	r2, [r3, #116]	@ 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	22e0      	movs	r2, #224	@ 0xe0
 8008204:	66da      	str	r2, [r3, #108]	@ 0x6c
    /* Return Error */
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e04a      	b.n	80082a0 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008212:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8008216:	4b26      	ldr	r3, [pc, #152]	@ (80082b0 <HAL_ETH_Init+0x1b4>)
 8008218:	4013      	ands	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6952      	ldr	r2, [r2, #20]
 800821e:	0051      	lsls	r1, r2, #1
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	430b      	orrs	r3, r1
 8008226:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800822a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fad8 	bl	80087e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb1e 	bl	8008876 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	3305      	adds	r3, #5
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	021a      	lsls	r2, r3, #8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	3304      	adds	r3, #4
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	4619      	mov	r1, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	3303      	adds	r3, #3
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	061a      	lsls	r2, r3, #24
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	3302      	adds	r3, #2
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	3301      	adds	r3, #1
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008278:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008286:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008288:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	675a      	str	r2, [r3, #116]	@ 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2210      	movs	r2, #16
 8008296:	66da      	str	r2, [r3, #108]	@ 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2210      	movs	r2, #16
 800829c:	671a      	str	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	58024400 	.word	0x58024400
 80082ac:	431bde83 	.word	0x431bde83
 80082b0:	ffff8001 	.word	0xffff8001

080082b4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80082c6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	791b      	ldrb	r3, [r3, #4]
 80082cc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80082ce:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	7b1b      	ldrb	r3, [r3, #12]
 80082d4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80082d6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	7b5b      	ldrb	r3, [r3, #13]
 80082dc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80082de:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	7b9b      	ldrb	r3, [r3, #14]
 80082e4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80082e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	7bdb      	ldrb	r3, [r3, #15]
 80082ec:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80082ee:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	d102      	bne.n	80082fe <ETH_SetMACConfig+0x4a>
 80082f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80082fc:	e000      	b.n	8008300 <ETH_SetMACConfig+0x4c>
 80082fe:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008300:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	7c52      	ldrb	r2, [r2, #17]
 8008306:	2a00      	cmp	r2, #0
 8008308:	d102      	bne.n	8008310 <ETH_SetMACConfig+0x5c>
 800830a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800830e:	e000      	b.n	8008312 <ETH_SetMACConfig+0x5e>
 8008310:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008312:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	7c9b      	ldrb	r3, [r3, #18]
 8008318:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800831a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008320:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8008326:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	7f1b      	ldrb	r3, [r3, #28]
 800832c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800832e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	7f5b      	ldrb	r3, [r3, #29]
 8008334:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008336:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	7f92      	ldrb	r2, [r2, #30]
 800833c:	2a00      	cmp	r2, #0
 800833e:	d102      	bne.n	8008346 <ETH_SetMACConfig+0x92>
 8008340:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008344:	e000      	b.n	8008348 <ETH_SetMACConfig+0x94>
 8008346:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008348:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	7fdb      	ldrb	r3, [r3, #31]
 800834e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008350:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008358:	2a00      	cmp	r2, #0
 800835a:	d102      	bne.n	8008362 <ETH_SetMACConfig+0xae>
 800835c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008360:	e000      	b.n	8008364 <ETH_SetMACConfig+0xb0>
 8008362:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008364:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800836a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008372:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8008374:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval =(macconf->InterPacketGapVal |
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	4b56      	ldr	r3, [pc, #344]	@ (80084e0 <ETH_SetMACConfig+0x22c>)
 8008386:	4013      	ands	r3, r2
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	430b      	orrs	r3, r1
 8008390:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008396:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800839e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80083a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80083aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80083b2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80083b4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80083bc:	2a00      	cmp	r2, #0
 80083be:	d102      	bne.n	80083c6 <ETH_SetMACConfig+0x112>
 80083c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80083c4:	e000      	b.n	80083c8 <ETH_SetMACConfig+0x114>
 80083c6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80083c8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	4b42      	ldr	r3, [pc, #264]	@ (80084e4 <ETH_SetMACConfig+0x230>)
 80083da:	4013      	ands	r3, r2
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	68f9      	ldr	r1, [r7, #12]
 80083e2:	430b      	orrs	r3, r1
 80083e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	4b3a      	ldr	r3, [pc, #232]	@ (80084e8 <ETH_SetMACConfig+0x234>)
 80083fe:	4013      	ands	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	68f9      	ldr	r1, [r7, #12]
 8008406:	430b      	orrs	r3, r1
 8008408:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8008410:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008416:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800841e:	2a00      	cmp	r2, #0
 8008420:	d101      	bne.n	8008426 <ETH_SetMACConfig+0x172>
 8008422:	2280      	movs	r2, #128	@ 0x80
 8008424:	e000      	b.n	8008428 <ETH_SetMACConfig+0x174>
 8008426:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008428:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800843a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800843e:	4013      	ands	r3, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	430b      	orrs	r3, r1
 8008448:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008450:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8008458:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008466:	f023 0103 	bic.w	r1, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	430a      	orrs	r2, r1
 8008472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800847e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800849a:	2a00      	cmp	r2, #0
 800849c:	d101      	bne.n	80084a2 <ETH_SetMACConfig+0x1ee>
 800849e:	2240      	movs	r2, #64	@ 0x40
 80084a0:	e000      	b.n	80084a4 <ETH_SetMACConfig+0x1f0>
 80084a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80084a4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80084ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80084ae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80084b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80084c4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	00048083 	.word	0x00048083
 80084e4:	c0f88000 	.word	0xc0f88000
 80084e8:	fffffef0 	.word	0xfffffef0

080084ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4b38      	ldr	r3, [pc, #224]	@ (80085e4 <ETH_SetDMAConfig+0xf8>)
 8008502:	4013      	ands	r3, r2
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	6811      	ldr	r1, [r2, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	430b      	orrs	r3, r1
 800850e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008512:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	791b      	ldrb	r3, [r3, #4]
 8008518:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800851e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	7b1b      	ldrb	r3, [r3, #12]
 8008524:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	4b2c      	ldr	r3, [pc, #176]	@ (80085e8 <ETH_SetDMAConfig+0xfc>)
 8008536:	4013      	ands	r3, r2
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	68f9      	ldr	r1, [r7, #12]
 800853e:	430b      	orrs	r3, r1
 8008540:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008544:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	7b5b      	ldrb	r3, [r3, #13]
 800854a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800855c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8008560:	4b22      	ldr	r3, [pc, #136]	@ (80085ec <ETH_SetDMAConfig+0x100>)
 8008562:	4013      	ands	r3, r2
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	68f9      	ldr	r1, [r7, #12]
 800856a:	430b      	orrs	r3, r1
 800856c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008570:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	7d1b      	ldrb	r3, [r3, #20]
 800857c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800857e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	7f5b      	ldrb	r3, [r3, #29]
 8008584:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008592:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8008596:	4b16      	ldr	r3, [pc, #88]	@ (80085f0 <ETH_SetDMAConfig+0x104>)
 8008598:	4013      	ands	r3, r2
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	430b      	orrs	r3, r1
 80085a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80085a6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	7f1b      	ldrb	r3, [r3, #28]
 80085ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80085c4:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <ETH_SetDMAConfig+0x108>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	68f9      	ldr	r1, [r7, #12]
 80085ce:	430b      	orrs	r3, r1
 80085d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80085d4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	ffff87fd 	.word	0xffff87fd
 80085e8:	ffff2ffe 	.word	0xffff2ffe
 80085ec:	fffec000 	.word	0xfffec000
 80085f0:	ffc0efef 	.word	0xffc0efef
 80085f4:	7fc0ffff 	.word	0x7fc0ffff

080085f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b0a4      	sub	sp, #144	@ 0x90
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008600:	2301      	movs	r3, #1
 8008602:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008606:	2300      	movs	r3, #0
 8008608:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800860a:	2300      	movs	r3, #0
 800860c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008610:	2300      	movs	r3, #0
 8008612:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008628:	2300      	movs	r3, #0
 800862a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008638:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800863a:	2300      	movs	r3, #0
 800863c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008640:	2300      	movs	r3, #0
 8008642:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008644:	2300      	movs	r3, #0
 8008646:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800864a:	2300      	movs	r3, #0
 800864c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008650:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8008654:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008656:	2300      	movs	r3, #0
 8008658:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800865c:	2300      	movs	r3, #0
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008666:	2300      	movs	r3, #0
 8008668:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008672:	2300      	movs	r3, #0
 8008674:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008676:	2300      	movs	r3, #0
 8008678:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800867a:	2300      	movs	r3, #0
 800867c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800867e:	2300      	movs	r3, #0
 8008680:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008684:	2300      	movs	r3, #0
 8008686:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008690:	2320      	movs	r3, #32
 8008692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800869c:	2300      	movs	r3, #0
 800869e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80086a2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80086a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80086a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80086ac:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80086b4:	2302      	movs	r3, #2
 80086b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80086ba:	2300      	movs	r3, #0
 80086bc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80086d2:	2300      	movs	r3, #0
 80086d4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80086dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fde6 	bl	80082b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80086e8:	2301      	movs	r3, #1
 80086ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80086ec:	2301      	movs	r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80086fe:	2300      	movs	r3, #0
 8008700:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008702:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008706:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008708:	2300      	movs	r3, #0
 800870a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800870c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008710:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008712:	2300      	movs	r3, #0
 8008714:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008718:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800871c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fee1 	bl	80084ec <ETH_SetDMAConfig>
}
 800872a:	bf00      	nop
 800872c:	3790      	adds	r7, #144	@ 0x90
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008744:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800874c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800874e:	f001 faf3 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8008752:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4a1e      	ldr	r2, [pc, #120]	@ (80087d0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d908      	bls.n	800876e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4a1d      	ldr	r2, [pc, #116]	@ (80087d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d804      	bhi.n	800876e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	e027      	b.n	80087be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4a18      	ldr	r2, [pc, #96]	@ (80087d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d908      	bls.n	8008788 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4a17      	ldr	r2, [pc, #92]	@ (80087d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d204      	bcs.n	8008788 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	e01a      	b.n	80087be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4a13      	ldr	r2, [pc, #76]	@ (80087d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d303      	bcc.n	8008798 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4a12      	ldr	r2, [pc, #72]	@ (80087dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d911      	bls.n	80087bc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4a10      	ldr	r2, [pc, #64]	@ (80087dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d908      	bls.n	80087b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4a0f      	ldr	r2, [pc, #60]	@ (80087e0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d804      	bhi.n	80087b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e005      	b.n	80087be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e000      	b.n	80087be <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80087bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	01312cff 	.word	0x01312cff
 80087d4:	02160ebf 	.word	0x02160ebf
 80087d8:	03938700 	.word	0x03938700
 80087dc:	05f5e0ff 	.word	0x05f5e0ff
 80087e0:	08f0d17f 	.word	0x08f0d17f

080087e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e01d      	b.n	800882e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68d9      	ldr	r1, [r3, #12]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	440b      	add	r3, r1
 8008802:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2200      	movs	r2, #0
 800881a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	3206      	adds	r2, #6
 8008824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b03      	cmp	r3, #3
 8008832:	d9de      	bls.n	80087f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008842:	461a      	mov	r2, r3
 8008844:	2303      	movs	r3, #3
 8008846:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008856:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008866:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800886a:	bf00      	nop
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008876:	b480      	push	{r7}
 8008878:	b085      	sub	sp, #20
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e024      	b.n	80088ce <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6919      	ldr	r1, [r3, #16]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4613      	mov	r3, r2
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	4413      	add	r3, r2
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	440b      	add	r3, r1
 8008894:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2200      	movs	r2, #0
 80088a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2200      	movs	r2, #0
 80088b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3310      	adds	r3, #16
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d9d7      	bls.n	8008884 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	655a      	str	r2, [r3, #84]	@ 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	659a      	str	r2, [r3, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	665a      	str	r2, [r3, #100]	@ 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088fa:	461a      	mov	r2, r3
 80088fc:	2303      	movs	r3, #3
 80088fe:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800890e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008922:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008934:	b480      	push	{r7}
 8008936:	b089      	sub	sp, #36	@ 0x24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008942:	4b86      	ldr	r3, [pc, #536]	@ (8008b5c <HAL_GPIO_Init+0x228>)
 8008944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008946:	e18c      	b.n	8008c62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	2101      	movs	r1, #1
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	fa01 f303 	lsl.w	r3, r1, r3
 8008954:	4013      	ands	r3, r2
 8008956:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 817e 	beq.w	8008c5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	2b01      	cmp	r3, #1
 800896a:	d005      	beq.n	8008978 <HAL_GPIO_Init+0x44>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d130      	bne.n	80089da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	2203      	movs	r2, #3
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	43db      	mvns	r3, r3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	4013      	ands	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	4313      	orrs	r3, r2
 80089a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089ae:	2201      	movs	r2, #1
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	fa02 f303 	lsl.w	r3, r2, r3
 80089b6:	43db      	mvns	r3, r3
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	4013      	ands	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	091b      	lsrs	r3, r3, #4
 80089c4:	f003 0201 	and.w	r2, r3, #1
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d017      	beq.n	8008a16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	2203      	movs	r2, #3
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	43db      	mvns	r3, r3
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	4013      	ands	r3, r2
 80089fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d123      	bne.n	8008a6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	08da      	lsrs	r2, r3, #3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3208      	adds	r2, #8
 8008a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	220f      	movs	r2, #15
 8008a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3e:	43db      	mvns	r3, r3
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	4013      	ands	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	69ba      	ldr	r2, [r7, #24]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	08da      	lsrs	r2, r3, #3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3208      	adds	r2, #8
 8008a64:	69b9      	ldr	r1, [r7, #24]
 8008a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	2203      	movs	r2, #3
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f003 0203 	and.w	r2, r3, #3
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 80d8 	beq.w	8008c5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aac:	4b2c      	ldr	r3, [pc, #176]	@ (8008b60 <HAL_GPIO_Init+0x22c>)
 8008aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b60 <HAL_GPIO_Init+0x22c>)
 8008ab4:	f043 0302 	orr.w	r3, r3, #2
 8008ab8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008abc:	4b28      	ldr	r3, [pc, #160]	@ (8008b60 <HAL_GPIO_Init+0x22c>)
 8008abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008aca:	4a26      	ldr	r2, [pc, #152]	@ (8008b64 <HAL_GPIO_Init+0x230>)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	089b      	lsrs	r3, r3, #2
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	220f      	movs	r2, #15
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	43db      	mvns	r3, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	4013      	ands	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b68 <HAL_GPIO_Init+0x234>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d04a      	beq.n	8008b8c <HAL_GPIO_Init+0x258>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b6c <HAL_GPIO_Init+0x238>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d02b      	beq.n	8008b56 <HAL_GPIO_Init+0x222>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	@ (8008b70 <HAL_GPIO_Init+0x23c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d025      	beq.n	8008b52 <HAL_GPIO_Init+0x21e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a1a      	ldr	r2, [pc, #104]	@ (8008b74 <HAL_GPIO_Init+0x240>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01f      	beq.n	8008b4e <HAL_GPIO_Init+0x21a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a19      	ldr	r2, [pc, #100]	@ (8008b78 <HAL_GPIO_Init+0x244>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d019      	beq.n	8008b4a <HAL_GPIO_Init+0x216>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a18      	ldr	r2, [pc, #96]	@ (8008b7c <HAL_GPIO_Init+0x248>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <HAL_GPIO_Init+0x212>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a17      	ldr	r2, [pc, #92]	@ (8008b80 <HAL_GPIO_Init+0x24c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00d      	beq.n	8008b42 <HAL_GPIO_Init+0x20e>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a16      	ldr	r2, [pc, #88]	@ (8008b84 <HAL_GPIO_Init+0x250>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d007      	beq.n	8008b3e <HAL_GPIO_Init+0x20a>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a15      	ldr	r2, [pc, #84]	@ (8008b88 <HAL_GPIO_Init+0x254>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d101      	bne.n	8008b3a <HAL_GPIO_Init+0x206>
 8008b36:	2309      	movs	r3, #9
 8008b38:	e029      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b3a:	230a      	movs	r3, #10
 8008b3c:	e027      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b3e:	2307      	movs	r3, #7
 8008b40:	e025      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b42:	2306      	movs	r3, #6
 8008b44:	e023      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b46:	2305      	movs	r3, #5
 8008b48:	e021      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	e01f      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e01d      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e01b      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e019      	b.n	8008b8e <HAL_GPIO_Init+0x25a>
 8008b5a:	bf00      	nop
 8008b5c:	58000080 	.word	0x58000080
 8008b60:	58024400 	.word	0x58024400
 8008b64:	58000400 	.word	0x58000400
 8008b68:	58020000 	.word	0x58020000
 8008b6c:	58020400 	.word	0x58020400
 8008b70:	58020800 	.word	0x58020800
 8008b74:	58020c00 	.word	0x58020c00
 8008b78:	58021000 	.word	0x58021000
 8008b7c:	58021400 	.word	0x58021400
 8008b80:	58021800 	.word	0x58021800
 8008b84:	58021c00 	.word	0x58021c00
 8008b88:	58022400 	.word	0x58022400
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	f002 0203 	and.w	r2, r2, #3
 8008b94:	0092      	lsls	r2, r2, #2
 8008b96:	4093      	lsls	r3, r2
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b9e:	4938      	ldr	r1, [pc, #224]	@ (8008c80 <HAL_GPIO_Init+0x34c>)
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	089b      	lsrs	r3, r3, #2
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	4013      	ands	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	43db      	mvns	r3, r3
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	4013      	ands	r3, r2
 8008c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	43db      	mvns	r3, r3
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f47f ae6b 	bne.w	8008948 <HAL_GPIO_Init+0x14>
  }
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	3724      	adds	r7, #36	@ 0x24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	58000400 	.word	0x58000400

08008c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	807b      	strh	r3, [r7, #2]
 8008c90:	4613      	mov	r3, r2
 8008c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c94:	787b      	ldrb	r3, [r7, #1]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c9a:	887a      	ldrh	r2, [r7, #2]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ca0:	e003      	b.n	8008caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	041a      	lsls	r2, r3, #16
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	619a      	str	r2, [r3, #24]
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
	...

08008cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e07f      	b.n	8008dca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d106      	bne.n	8008ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7f9 fecc 	bl	8002a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2224      	movs	r2, #36	@ 0x24
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0201 	bic.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d107      	bne.n	8008d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d2e:	609a      	str	r2, [r3, #8]
 8008d30:	e006      	b.n	8008d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d104      	bne.n	8008d52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6859      	ldr	r1, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd4 <HAL_I2C_Init+0x11c>)
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691a      	ldr	r2, [r3, #16]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69d9      	ldr	r1, [r3, #28]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	02008000 	.word	0x02008000

08008dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d138      	bne.n	8008e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e032      	b.n	8008e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2224      	movs	r2, #36	@ 0x24
 8008e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0201 	bic.w	r2, r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e000      	b.n	8008e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e60:	2302      	movs	r3, #2
  }
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b085      	sub	sp, #20
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d139      	bne.n	8008ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e033      	b.n	8008efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2224      	movs	r2, #36	@ 0x24
 8008e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e000      	b.n	8008efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
  }
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f10:	4b19      	ldr	r3, [pc, #100]	@ (8008f78 <HAL_PWREx_ConfigSupply+0x70>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d00a      	beq.n	8008f32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f1c:	4b16      	ldr	r3, [pc, #88]	@ (8008f78 <HAL_PWREx_ConfigSupply+0x70>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d001      	beq.n	8008f2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e01f      	b.n	8008f6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e01d      	b.n	8008f6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f32:	4b11      	ldr	r3, [pc, #68]	@ (8008f78 <HAL_PWREx_ConfigSupply+0x70>)
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f023 0207 	bic.w	r2, r3, #7
 8008f3a:	490f      	ldr	r1, [pc, #60]	@ (8008f78 <HAL_PWREx_ConfigSupply+0x70>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008f42:	f7fa fdd5 	bl	8003af0 <HAL_GetTick>
 8008f46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f48:	e009      	b.n	8008f5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f4a:	f7fa fdd1 	bl	8003af0 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f58:	d901      	bls.n	8008f5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e007      	b.n	8008f6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f5e:	4b06      	ldr	r3, [pc, #24]	@ (8008f78 <HAL_PWREx_ConfigSupply+0x70>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f6a:	d1ee      	bne.n	8008f4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	58024800 	.word	0x58024800

08008f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08c      	sub	sp, #48	@ 0x30
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e39d      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 8087 	beq.w	80090aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f9c:	4b88      	ldr	r3, [pc, #544]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fa6:	4b86      	ldr	r3, [pc, #536]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d007      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x46>
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	2b18      	cmp	r3, #24
 8008fb6:	d110      	bne.n	8008fda <HAL_RCC_OscConfig+0x5e>
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d10b      	bne.n	8008fda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d06c      	beq.n	80090a8 <HAL_RCC_OscConfig+0x12c>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d168      	bne.n	80090a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e377      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fe2:	d106      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x76>
 8008fe4:	4b76      	ldr	r3, [pc, #472]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a75      	ldr	r2, [pc, #468]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e02e      	b.n	8009050 <HAL_RCC_OscConfig+0xd4>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10c      	bne.n	8009014 <HAL_RCC_OscConfig+0x98>
 8008ffa:	4b71      	ldr	r3, [pc, #452]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a70      	ldr	r2, [pc, #448]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	4b6e      	ldr	r3, [pc, #440]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a6d      	ldr	r2, [pc, #436]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800900c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	e01d      	b.n	8009050 <HAL_RCC_OscConfig+0xd4>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800901c:	d10c      	bne.n	8009038 <HAL_RCC_OscConfig+0xbc>
 800901e:	4b68      	ldr	r3, [pc, #416]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a67      	ldr	r2, [pc, #412]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	4b65      	ldr	r3, [pc, #404]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a64      	ldr	r2, [pc, #400]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e00b      	b.n	8009050 <HAL_RCC_OscConfig+0xd4>
 8009038:	4b61      	ldr	r3, [pc, #388]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a60      	ldr	r2, [pc, #384]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800903e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	4b5e      	ldr	r3, [pc, #376]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a5d      	ldr	r2, [pc, #372]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800904a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800904e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d013      	beq.n	8009080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009058:	f7fa fd4a 	bl	8003af0 <HAL_GetTick>
 800905c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800905e:	e008      	b.n	8009072 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009060:	f7fa fd46 	bl	8003af0 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b64      	cmp	r3, #100	@ 0x64
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e32b      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009072:	4b53      	ldr	r3, [pc, #332]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0f0      	beq.n	8009060 <HAL_RCC_OscConfig+0xe4>
 800907e:	e014      	b.n	80090aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009080:	f7fa fd36 	bl	8003af0 <HAL_GetTick>
 8009084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009088:	f7fa fd32 	bl	8003af0 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b64      	cmp	r3, #100	@ 0x64
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e317      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800909a:	4b49      	ldr	r3, [pc, #292]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f0      	bne.n	8009088 <HAL_RCC_OscConfig+0x10c>
 80090a6:	e000      	b.n	80090aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 808c 	beq.w	80091d0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090b8:	4b41      	ldr	r3, [pc, #260]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090c2:	4b3f      	ldr	r3, [pc, #252]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <HAL_RCC_OscConfig+0x162>
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	2b18      	cmp	r3, #24
 80090d2:	d137      	bne.n	8009144 <HAL_RCC_OscConfig+0x1c8>
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d132      	bne.n	8009144 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090de:	4b38      	ldr	r3, [pc, #224]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <HAL_RCC_OscConfig+0x17a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e2e9      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090f6:	4b32      	ldr	r3, [pc, #200]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f023 0219 	bic.w	r2, r3, #25
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	492f      	ldr	r1, [pc, #188]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009104:	4313      	orrs	r3, r2
 8009106:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009108:	f7fa fcf2 	bl	8003af0 <HAL_GetTick>
 800910c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009110:	f7fa fcee 	bl	8003af0 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e2d3      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009122:	4b27      	ldr	r3, [pc, #156]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0f0      	beq.n	8009110 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912e:	4b24      	ldr	r3, [pc, #144]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	061b      	lsls	r3, r3, #24
 800913c:	4920      	ldr	r1, [pc, #128]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800913e:	4313      	orrs	r3, r2
 8009140:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009142:	e045      	b.n	80091d0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d026      	beq.n	800919a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800914c:	4b1c      	ldr	r3, [pc, #112]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f023 0219 	bic.w	r2, r3, #25
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	4919      	ldr	r1, [pc, #100]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800915a:	4313      	orrs	r3, r2
 800915c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800915e:	f7fa fcc7 	bl	8003af0 <HAL_GetTick>
 8009162:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009166:	f7fa fcc3 	bl	8003af0 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e2a8      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009178:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009184:	4b0e      	ldr	r3, [pc, #56]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	061b      	lsls	r3, r3, #24
 8009192:	490b      	ldr	r1, [pc, #44]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009194:	4313      	orrs	r3, r2
 8009196:	604b      	str	r3, [r1, #4]
 8009198:	e01a      	b.n	80091d0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800919a:	4b09      	ldr	r3, [pc, #36]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a08      	ldr	r2, [pc, #32]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80091a0:	f023 0301 	bic.w	r3, r3, #1
 80091a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a6:	f7fa fca3 	bl	8003af0 <HAL_GetTick>
 80091aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091ac:	e00a      	b.n	80091c4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091ae:	f7fa fc9f 	bl	8003af0 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d903      	bls.n	80091c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e284      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
 80091c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091c4:	4b96      	ldr	r3, [pc, #600]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ee      	bne.n	80091ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d06a      	beq.n	80092b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091dc:	4b90      	ldr	r3, [pc, #576]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091e4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091e6:	4b8e      	ldr	r3, [pc, #568]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d007      	beq.n	8009202 <HAL_RCC_OscConfig+0x286>
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2b18      	cmp	r3, #24
 80091f6:	d11b      	bne.n	8009230 <HAL_RCC_OscConfig+0x2b4>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d116      	bne.n	8009230 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009202:	4b87      	ldr	r3, [pc, #540]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <HAL_RCC_OscConfig+0x29e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	2b80      	cmp	r3, #128	@ 0x80
 8009214:	d001      	beq.n	800921a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e257      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800921a:	4b81      	ldr	r3, [pc, #516]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	497d      	ldr	r1, [pc, #500]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800922a:	4313      	orrs	r3, r2
 800922c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800922e:	e040      	b.n	80092b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d023      	beq.n	8009280 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009238:	4b79      	ldr	r3, [pc, #484]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a78      	ldr	r2, [pc, #480]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800923e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009244:	f7fa fc54 	bl	8003af0 <HAL_GetTick>
 8009248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800924c:	f7fa fc50 	bl	8003af0 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e235      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800925e:	4b70      	ldr	r3, [pc, #448]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f0      	beq.n	800924c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800926a:	4b6d      	ldr	r3, [pc, #436]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	061b      	lsls	r3, r3, #24
 8009278:	4969      	ldr	r1, [pc, #420]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800927a:	4313      	orrs	r3, r2
 800927c:	60cb      	str	r3, [r1, #12]
 800927e:	e018      	b.n	80092b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009280:	4b67      	ldr	r3, [pc, #412]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a66      	ldr	r2, [pc, #408]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800928a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928c:	f7fa fc30 	bl	8003af0 <HAL_GetTick>
 8009290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009292:	e008      	b.n	80092a6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009294:	f7fa fc2c 	bl	8003af0 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e211      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092a6:	4b5e      	ldr	r3, [pc, #376]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f0      	bne.n	8009294 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d036      	beq.n	800932c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d019      	beq.n	80092fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092c6:	4b56      	ldr	r3, [pc, #344]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ca:	4a55      	ldr	r2, [pc, #340]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d2:	f7fa fc0d 	bl	8003af0 <HAL_GetTick>
 80092d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092da:	f7fa fc09 	bl	8003af0 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e1ee      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092ec:	4b4c      	ldr	r3, [pc, #304]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x35e>
 80092f8:	e018      	b.n	800932c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092fa:	4b49      	ldr	r3, [pc, #292]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fe:	4a48      	ldr	r2, [pc, #288]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009300:	f023 0301 	bic.w	r3, r3, #1
 8009304:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009306:	f7fa fbf3 	bl	8003af0 <HAL_GetTick>
 800930a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800930c:	e008      	b.n	8009320 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800930e:	f7fa fbef 	bl	8003af0 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e1d4      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009320:	4b3f      	ldr	r3, [pc, #252]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f0      	bne.n	800930e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d036      	beq.n	80093a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d019      	beq.n	8009374 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009340:	4b37      	ldr	r3, [pc, #220]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a36      	ldr	r2, [pc, #216]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009346:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800934a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800934c:	f7fa fbd0 	bl	8003af0 <HAL_GetTick>
 8009350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009354:	f7fa fbcc 	bl	8003af0 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e1b1      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009366:	4b2e      	ldr	r3, [pc, #184]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f0      	beq.n	8009354 <HAL_RCC_OscConfig+0x3d8>
 8009372:	e018      	b.n	80093a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009374:	4b2a      	ldr	r3, [pc, #168]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a29      	ldr	r2, [pc, #164]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800937a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800937e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009380:	f7fa fbb6 	bl	8003af0 <HAL_GetTick>
 8009384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009386:	e008      	b.n	800939a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009388:	f7fa fbb2 	bl	8003af0 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e197      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800939a:	4b21      	ldr	r3, [pc, #132]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1f0      	bne.n	8009388 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 8086 	beq.w	80094c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009424 <HAL_RCC_OscConfig+0x4a8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009424 <HAL_RCC_OscConfig+0x4a8>)
 80093ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093c0:	f7fa fb96 	bl	8003af0 <HAL_GetTick>
 80093c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80093c8:	f7fa fb92 	bl	8003af0 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b64      	cmp	r3, #100	@ 0x64
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e177      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093da:	4b12      	ldr	r3, [pc, #72]	@ (8009424 <HAL_RCC_OscConfig+0x4a8>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f0      	beq.n	80093c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d106      	bne.n	80093fc <HAL_RCC_OscConfig+0x480>
 80093ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f2:	4a0b      	ldr	r2, [pc, #44]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80093f4:	f043 0301 	orr.w	r3, r3, #1
 80093f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80093fa:	e032      	b.n	8009462 <HAL_RCC_OscConfig+0x4e6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d111      	bne.n	8009428 <HAL_RCC_OscConfig+0x4ac>
 8009404:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009408:	4a05      	ldr	r2, [pc, #20]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800940a:	f023 0301 	bic.w	r3, r3, #1
 800940e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009410:	4b03      	ldr	r3, [pc, #12]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009414:	4a02      	ldr	r2, [pc, #8]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009416:	f023 0304 	bic.w	r3, r3, #4
 800941a:	6713      	str	r3, [r2, #112]	@ 0x70
 800941c:	e021      	b.n	8009462 <HAL_RCC_OscConfig+0x4e6>
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
 8009424:	58024800 	.word	0x58024800
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	2b05      	cmp	r3, #5
 800942e:	d10c      	bne.n	800944a <HAL_RCC_OscConfig+0x4ce>
 8009430:	4b83      	ldr	r3, [pc, #524]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009434:	4a82      	ldr	r2, [pc, #520]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009436:	f043 0304 	orr.w	r3, r3, #4
 800943a:	6713      	str	r3, [r2, #112]	@ 0x70
 800943c:	4b80      	ldr	r3, [pc, #512]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800943e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009440:	4a7f      	ldr	r2, [pc, #508]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009442:	f043 0301 	orr.w	r3, r3, #1
 8009446:	6713      	str	r3, [r2, #112]	@ 0x70
 8009448:	e00b      	b.n	8009462 <HAL_RCC_OscConfig+0x4e6>
 800944a:	4b7d      	ldr	r3, [pc, #500]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	4a7c      	ldr	r2, [pc, #496]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	6713      	str	r3, [r2, #112]	@ 0x70
 8009456:	4b7a      	ldr	r3, [pc, #488]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945a:	4a79      	ldr	r2, [pc, #484]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800945c:	f023 0304 	bic.w	r3, r3, #4
 8009460:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d015      	beq.n	8009496 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946a:	f7fa fb41 	bl	8003af0 <HAL_GetTick>
 800946e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009470:	e00a      	b.n	8009488 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009472:	f7fa fb3d 	bl	8003af0 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009480:	4293      	cmp	r3, r2
 8009482:	d901      	bls.n	8009488 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e120      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009488:	4b6d      	ldr	r3, [pc, #436]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800948a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0ee      	beq.n	8009472 <HAL_RCC_OscConfig+0x4f6>
 8009494:	e014      	b.n	80094c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009496:	f7fa fb2b 	bl	8003af0 <HAL_GetTick>
 800949a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800949c:	e00a      	b.n	80094b4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800949e:	f7fa fb27 	bl	8003af0 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d901      	bls.n	80094b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e10a      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094b4:	4b62      	ldr	r3, [pc, #392]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ee      	bne.n	800949e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 80ff 	beq.w	80096c8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80094ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094d2:	2b18      	cmp	r3, #24
 80094d4:	f000 80ba 	beq.w	800964c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	2b02      	cmp	r3, #2
 80094de:	f040 8095 	bne.w	800960c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e2:	4b57      	ldr	r3, [pc, #348]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a56      	ldr	r2, [pc, #344]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ee:	f7fa faff 	bl	8003af0 <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f6:	f7fa fafb 	bl	8003af0 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e0e0      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009508:	4b4d      	ldr	r3, [pc, #308]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1f0      	bne.n	80094f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009514:	4b4a      	ldr	r3, [pc, #296]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009518:	4b4a      	ldr	r3, [pc, #296]	@ (8009644 <HAL_RCC_OscConfig+0x6c8>)
 800951a:	4013      	ands	r3, r2
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009524:	0112      	lsls	r2, r2, #4
 8009526:	430a      	orrs	r2, r1
 8009528:	4945      	ldr	r1, [pc, #276]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800952a:	4313      	orrs	r3, r2
 800952c:	628b      	str	r3, [r1, #40]	@ 0x28
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009532:	3b01      	subs	r3, #1
 8009534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953c:	3b01      	subs	r3, #1
 800953e:	025b      	lsls	r3, r3, #9
 8009540:	b29b      	uxth	r3, r3
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009548:	3b01      	subs	r3, #1
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009556:	3b01      	subs	r3, #1
 8009558:	061b      	lsls	r3, r3, #24
 800955a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800955e:	4938      	ldr	r1, [pc, #224]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009560:	4313      	orrs	r3, r2
 8009562:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009564:	4b36      	ldr	r3, [pc, #216]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	4a35      	ldr	r2, [pc, #212]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800956a:	f023 0301 	bic.w	r3, r3, #1
 800956e:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009570:	4b33      	ldr	r3, [pc, #204]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009574:	4b34      	ldr	r3, [pc, #208]	@ (8009648 <HAL_RCC_OscConfig+0x6cc>)
 8009576:	4013      	ands	r3, r2
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800957c:	00d2      	lsls	r2, r2, #3
 800957e:	4930      	ldr	r1, [pc, #192]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009580:	4313      	orrs	r3, r2
 8009582:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009584:	4b2e      	ldr	r3, [pc, #184]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009588:	f023 020c 	bic.w	r2, r3, #12
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009590:	492b      	ldr	r1, [pc, #172]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009592:	4313      	orrs	r3, r2
 8009594:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009596:	4b2a      	ldr	r3, [pc, #168]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	f023 0202 	bic.w	r2, r3, #2
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a2:	4927      	ldr	r1, [pc, #156]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095a8:	4b25      	ldr	r3, [pc, #148]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	4a24      	ldr	r2, [pc, #144]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b4:	4b22      	ldr	r3, [pc, #136]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b8:	4a21      	ldr	r2, [pc, #132]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80095c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80095cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095d8:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a18      	ldr	r2, [pc, #96]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e4:	f7fa fa84 	bl	8003af0 <HAL_GetTick>
 80095e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095ec:	f7fa fa80 	bl	8003af0 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e065      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095fe:	4b10      	ldr	r3, [pc, #64]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0f0      	beq.n	80095ec <HAL_RCC_OscConfig+0x670>
 800960a:	e05d      	b.n	80096c8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800960c:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a0b      	ldr	r2, [pc, #44]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009618:	f7fa fa6a 	bl	8003af0 <HAL_GetTick>
 800961c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800961e:	e008      	b.n	8009632 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009620:	f7fa fa66 	bl	8003af0 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b02      	cmp	r3, #2
 800962c:	d901      	bls.n	8009632 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e04b      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009632:	4b03      	ldr	r3, [pc, #12]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f0      	bne.n	8009620 <HAL_RCC_OscConfig+0x6a4>
 800963e:	e043      	b.n	80096c8 <HAL_RCC_OscConfig+0x74c>
 8009640:	58024400 	.word	0x58024400
 8009644:	fffffc0c 	.word	0xfffffc0c
 8009648:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800964c:	4b21      	ldr	r3, [pc, #132]	@ (80096d4 <HAL_RCC_OscConfig+0x758>)
 800964e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009650:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009652:	4b20      	ldr	r3, [pc, #128]	@ (80096d4 <HAL_RCC_OscConfig+0x758>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009656:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	2b01      	cmp	r3, #1
 800965e:	d031      	beq.n	80096c4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f003 0203 	and.w	r2, r3, #3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800966a:	429a      	cmp	r2, r3
 800966c:	d12a      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	091b      	lsrs	r3, r3, #4
 8009672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800967a:	429a      	cmp	r2, r3
 800967c:	d122      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009688:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800968a:	429a      	cmp	r2, r3
 800968c:	d11a      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	0a5b      	lsrs	r3, r3, #9
 8009692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800969c:	429a      	cmp	r2, r3
 800969e:	d111      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	0c1b      	lsrs	r3, r3, #16
 80096a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d108      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	0e1b      	lsrs	r3, r3, #24
 80096b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d001      	beq.n	80096c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e000      	b.n	80096ca <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3730      	adds	r7, #48	@ 0x30
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400

080096d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e19c      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096ec:	4b8a      	ldr	r3, [pc, #552]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d910      	bls.n	800971c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fa:	4b87      	ldr	r3, [pc, #540]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f023 020f 	bic.w	r2, r3, #15
 8009702:	4985      	ldr	r1, [pc, #532]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	4313      	orrs	r3, r2
 8009708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800970a:	4b83      	ldr	r3, [pc, #524]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d001      	beq.n	800971c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e184      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d010      	beq.n	800974a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691a      	ldr	r2, [r3, #16]
 800972c:	4b7b      	ldr	r3, [pc, #492]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009734:	429a      	cmp	r2, r3
 8009736:	d908      	bls.n	800974a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009738:	4b78      	ldr	r3, [pc, #480]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	4975      	ldr	r1, [pc, #468]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009746:	4313      	orrs	r3, r2
 8009748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0308 	and.w	r3, r3, #8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d010      	beq.n	8009778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695a      	ldr	r2, [r3, #20]
 800975a:	4b70      	ldr	r3, [pc, #448]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009762:	429a      	cmp	r2, r3
 8009764:	d908      	bls.n	8009778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009766:	4b6d      	ldr	r3, [pc, #436]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	496a      	ldr	r1, [pc, #424]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009774:	4313      	orrs	r3, r2
 8009776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699a      	ldr	r2, [r3, #24]
 8009788:	4b64      	ldr	r3, [pc, #400]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009790:	429a      	cmp	r2, r3
 8009792:	d908      	bls.n	80097a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009794:	4b61      	ldr	r3, [pc, #388]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	495e      	ldr	r1, [pc, #376]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d010      	beq.n	80097d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69da      	ldr	r2, [r3, #28]
 80097b6:	4b59      	ldr	r3, [pc, #356]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097be:	429a      	cmp	r2, r3
 80097c0:	d908      	bls.n	80097d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097c2:	4b56      	ldr	r3, [pc, #344]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	4953      	ldr	r1, [pc, #332]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d010      	beq.n	8009802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68da      	ldr	r2, [r3, #12]
 80097e4:	4b4d      	ldr	r3, [pc, #308]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d908      	bls.n	8009802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097f0:	4b4a      	ldr	r3, [pc, #296]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f023 020f 	bic.w	r2, r3, #15
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	4947      	ldr	r1, [pc, #284]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d055      	beq.n	80098ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800980e:	4b43      	ldr	r3, [pc, #268]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	4940      	ldr	r1, [pc, #256]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800981c:	4313      	orrs	r3, r2
 800981e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d107      	bne.n	8009838 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009828:	4b3c      	ldr	r3, [pc, #240]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d121      	bne.n	8009878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e0f6      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	2b03      	cmp	r3, #3
 800983e:	d107      	bne.n	8009850 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009840:	4b36      	ldr	r3, [pc, #216]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d115      	bne.n	8009878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e0ea      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d107      	bne.n	8009868 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009858:	4b30      	ldr	r3, [pc, #192]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e0de      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009868:	4b2c      	ldr	r3, [pc, #176]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e0d6      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009878:	4b28      	ldr	r3, [pc, #160]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f023 0207 	bic.w	r2, r3, #7
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	4925      	ldr	r1, [pc, #148]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 8009886:	4313      	orrs	r3, r2
 8009888:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800988a:	f7fa f931 	bl	8003af0 <HAL_GetTick>
 800988e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009890:	e00a      	b.n	80098a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009892:	f7fa f92d 	bl	8003af0 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d901      	bls.n	80098a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e0be      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098a8:	4b1c      	ldr	r3, [pc, #112]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d1eb      	bne.n	8009892 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d010      	beq.n	80098e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	4b14      	ldr	r3, [pc, #80]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d208      	bcs.n	80098e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098d6:	4b11      	ldr	r3, [pc, #68]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	f023 020f 	bic.w	r2, r3, #15
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	490e      	ldr	r1, [pc, #56]	@ (800991c <HAL_RCC_ClockConfig+0x244>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80098e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d214      	bcs.n	8009920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098f6:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f023 020f 	bic.w	r2, r3, #15
 80098fe:	4906      	ldr	r1, [pc, #24]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	4313      	orrs	r3, r2
 8009904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009906:	4b04      	ldr	r3, [pc, #16]	@ (8009918 <HAL_RCC_ClockConfig+0x240>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d005      	beq.n	8009920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e086      	b.n	8009a26 <HAL_RCC_ClockConfig+0x34e>
 8009918:	52002000 	.word	0x52002000
 800991c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d010      	beq.n	800994e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	4b3f      	ldr	r3, [pc, #252]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009938:	429a      	cmp	r2, r3
 800993a:	d208      	bcs.n	800994e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800993c:	4b3c      	ldr	r3, [pc, #240]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	4939      	ldr	r1, [pc, #228]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 800994a:	4313      	orrs	r3, r2
 800994c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d010      	beq.n	800997c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695a      	ldr	r2, [r3, #20]
 800995e:	4b34      	ldr	r3, [pc, #208]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009966:	429a      	cmp	r2, r3
 8009968:	d208      	bcs.n	800997c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800996a:	4b31      	ldr	r3, [pc, #196]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	492e      	ldr	r1, [pc, #184]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 8009978:	4313      	orrs	r3, r2
 800997a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0310 	and.w	r3, r3, #16
 8009984:	2b00      	cmp	r3, #0
 8009986:	d010      	beq.n	80099aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699a      	ldr	r2, [r3, #24]
 800998c:	4b28      	ldr	r3, [pc, #160]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009994:	429a      	cmp	r2, r3
 8009996:	d208      	bcs.n	80099aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009998:	4b25      	ldr	r3, [pc, #148]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	4922      	ldr	r1, [pc, #136]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d010      	beq.n	80099d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69da      	ldr	r2, [r3, #28]
 80099ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d208      	bcs.n	80099d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80099c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	4917      	ldr	r1, [pc, #92]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099d8:	f000 f834 	bl	8009a44 <HAL_RCC_GetSysClockFreq>
 80099dc:	4602      	mov	r2, r0
 80099de:	4b14      	ldr	r3, [pc, #80]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	f003 030f 	and.w	r3, r3, #15
 80099e8:	4912      	ldr	r1, [pc, #72]	@ (8009a34 <HAL_RCC_ClockConfig+0x35c>)
 80099ea:	5ccb      	ldrb	r3, [r1, r3]
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
 80099f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009a30 <HAL_RCC_ClockConfig+0x358>)
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	f003 030f 	and.w	r3, r3, #15
 80099fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009a34 <HAL_RCC_ClockConfig+0x35c>)
 8009a00:	5cd3      	ldrb	r3, [r2, r3]
 8009a02:	f003 031f 	and.w	r3, r3, #31
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	fa22 f303 	lsr.w	r3, r2, r3
 8009a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a38 <HAL_RCC_ClockConfig+0x360>)
 8009a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a10:	4a0a      	ldr	r2, [pc, #40]	@ (8009a3c <HAL_RCC_ClockConfig+0x364>)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009a16:	4b0a      	ldr	r3, [pc, #40]	@ (8009a40 <HAL_RCC_ClockConfig+0x368>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fa f81e 	bl	8003a5c <HAL_InitTick>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	58024400 	.word	0x58024400
 8009a34:	08011810 	.word	0x08011810
 8009a38:	24000004 	.word	0x24000004
 8009a3c:	24000000 	.word	0x24000000
 8009a40:	24000008 	.word	0x24000008

08009a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b089      	sub	sp, #36	@ 0x24
 8009a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a4a:	4bb3      	ldr	r3, [pc, #716]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a52:	2b18      	cmp	r3, #24
 8009a54:	f200 8155 	bhi.w	8009d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8009a58:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009ac5 	.word	0x08009ac5
 8009a64:	08009d03 	.word	0x08009d03
 8009a68:	08009d03 	.word	0x08009d03
 8009a6c:	08009d03 	.word	0x08009d03
 8009a70:	08009d03 	.word	0x08009d03
 8009a74:	08009d03 	.word	0x08009d03
 8009a78:	08009d03 	.word	0x08009d03
 8009a7c:	08009d03 	.word	0x08009d03
 8009a80:	08009aeb 	.word	0x08009aeb
 8009a84:	08009d03 	.word	0x08009d03
 8009a88:	08009d03 	.word	0x08009d03
 8009a8c:	08009d03 	.word	0x08009d03
 8009a90:	08009d03 	.word	0x08009d03
 8009a94:	08009d03 	.word	0x08009d03
 8009a98:	08009d03 	.word	0x08009d03
 8009a9c:	08009d03 	.word	0x08009d03
 8009aa0:	08009af1 	.word	0x08009af1
 8009aa4:	08009d03 	.word	0x08009d03
 8009aa8:	08009d03 	.word	0x08009d03
 8009aac:	08009d03 	.word	0x08009d03
 8009ab0:	08009d03 	.word	0x08009d03
 8009ab4:	08009d03 	.word	0x08009d03
 8009ab8:	08009d03 	.word	0x08009d03
 8009abc:	08009d03 	.word	0x08009d03
 8009ac0:	08009af7 	.word	0x08009af7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ac4:	4b94      	ldr	r3, [pc, #592]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d009      	beq.n	8009ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ad0:	4b91      	ldr	r3, [pc, #580]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	08db      	lsrs	r3, r3, #3
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	4a90      	ldr	r2, [pc, #576]	@ (8009d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009adc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009ae2:	e111      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8009d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ae6:	61bb      	str	r3, [r7, #24]
    break;
 8009ae8:	e10e      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009aea:	4b8d      	ldr	r3, [pc, #564]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009aec:	61bb      	str	r3, [r7, #24]
    break;
 8009aee:	e10b      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009af0:	4b8c      	ldr	r3, [pc, #560]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009af2:	61bb      	str	r3, [r7, #24]
    break;
 8009af4:	e108      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009af6:	4b88      	ldr	r3, [pc, #544]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009b00:	4b85      	ldr	r3, [pc, #532]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b04:	091b      	lsrs	r3, r3, #4
 8009b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b0c:	4b82      	ldr	r3, [pc, #520]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b16:	4b80      	ldr	r3, [pc, #512]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1a:	08db      	lsrs	r3, r3, #3
 8009b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	fb02 f303 	mul.w	r3, r2, r3
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 80e1 	beq.w	8009cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	f000 8083 	beq.w	8009c48 <HAL_RCC_GetSysClockFreq+0x204>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	f200 80a1 	bhi.w	8009c8c <HAL_RCC_GetSysClockFreq+0x248>
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <HAL_RCC_GetSysClockFreq+0x114>
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d056      	beq.n	8009c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b56:	e099      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b58:	4b6f      	ldr	r3, [pc, #444]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02d      	beq.n	8009bc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b64:	4b6c      	ldr	r3, [pc, #432]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	08db      	lsrs	r3, r3, #3
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8009d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b70:	fa22 f303 	lsr.w	r3, r2, r3
 8009b74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8e:	4b62      	ldr	r3, [pc, #392]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009bbe:	e087      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd2:	4b51      	ldr	r3, [pc, #324]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c02:	e065      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c16:	4b40      	ldr	r3, [pc, #256]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c46:	e043      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c8a:	e021      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009cd0:	4b11      	ldr	r3, [pc, #68]	@ (8009d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd4:	0a5b      	lsrs	r3, r3, #9
 8009cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cda:	3301      	adds	r3, #1
 8009cdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf4:	ee17 3a90 	vmov	r3, s15
 8009cf8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009cfa:	e005      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61bb      	str	r3, [r7, #24]
    break;
 8009d00:	e002      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009d02:	4b07      	ldr	r3, [pc, #28]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d04:	61bb      	str	r3, [r7, #24]
    break;
 8009d06:	bf00      	nop
  }

  return sysclockfreq;
 8009d08:	69bb      	ldr	r3, [r7, #24]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3724      	adds	r7, #36	@ 0x24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	003d0900 	.word	0x003d0900
 8009d24:	017d7840 	.word	0x017d7840
 8009d28:	46000000 	.word	0x46000000
 8009d2c:	4c742400 	.word	0x4c742400
 8009d30:	4a742400 	.word	0x4a742400
 8009d34:	4bbebc20 	.word	0x4bbebc20

08009d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d3e:	f7ff fe81 	bl	8009a44 <HAL_RCC_GetSysClockFreq>
 8009d42:	4602      	mov	r2, r0
 8009d44:	4b10      	ldr	r3, [pc, #64]	@ (8009d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	0a1b      	lsrs	r3, r3, #8
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	490f      	ldr	r1, [pc, #60]	@ (8009d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8009d50:	5ccb      	ldrb	r3, [r1, r3]
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	fa22 f303 	lsr.w	r3, r2, r3
 8009d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	f003 030f 	and.w	r3, r3, #15
 8009d64:	4a09      	ldr	r2, [pc, #36]	@ (8009d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8009d66:	5cd3      	ldrb	r3, [r2, r3]
 8009d68:	f003 031f 	and.w	r3, r3, #31
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d72:	4a07      	ldr	r2, [pc, #28]	@ (8009d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d76:	4a07      	ldr	r2, [pc, #28]	@ (8009d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d7c:	4b04      	ldr	r3, [pc, #16]	@ (8009d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	58024400 	.word	0x58024400
 8009d8c:	08011810 	.word	0x08011810
 8009d90:	24000004 	.word	0x24000004
 8009d94:	24000000 	.word	0x24000000

08009d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d9c:	f7ff ffcc 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8009da0:	4602      	mov	r2, r0
 8009da2:	4b06      	ldr	r3, [pc, #24]	@ (8009dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	091b      	lsrs	r3, r3, #4
 8009da8:	f003 0307 	and.w	r3, r3, #7
 8009dac:	4904      	ldr	r1, [pc, #16]	@ (8009dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009dae:	5ccb      	ldrb	r3, [r1, r3]
 8009db0:	f003 031f 	and.w	r3, r3, #31
 8009db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	58024400 	.word	0x58024400
 8009dc0:	08011810 	.word	0x08011810

08009dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009dc8:	f7ff ffb6 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	4b06      	ldr	r3, [pc, #24]	@ (8009de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	f003 0307 	and.w	r3, r3, #7
 8009dd8:	4904      	ldr	r1, [pc, #16]	@ (8009dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dda:	5ccb      	ldrb	r3, [r1, r3]
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	58024400 	.word	0x58024400
 8009dec:	08011810 	.word	0x08011810

08009df0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009df8:	2300      	movs	r3, #0
 8009dfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d03f      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e14:	d02a      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009e16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e1a:	d824      	bhi.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e20:	d018      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e26:	d81e      	bhi.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e30:	d007      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e32:	e018      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e34:	4ba4      	ldr	r3, [pc, #656]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	4aa3      	ldr	r2, [pc, #652]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e40:	e015      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3304      	adds	r3, #4
 8009e46:	2102      	movs	r1, #2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 ff01 	bl	800bc50 <RCCEx_PLL2_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e52:	e00c      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3324      	adds	r3, #36	@ 0x24
 8009e58:	2102      	movs	r1, #2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 ffaa 	bl	800bdb4 <RCCEx_PLL3_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6a:	e000      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e74:	4b94      	ldr	r3, [pc, #592]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e78:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e80:	4991      	ldr	r1, [pc, #580]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	650b      	str	r3, [r1, #80]	@ 0x50
 8009e86:	e001      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
 8009e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d03d      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d826      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009ebd 	.word	0x08009ebd
 8009eac:	08009ecb 	.word	0x08009ecb
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	08009ef5 	.word	0x08009ef5
 8009eb8:	08009ef5 	.word	0x08009ef5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ebc:	4b82      	ldr	r3, [pc, #520]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec0:	4a81      	ldr	r2, [pc, #516]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ec8:	e015      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 febd 	bl	800bc50 <RCCEx_PLL2_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009eda:	e00c      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3324      	adds	r3, #36	@ 0x24
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 ff66 	bl	800bdb4 <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009eec:	e003      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef2:	e000      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009efc:	4b72      	ldr	r3, [pc, #456]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f00:	f023 0207 	bic.w	r2, r3, #7
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f08:	496f      	ldr	r1, [pc, #444]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	650b      	str	r3, [r1, #80]	@ 0x50
 8009f0e:	e001      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d051      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f26:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009f2a:	d036      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009f2c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009f30:	d830      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f36:	d032      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f3c:	d82a      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f42:	d02e      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f48:	d824      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f4e:	d018      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f54:	d81e      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f5e:	d007      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009f60:	e018      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f62:	4b59      	ldr	r3, [pc, #356]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f66:	4a58      	ldr	r2, [pc, #352]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f6e:	e019      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3304      	adds	r3, #4
 8009f74:	2100      	movs	r1, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 fe6a 	bl	800bc50 <RCCEx_PLL2_Config>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f80:	e010      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	3324      	adds	r3, #36	@ 0x24
 8009f86:	2100      	movs	r1, #0
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f001 ff13 	bl	800bdb4 <RCCEx_PLL3_Config>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f92:	e007      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	75fb      	strb	r3, [r7, #23]
      break;
 8009f98:	e004      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009f9a:	bf00      	nop
 8009f9c:	e002      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009f9e:	bf00      	nop
 8009fa0:	e000      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009faa:	4b47      	ldr	r3, [pc, #284]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fae:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fb8:	4943      	ldr	r1, [pc, #268]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	658b      	str	r3, [r1, #88]	@ 0x58
 8009fbe:	e001      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d051      	beq.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fd6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fda:	d036      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009fdc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fe0:	d830      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009fe2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fe6:	d032      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009fe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fec:	d82a      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009fee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ff2:	d02e      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009ff4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ff8:	d824      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009ffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ffe:	d018      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a000:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a004:	d81e      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a00a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a00e:	d007      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a010:	e018      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a012:	4b2d      	ldr	r3, [pc, #180]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	4a2c      	ldr	r2, [pc, #176]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a01c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a01e:	e019      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3304      	adds	r3, #4
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f001 fe12 	bl	800bc50 <RCCEx_PLL2_Config>
 800a02c:	4603      	mov	r3, r0
 800a02e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a030:	e010      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3324      	adds	r3, #36	@ 0x24
 800a036:	2100      	movs	r1, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 febb 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a042:	e007      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	75fb      	strb	r3, [r7, #23]
      break;
 800a048:	e004      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a052:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10a      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a05a:	4b1b      	ldr	r3, [pc, #108]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a05c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a068:	4917      	ldr	r1, [pc, #92]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	658b      	str	r3, [r1, #88]	@ 0x58
 800a06e:	e001      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d035      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a084:	2b30      	cmp	r3, #48	@ 0x30
 800a086:	d01c      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a088:	2b30      	cmp	r3, #48	@ 0x30
 800a08a:	d817      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d00c      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a090:	2b20      	cmp	r3, #32
 800a092:	d813      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d019      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a098:	2b10      	cmp	r3, #16
 800a09a:	d10f      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a09c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a0:	4a09      	ldr	r2, [pc, #36]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a0a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a0a8:	e011      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	2102      	movs	r1, #2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 fdcd 	bl	800bc50 <RCCEx_PLL2_Config>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a0ba:	e008      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c0:	e005      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800a0c2:	bf00      	nop
 800a0c4:	e003      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a0c6:	bf00      	nop
 800a0c8:	58024400 	.word	0x58024400
      break;
 800a0cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d109      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a0d4:	4ba3      	ldr	r3, [pc, #652]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0e0:	49a0      	ldr	r1, [pc, #640]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800a0e6:	e001      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d047      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a100:	d030      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a106:	d82a      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a108:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a10c:	d02c      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a10e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a112:	d824      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a118:	d018      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a11a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a11e:	d81e      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a128:	d007      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a12a:	e018      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12c:	4b8d      	ldr	r3, [pc, #564]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a130:	4a8c      	ldr	r2, [pc, #560]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a136:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a138:	e017      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	2100      	movs	r1, #0
 800a140:	4618      	mov	r0, r3
 800a142:	f001 fd85 	bl	800bc50 <RCCEx_PLL2_Config>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a14a:	e00e      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3324      	adds	r3, #36	@ 0x24
 800a150:	2100      	movs	r1, #0
 800a152:	4618      	mov	r0, r3
 800a154:	f001 fe2e 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a15c:	e005      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      break;
 800a162:	e002      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a164:	bf00      	nop
 800a166:	e000      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a170:	4b7c      	ldr	r3, [pc, #496]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a174:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a17c:	4979      	ldr	r1, [pc, #484]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	650b      	str	r3, [r1, #80]	@ 0x50
 800a182:	e001      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d049      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a19c:	d02e      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a19e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1a2:	d828      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a1a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1a8:	d02a      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a1aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1ae:	d822      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a1b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1b4:	d026      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a1b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1ba:	d81c      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a1bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1c0:	d010      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a1c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1c6:	d816      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01d      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d0:	d111      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fd39 	bl	800bc50 <RCCEx_PLL2_Config>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1e2:	e012      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3324      	adds	r3, #36	@ 0x24
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 fde2 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1f4:	e009      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fa:	e006      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a1fc:	bf00      	nop
 800a1fe:	e004      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a200:	bf00      	nop
 800a202:	e002      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a204:	bf00      	nop
 800a206:	e000      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d109      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a210:	4b54      	ldr	r3, [pc, #336]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a214:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a21c:	4951      	ldr	r1, [pc, #324]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	650b      	str	r3, [r1, #80]	@ 0x50
 800a222:	e001      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d04b      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a23a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a23e:	d02e      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a244:	d828      	bhi.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a24a:	d02a      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a24c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a250:	d822      	bhi.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a252:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a256:	d026      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a25c:	d81c      	bhi.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a25e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a262:	d010      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a268:	d816      	bhi.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01d      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a26e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a272:	d111      	bne.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3304      	adds	r3, #4
 800a278:	2101      	movs	r1, #1
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fce8 	bl	800bc50 <RCCEx_PLL2_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a284:	e012      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3324      	adds	r3, #36	@ 0x24
 800a28a:	2101      	movs	r1, #1
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 fd91 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a292:	4603      	mov	r3, r0
 800a294:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a296:	e009      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	75fb      	strb	r3, [r7, #23]
      break;
 800a29c:	e006      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a29e:	bf00      	nop
 800a2a0:	e004      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a2a2:	bf00      	nop
 800a2a4:	e002      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a2a6:	bf00      	nop
 800a2a8:	e000      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a2aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2b2:	4b2c      	ldr	r3, [pc, #176]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b6:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a2c0:	4928      	ldr	r1, [pc, #160]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	658b      	str	r3, [r1, #88]	@ 0x58
 800a2c6:	e001      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d02f      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e0:	d00e      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a2e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e6:	d814      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d015      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2f0:	d10f      	bne.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2fe:	e00c      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3304      	adds	r3, #4
 800a304:	2101      	movs	r1, #1
 800a306:	4618      	mov	r0, r3
 800a308:	f001 fca2 	bl	800bc50 <RCCEx_PLL2_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a310:	e003      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
      break;
 800a316:	e000      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a320:	4b10      	ldr	r3, [pc, #64]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a324:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a32c:	490d      	ldr	r1, [pc, #52]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	650b      	str	r3, [r1, #80]	@ 0x50
 800a332:	e001      	b.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d034      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d81d      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a34c:	a201      	add	r2, pc, #4	@ (adr r2, 800a354 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a38f 	.word	0x0800a38f
 800a358:	0800a369 	.word	0x0800a369
 800a35c:	0800a377 	.word	0x0800a377
 800a360:	0800a38f 	.word	0x0800a38f
 800a364:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a368:	4bb1      	ldr	r3, [pc, #708]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	4ab0      	ldr	r2, [pc, #704]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a36e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a372:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a374:	e00c      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3304      	adds	r3, #4
 800a37a:	2102      	movs	r1, #2
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fc67 	bl	800bc50 <RCCEx_PLL2_Config>
 800a382:	4603      	mov	r3, r0
 800a384:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a386:	e003      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	75fb      	strb	r3, [r7, #23]
      break;
 800a38c:	e000      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a38e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d109      	bne.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a396:	4ba6      	ldr	r3, [pc, #664]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a39a:	f023 0203 	bic.w	r2, r3, #3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3a2:	49a3      	ldr	r1, [pc, #652]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800a3a8:	e001      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 8086 	beq.w	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3bc:	4b9d      	ldr	r3, [pc, #628]	@ (800a634 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a9c      	ldr	r2, [pc, #624]	@ (800a634 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a3c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3c8:	f7f9 fb92 	bl	8003af0 <HAL_GetTick>
 800a3cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3ce:	e009      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3d0:	f7f9 fb8e 	bl	8003af0 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b64      	cmp	r3, #100	@ 0x64
 800a3dc:	d902      	bls.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	75fb      	strb	r3, [r7, #23]
        break;
 800a3e2:	e005      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3e4:	4b93      	ldr	r3, [pc, #588]	@ (800a634 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0ef      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d166      	bne.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3f6:	4b8e      	ldr	r3, [pc, #568]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a400:	4053      	eors	r3, r2
 800a402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a406:	2b00      	cmp	r3, #0
 800a408:	d013      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a40a:	4b89      	ldr	r3, [pc, #548]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a40c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a412:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a414:	4b86      	ldr	r3, [pc, #536]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a418:	4a85      	ldr	r2, [pc, #532]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a41a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a41e:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a420:	4b83      	ldr	r3, [pc, #524]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a424:	4a82      	ldr	r2, [pc, #520]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a42a:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a42c:	4a80      	ldr	r2, [pc, #512]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43c:	d115      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43e:	f7f9 fb57 	bl	8003af0 <HAL_GetTick>
 800a442:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a444:	e00b      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a446:	f7f9 fb53 	bl	8003af0 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a454:	4293      	cmp	r3, r2
 800a456:	d902      	bls.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	75fb      	strb	r3, [r7, #23]
            break;
 800a45c:	e005      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a45e:	4b74      	ldr	r3, [pc, #464]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0ed      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d126      	bne.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a47a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a47e:	d10d      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a480:	4b6b      	ldr	r3, [pc, #428]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a48e:	0919      	lsrs	r1, r3, #4
 800a490:	4b69      	ldr	r3, [pc, #420]	@ (800a638 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a492:	400b      	ands	r3, r1
 800a494:	4966      	ldr	r1, [pc, #408]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a496:	4313      	orrs	r3, r2
 800a498:	610b      	str	r3, [r1, #16]
 800a49a:	e005      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a49c:	4b64      	ldr	r3, [pc, #400]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	4a63      	ldr	r2, [pc, #396]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a4a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a4a6:	6113      	str	r3, [r2, #16]
 800a4a8:	4b61      	ldr	r3, [pc, #388]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a4aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4b6:	495e      	ldr	r1, [pc, #376]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	670b      	str	r3, [r1, #112]	@ 0x70
 800a4bc:	e004      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	75bb      	strb	r3, [r7, #22]
 800a4c2:	e001      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d07e      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d8:	2b28      	cmp	r3, #40	@ 0x28
 800a4da:	d867      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a5b3 	.word	0x0800a5b3
 800a4e8:	0800a5ad 	.word	0x0800a5ad
 800a4ec:	0800a5ad 	.word	0x0800a5ad
 800a4f0:	0800a5ad 	.word	0x0800a5ad
 800a4f4:	0800a5ad 	.word	0x0800a5ad
 800a4f8:	0800a5ad 	.word	0x0800a5ad
 800a4fc:	0800a5ad 	.word	0x0800a5ad
 800a500:	0800a5ad 	.word	0x0800a5ad
 800a504:	0800a589 	.word	0x0800a589
 800a508:	0800a5ad 	.word	0x0800a5ad
 800a50c:	0800a5ad 	.word	0x0800a5ad
 800a510:	0800a5ad 	.word	0x0800a5ad
 800a514:	0800a5ad 	.word	0x0800a5ad
 800a518:	0800a5ad 	.word	0x0800a5ad
 800a51c:	0800a5ad 	.word	0x0800a5ad
 800a520:	0800a5ad 	.word	0x0800a5ad
 800a524:	0800a59b 	.word	0x0800a59b
 800a528:	0800a5ad 	.word	0x0800a5ad
 800a52c:	0800a5ad 	.word	0x0800a5ad
 800a530:	0800a5ad 	.word	0x0800a5ad
 800a534:	0800a5ad 	.word	0x0800a5ad
 800a538:	0800a5ad 	.word	0x0800a5ad
 800a53c:	0800a5ad 	.word	0x0800a5ad
 800a540:	0800a5ad 	.word	0x0800a5ad
 800a544:	0800a5b3 	.word	0x0800a5b3
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a5ad 	.word	0x0800a5ad
 800a550:	0800a5ad 	.word	0x0800a5ad
 800a554:	0800a5ad 	.word	0x0800a5ad
 800a558:	0800a5ad 	.word	0x0800a5ad
 800a55c:	0800a5ad 	.word	0x0800a5ad
 800a560:	0800a5ad 	.word	0x0800a5ad
 800a564:	0800a5b3 	.word	0x0800a5b3
 800a568:	0800a5ad 	.word	0x0800a5ad
 800a56c:	0800a5ad 	.word	0x0800a5ad
 800a570:	0800a5ad 	.word	0x0800a5ad
 800a574:	0800a5ad 	.word	0x0800a5ad
 800a578:	0800a5ad 	.word	0x0800a5ad
 800a57c:	0800a5ad 	.word	0x0800a5ad
 800a580:	0800a5ad 	.word	0x0800a5ad
 800a584:	0800a5b3 	.word	0x0800a5b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3304      	adds	r3, #4
 800a58c:	2101      	movs	r1, #1
 800a58e:	4618      	mov	r0, r3
 800a590:	f001 fb5e 	bl	800bc50 <RCCEx_PLL2_Config>
 800a594:	4603      	mov	r3, r0
 800a596:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a598:	e00c      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	3324      	adds	r3, #36	@ 0x24
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f001 fc07 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a5aa:	e003      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b0:	e000      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a5b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5be:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c6:	491a      	ldr	r1, [pc, #104]	@ (800a630 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	654b      	str	r3, [r1, #84]	@ 0x54
 800a5cc:	e001      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
 800a5d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d03e      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d820      	bhi.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ec:	0800a63d 	.word	0x0800a63d
 800a5f0:	0800a605 	.word	0x0800a605
 800a5f4:	0800a617 	.word	0x0800a617
 800a5f8:	0800a63d 	.word	0x0800a63d
 800a5fc:	0800a63d 	.word	0x0800a63d
 800a600:	0800a63d 	.word	0x0800a63d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3304      	adds	r3, #4
 800a608:	2101      	movs	r1, #1
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 fb20 	bl	800bc50 <RCCEx_PLL2_Config>
 800a610:	4603      	mov	r3, r0
 800a612:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a614:	e013      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3324      	adds	r3, #36	@ 0x24
 800a61a:	2101      	movs	r1, #1
 800a61c:	4618      	mov	r0, r3
 800a61e:	f001 fbc9 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a622:	4603      	mov	r3, r0
 800a624:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a626:	e00a      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	75fb      	strb	r3, [r7, #23]
      break;
 800a62c:	e007      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a62e:	bf00      	nop
 800a630:	58024400 	.word	0x58024400
 800a634:	58024800 	.word	0x58024800
 800a638:	00ffffcf 	.word	0x00ffffcf
      break;
 800a63c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d109      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a644:	4b9f      	ldr	r3, [pc, #636]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a648:	f023 0207 	bic.w	r2, r3, #7
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a650:	499c      	ldr	r1, [pc, #624]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a652:	4313      	orrs	r3, r2
 800a654:	654b      	str	r3, [r1, #84]	@ 0x54
 800a656:	e001      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b00      	cmp	r3, #0
 800a666:	d039      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a66e:	2b05      	cmp	r3, #5
 800a670:	d820      	bhi.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a672:	a201      	add	r2, pc, #4	@ (adr r2, 800a678 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a6bb 	.word	0x0800a6bb
 800a67c:	0800a691 	.word	0x0800a691
 800a680:	0800a6a3 	.word	0x0800a6a3
 800a684:	0800a6bb 	.word	0x0800a6bb
 800a688:	0800a6bb 	.word	0x0800a6bb
 800a68c:	0800a6bb 	.word	0x0800a6bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3304      	adds	r3, #4
 800a694:	2101      	movs	r1, #1
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fada 	bl	800bc50 <RCCEx_PLL2_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a6a0:	e00c      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3324      	adds	r3, #36	@ 0x24
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f001 fb83 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a6b2:	e003      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b8:	e000      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a6ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6c2:	4b80      	ldr	r3, [pc, #512]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c6:	f023 0207 	bic.w	r2, r3, #7
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6d0:	497c      	ldr	r1, [pc, #496]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	658b      	str	r3, [r1, #88]	@ 0x58
 800a6d6:	e001      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d04b      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6f2:	d02e      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a6f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6f8:	d828      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6fe:	d02a      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a704:	d822      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a706:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a70a:	d026      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a70c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a710:	d81c      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a716:	d010      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a71c:	d816      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d01d      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a726:	d111      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	2100      	movs	r1, #0
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 fa8e 	bl	800bc50 <RCCEx_PLL2_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a738:	e012      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3324      	adds	r3, #36	@ 0x24
 800a73e:	2102      	movs	r1, #2
 800a740:	4618      	mov	r0, r3
 800a742:	f001 fb37 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a74a:	e009      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
      break;
 800a750:	e006      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a752:	bf00      	nop
 800a754:	e004      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a756:	bf00      	nop
 800a758:	e002      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a75a:	bf00      	nop
 800a75c:	e000      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a75e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10a      	bne.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a766:	4b57      	ldr	r3, [pc, #348]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a76a:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a774:	4953      	ldr	r1, [pc, #332]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a776:	4313      	orrs	r3, r2
 800a778:	654b      	str	r3, [r1, #84]	@ 0x54
 800a77a:	e001      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d04b      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a792:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a796:	d02e      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a798:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a79c:	d828      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a79e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7a2:	d02a      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a7a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7a8:	d822      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a7aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7ae:	d026      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a7b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7b4:	d81c      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a7b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7ba:	d010      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a7bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7c0:	d816      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d01d      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a7c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ca:	d111      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 fa3c 	bl	800bc50 <RCCEx_PLL2_Config>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7dc:	e012      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3324      	adds	r3, #36	@ 0x24
 800a7e2:	2102      	movs	r1, #2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fae5 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7ee:	e009      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f4:	e006      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a7f6:	bf00      	nop
 800a7f8:	e004      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a7fa:	bf00      	nop
 800a7fc:	e002      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a7fe:	bf00      	nop
 800a800:	e000      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a802:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a804:	7dfb      	ldrb	r3, [r7, #23]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a80a:	4b2e      	ldr	r3, [pc, #184]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a80c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a80e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a818:	492a      	ldr	r1, [pc, #168]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a81a:	4313      	orrs	r3, r2
 800a81c:	658b      	str	r3, [r1, #88]	@ 0x58
 800a81e:	e001      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d04d      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a836:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a83a:	d02e      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a83c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a840:	d828      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a846:	d02a      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a84c:	d822      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a84e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a852:	d026      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a854:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a858:	d81c      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a85a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a85e:	d010      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a864:	d816      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d01d      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a86a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a86e:	d111      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3304      	adds	r3, #4
 800a874:	2100      	movs	r1, #0
 800a876:	4618      	mov	r0, r3
 800a878:	f001 f9ea 	bl	800bc50 <RCCEx_PLL2_Config>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a880:	e012      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3324      	adds	r3, #36	@ 0x24
 800a886:	2102      	movs	r1, #2
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 fa93 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a892:	e009      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	75fb      	strb	r3, [r7, #23]
      break;
 800a898:	e006      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a89a:	bf00      	nop
 800a89c:	e004      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a89e:	bf00      	nop
 800a8a0:	e002      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a8a2:	bf00      	nop
 800a8a4:	e000      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a8a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10c      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a8ae:	4b05      	ldr	r3, [pc, #20]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8bc:	4901      	ldr	r1, [pc, #4]	@ (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	658b      	str	r3, [r1, #88]	@ 0x58
 800a8c2:	e003      	b.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a8c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0308 	and.w	r3, r3, #8
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d018      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8e0:	d10a      	bne.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3324      	adds	r3, #36	@ 0x24
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 fa63 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a8f8:	4b8a      	ldr	r3, [pc, #552]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a904:	4987      	ldr	r1, [pc, #540]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a906:	4313      	orrs	r3, r2
 800a908:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0310 	and.w	r3, r3, #16
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01a      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a91c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a920:	d10a      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3324      	adds	r3, #36	@ 0x24
 800a926:	2102      	movs	r1, #2
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fa43 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a938:	4b7a      	ldr	r3, [pc, #488]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a93a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a93c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a946:	4977      	ldr	r1, [pc, #476]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a948:	4313      	orrs	r3, r2
 800a94a:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d034      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a95e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a962:	d01d      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a968:	d817      	bhi.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a96e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a972:	d009      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a974:	e011      	b.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3304      	adds	r3, #4
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 f967 	bl	800bc50 <RCCEx_PLL2_Config>
 800a982:	4603      	mov	r3, r0
 800a984:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a986:	e00c      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3324      	adds	r3, #36	@ 0x24
 800a98c:	2102      	movs	r1, #2
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 fa10 	bl	800bdb4 <RCCEx_PLL3_Config>
 800a994:	4603      	mov	r3, r0
 800a996:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a998:	e003      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	75fb      	strb	r3, [r7, #23]
      break;
 800a99e:	e000      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a9a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9a8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9b6:	495b      	ldr	r1, [pc, #364]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	658b      	str	r3, [r1, #88]	@ 0x58
 800a9bc:	e001      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d033      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9d8:	d01c      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a9da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9de:	d816      	bhi.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a9e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9e4:	d003      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a9e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9ea:	d007      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a9ec:	e00f      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ee:	4b4d      	ldr	r3, [pc, #308]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f2:	4a4c      	ldr	r2, [pc, #304]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9fa:	e00c      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3324      	adds	r3, #36	@ 0x24
 800aa00:	2101      	movs	r1, #1
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 f9d6 	bl	800bdb4 <RCCEx_PLL3_Config>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aa0c:	e003      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	75fb      	strb	r3, [r7, #23]
      break;
 800aa12:	e000      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800aa14:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa1c:	4b41      	ldr	r3, [pc, #260]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa2a:	493e      	ldr	r1, [pc, #248]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	654b      	str	r3, [r1, #84]	@ 0x54
 800aa30:	e001      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d029      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800aa4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa4e:	d007      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aa50:	e00f      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa52:	4b34      	ldr	r3, [pc, #208]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa56:	4a33      	ldr	r2, [pc, #204]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa5e:	e00b      	b.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3304      	adds	r3, #4
 800aa64:	2102      	movs	r1, #2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 f8f2 	bl	800bc50 <RCCEx_PLL2_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa70:	e002      	b.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	75fb      	strb	r3, [r7, #23]
      break;
 800aa76:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d109      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa7e:	4b29      	ldr	r3, [pc, #164]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8a:	4926      	ldr	r1, [pc, #152]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800aa90:	e001      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3324      	adds	r3, #36	@ 0x24
 800aaa6:	2102      	movs	r1, #2
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 f983 	bl	800bdb4 <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d033      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aacc:	d017      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800aace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aad2:	d811      	bhi.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aad8:	d013      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800aada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aade:	d80b      	bhi.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d010      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800aae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aae8:	d106      	bne.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaea:	4b0e      	ldr	r3, [pc, #56]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	4a0d      	ldr	r2, [pc, #52]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aaf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aaf6:	e007      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	75fb      	strb	r3, [r7, #23]
      break;
 800aafc:	e004      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aafe:	bf00      	nop
 800ab00:	e002      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ab02:	bf00      	nop
 800ab04:	e000      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ab06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10c      	bne.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab0e:	4b05      	ldr	r3, [pc, #20]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ab10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab1a:	4902      	ldr	r1, [pc, #8]	@ (800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	654b      	str	r3, [r1, #84]	@ 0x54
 800ab20:	e004      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800ab22:	bf00      	nop
 800ab24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d008      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab38:	4b29      	ldr	r3, [pc, #164]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab44:	4926      	ldr	r1, [pc, #152]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	650b      	str	r3, [r1, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab56:	4b22      	ldr	r3, [pc, #136]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab5a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab62:	491f      	ldr	r1, [pc, #124]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab74:	4b1a      	ldr	r3, [pc, #104]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	4a19      	ldr	r2, [pc, #100]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab7e:	6113      	str	r3, [r2, #16]
 800ab80:	4b17      	ldr	r3, [pc, #92]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab82:	691a      	ldr	r2, [r3, #16]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab8a:	4915      	ldr	r1, [pc, #84]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	da08      	bge.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab98:	4b11      	ldr	r3, [pc, #68]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab9c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aba4:	490e      	ldr	r1, [pc, #56]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800abb6:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800abb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abc4:	4906      	ldr	r1, [pc, #24]	@ (800abe0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 800abca:	7dbb      	ldrb	r3, [r7, #22]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	e000      	b.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	58024400 	.word	0x58024400

0800abe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b090      	sub	sp, #64	@ 0x40
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abf2:	f040 8089 	bne.w	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800abf6:	4b95      	ldr	r3, [pc, #596]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800abf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abfa:	f003 0307 	and.w	r3, r3, #7
 800abfe:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800ac00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d87d      	bhi.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800ac06:	a201      	add	r2, pc, #4	@ (adr r2, 800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac21 	.word	0x0800ac21
 800ac10:	0800ac45 	.word	0x0800ac45
 800ac14:	0800ac69 	.word	0x0800ac69
 800ac18:	0800acfd 	.word	0x0800acfd
 800ac1c:	0800ac8d 	.word	0x0800ac8d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac20:	4b8a      	ldr	r3, [pc, #552]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac2c:	d107      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 feba 	bl	800b9ac <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac3c:	e3ef      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ac42:	e3ec      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac44:	4b81      	ldr	r3, [pc, #516]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac50:	d107      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac52:	f107 0318 	add.w	r3, r7, #24
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fc00 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac60:	e3dd      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ac66:	e3da      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac68:	4b78      	ldr	r3, [pc, #480]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac74:	d107      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fd42 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac84:	e3cb      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ac8a:	e3c8      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac8c:	4b6f      	ldr	r3, [pc, #444]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ac8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac94:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac96:	4b6d      	ldr	r3, [pc, #436]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d10c      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800aca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d109      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aca8:	4b68      	ldr	r3, [pc, #416]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	08db      	lsrs	r3, r3, #3
 800acae:	f003 0303 	and.w	r3, r3, #3
 800acb2:	4a67      	ldr	r2, [pc, #412]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800acb4:	fa22 f303 	lsr.w	r3, r2, r3
 800acb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acba:	e01e      	b.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acbc:	4b63      	ldr	r3, [pc, #396]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acc8:	d106      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800acca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800accc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acd0:	d102      	bne.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800acd2:	4b60      	ldr	r3, [pc, #384]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acd6:	e010      	b.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acd8:	4b5c      	ldr	r3, [pc, #368]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ace0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ace4:	d106      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ace6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acec:	d102      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acee:	4b5a      	ldr	r3, [pc, #360]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf2:	e002      	b.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800acf8:	e391      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800acfa:	e390      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800acfc:	4b57      	ldr	r3, [pc, #348]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ad00:	e38d      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ad06:	e38a      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad0e:	f040 80a7 	bne.w	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800ad12:	4b4e      	ldr	r3, [pc, #312]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ad14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad16:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ad1a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ad22:	d054      	beq.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ad2a:	f200 808b 	bhi.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ad34:	f000 8083 	beq.w	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ad38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ad3e:	f200 8081 	bhi.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad48:	d02f      	beq.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad50:	d878      	bhi.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ad52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d004      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800ad58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad5e:	d012      	beq.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800ad60:	e070      	b.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad62:	4b3a      	ldr	r3, [pc, #232]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad6e:	d107      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 fe19 	bl	800b9ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad7e:	e34e      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ad84:	e34b      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad86:	4b31      	ldr	r3, [pc, #196]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad92:	d107      	bne.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad94:	f107 0318 	add.w	r3, r7, #24
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 fb5f 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ada2:	e33c      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ada8:	e339      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adaa:	4b28      	ldr	r3, [pc, #160]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adb6:	d107      	bne.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fca1 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adc6:	e32a      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800adcc:	e327      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adce:	4b1f      	ldr	r3, [pc, #124]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800add0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800add6:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800add8:	4b1c      	ldr	r3, [pc, #112]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d10c      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800ade4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adea:	4b18      	ldr	r3, [pc, #96]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	08db      	lsrs	r3, r3, #3
 800adf0:	f003 0303 	and.w	r3, r3, #3
 800adf4:	4a16      	ldr	r2, [pc, #88]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800adf6:	fa22 f303 	lsr.w	r3, r2, r3
 800adfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adfc:	e01e      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adfe:	4b13      	ldr	r3, [pc, #76]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae0a:	d106      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae12:	d102      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae14:	4b0f      	ldr	r3, [pc, #60]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ae16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae18:	e010      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae26:	d106      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800ae28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae2e:	d102      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae30:	4b09      	ldr	r3, [pc, #36]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae34:	e002      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800ae3a:	e2f0      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ae3c:	e2ef      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae3e:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ae40:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ae42:	e2ec      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ae48:	e2e9      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ae4a:	bf00      	nop
 800ae4c:	58024400 	.word	0x58024400
 800ae50:	03d09000 	.word	0x03d09000
 800ae54:	003d0900 	.word	0x003d0900
 800ae58:	017d7840 	.word	0x017d7840
 800ae5c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae66:	f040 809c 	bne.w	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ae6a:	4b9d      	ldr	r3, [pc, #628]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ae6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae6e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ae72:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae7a:	d054      	beq.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae82:	f200 808b 	bhi.w	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae8c:	f000 8083 	beq.w	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ae90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae96:	f200 8081 	bhi.w	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aea0:	d02f      	beq.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800aea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aea8:	d878      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aeb6:	d012      	beq.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aeb8:	e070      	b.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeba:	4b89      	ldr	r3, [pc, #548]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aec6:	d107      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fd6d 	bl	800b9ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aed6:	e2a2      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800aedc:	e29f      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aede:	4b80      	ldr	r3, [pc, #512]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeea:	d107      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeec:	f107 0318 	add.w	r3, r7, #24
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fab3 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800aefa:	e290      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800af00:	e28d      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af02:	4b77      	ldr	r3, [pc, #476]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af0e:	d107      	bne.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fbf5 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af1e:	e27e      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800af24:	e27b      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af26:	4b6e      	ldr	r3, [pc, #440]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800af28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af2e:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af30:	4b6b      	ldr	r3, [pc, #428]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d10c      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800af3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d109      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af42:	4b67      	ldr	r3, [pc, #412]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	08db      	lsrs	r3, r3, #3
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	4a65      	ldr	r2, [pc, #404]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800af4e:	fa22 f303 	lsr.w	r3, r2, r3
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af54:	e01e      	b.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af56:	4b62      	ldr	r3, [pc, #392]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af62:	d106      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800af64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af6a:	d102      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af6c:	4b5e      	ldr	r3, [pc, #376]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800af6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af70:	e010      	b.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af72:	4b5b      	ldr	r3, [pc, #364]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af7e:	d106      	bne.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800af80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af86:	d102      	bne.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af88:	4b58      	ldr	r3, [pc, #352]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800af8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af8c:	e002      	b.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800af92:	e244      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af94:	e243      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af96:	4b56      	ldr	r3, [pc, #344]	@ (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800af9a:	e240      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800afa0:	e23d      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afa8:	f040 80a7 	bne.w	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800afac:	4b4c      	ldr	r3, [pc, #304]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800afae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800afb4:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afbc:	d055      	beq.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afc4:	f200 8096 	bhi.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800afce:	f000 8084 	beq.w	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800afd8:	f200 808c 	bhi.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afe2:	d030      	beq.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800afe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afea:	f200 8083 	bhi.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800afee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d004      	beq.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800affa:	d012      	beq.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800affc:	e07a      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800affe:	4b38      	ldr	r3, [pc, #224]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b006:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b00a:	d107      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b00c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fccb 	bl	800b9ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b018:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b01a:	e200      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b020:	e1fd      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b022:	4b2f      	ldr	r3, [pc, #188]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b02a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b02e:	d107      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b030:	f107 0318 	add.w	r3, r7, #24
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fa11 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b03e:	e1ee      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b044:	e1eb      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b046:	4b26      	ldr	r3, [pc, #152]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b04e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b052:	d107      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b054:	f107 030c 	add.w	r3, r7, #12
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 fb53 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b062:	e1dc      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b068:	e1d9      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b06a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b06c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b06e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b072:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b074:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d10c      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800b080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b082:	2b00      	cmp	r3, #0
 800b084:	d109      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b086:	4b16      	ldr	r3, [pc, #88]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	08db      	lsrs	r3, r3, #3
 800b08c:	f003 0303 	and.w	r3, r3, #3
 800b090:	4a14      	ldr	r2, [pc, #80]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b092:	fa22 f303 	lsr.w	r3, r2, r3
 800b096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b098:	e01e      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b09a:	4b11      	ldr	r3, [pc, #68]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0a6:	d106      	bne.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0ae:	d102      	bne.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b0b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0b4:	e010      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0c2:	d106      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800b0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0ca:	d102      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b0cc:	4b07      	ldr	r3, [pc, #28]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0d0:	e002      	b.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800b0d6:	e1a2      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b0d8:	e1a1      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0da:	4b05      	ldr	r3, [pc, #20]	@ (800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b0de:	e19e      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b0e0:	58024400 	.word	0x58024400
 800b0e4:	03d09000 	.word	0x03d09000
 800b0e8:	003d0900 	.word	0x003d0900
 800b0ec:	017d7840 	.word	0x017d7840
 800b0f0:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b0f8:	e191      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b100:	d173      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b102:	4b9b      	ldr	r3, [pc, #620]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b10a:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800b10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b112:	d02f      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b11a:	d863      	bhi.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b128:	d012      	beq.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800b12a:	e05b      	b.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b12c:	4b90      	ldr	r3, [pc, #576]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b138:	d107      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b13a:	f107 0318 	add.w	r3, r7, #24
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f98c 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b148:	e169      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b14e:	e166      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b150:	4b87      	ldr	r3, [pc, #540]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b15c:	d107      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b15e:	f107 030c 	add.w	r3, r7, #12
 800b162:	4618      	mov	r0, r3
 800b164:	f000 face 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b16c:	e157      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b172:	e154      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b174:	4b7e      	ldr	r3, [pc, #504]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b17c:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b17e:	4b7c      	ldr	r3, [pc, #496]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b04      	cmp	r3, #4
 800b188:	d10c      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800b18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d109      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b190:	4b77      	ldr	r3, [pc, #476]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	08db      	lsrs	r3, r3, #3
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	4a76      	ldr	r2, [pc, #472]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1a2:	e01e      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1a4:	4b72      	ldr	r3, [pc, #456]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1b0:	d106      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1b8:	d102      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b1ba:	4b6f      	ldr	r3, [pc, #444]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1be:	e010      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1c0:	4b6b      	ldr	r3, [pc, #428]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1cc:	d106      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d4:	d102      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b1d6:	4b69      	ldr	r3, [pc, #420]	@ (800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1da:	e002      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800b1e0:	e11d      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b1e2:	e11c      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b1e8:	e119      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1f0:	d133      	bne.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b1f2:	4b5f      	ldr	r3, [pc, #380]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1fa:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800b202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b208:	d012      	beq.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b20a:	e023      	b.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b20c:	4b58      	ldr	r3, [pc, #352]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b218:	d107      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b21a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fbc4 	bl	800b9ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b228:	e0f9      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b22e:	e0f6      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b230:	4b4f      	ldr	r3, [pc, #316]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b23c:	d107      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b23e:	f107 0318 	add.w	r3, r7, #24
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f90a 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b24c:	e0e7      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b252:	e0e4      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b258:	e0e1      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b260:	f040 808e 	bne.w	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b264:	4b42      	ldr	r3, [pc, #264]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b268:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b26c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b274:	d06b      	beq.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b27c:	d874      	bhi.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b284:	d056      	beq.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b28c:	d86c      	bhi.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b290:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b294:	d03b      	beq.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b298:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b29c:	d864      	bhi.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2a4:	d021      	beq.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2ac:	d85c      	bhi.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d004      	beq.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2ba:	d004      	beq.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800b2bc:	e054      	b.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b2be:	f000 f8b7 	bl	800b430 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
          break;
 800b2c4:	e0ab      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2d2:	d107      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d4:	f107 0318 	add.w	r3, r7, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 f8bf 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2e2:	e09c      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b2e8:	e099      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ea:	4b21      	ldr	r3, [pc, #132]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2f6:	d107      	bne.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2f8:	f107 030c 	add.w	r3, r7, #12
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fa01 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b306:	e08a      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b30c:	e087      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b30e:	4b18      	ldr	r3, [pc, #96]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0304 	and.w	r3, r3, #4
 800b316:	2b04      	cmp	r3, #4
 800b318:	d109      	bne.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b31a:	4b15      	ldr	r3, [pc, #84]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	08db      	lsrs	r3, r3, #3
 800b320:	f003 0303 	and.w	r3, r3, #3
 800b324:	4a13      	ldr	r2, [pc, #76]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b326:	fa22 f303 	lsr.w	r3, r2, r3
 800b32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b32c:	e077      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b332:	e074      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b334:	4b0e      	ldr	r3, [pc, #56]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b33c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b340:	d102      	bne.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b344:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b346:	e06a      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b34c:	e067      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b34e:	4b08      	ldr	r3, [pc, #32]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b35a:	d102      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800b35c:	4b07      	ldr	r3, [pc, #28]	@ (800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b360:	e05d      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b366:	e05a      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b36c:	e057      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
 800b374:	03d09000 	.word	0x03d09000
 800b378:	003d0900 	.word	0x003d0900
 800b37c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b386:	d148      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b388:	4b27      	ldr	r3, [pc, #156]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b38a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b38c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b390:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800b392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b398:	d02a      	beq.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3a0:	d838      	bhi.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3ae:	d00d      	beq.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800b3b0:	e030      	b.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b3c4:	e02b      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b3ca:	e028      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3cc:	4b16      	ldr	r3, [pc, #88]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3d8:	d107      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fae4 	bl	800b9ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b3e8:	e019      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b3ee:	e016      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3fc:	d107      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3fe:	f107 0318 	add.w	r3, r7, #24
 800b402:	4618      	mov	r0, r3
 800b404:	f000 f82a 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b40c:	e007      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b412:	e004      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800b418:	e001      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

  return frequency;
 800b41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b420:	4618      	mov	r0, r3
 800b422:	3740      	adds	r7, #64	@ 0x40
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	58024400 	.word	0x58024400
 800b42c:	017d7840 	.word	0x017d7840

0800b430 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b434:	f7fe fc80 	bl	8009d38 <HAL_RCC_GetHCLKFreq>
 800b438:	4602      	mov	r2, r0
 800b43a:	4b06      	ldr	r3, [pc, #24]	@ (800b454 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	091b      	lsrs	r3, r3, #4
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	4904      	ldr	r1, [pc, #16]	@ (800b458 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b446:	5ccb      	ldrb	r3, [r1, r3]
 800b448:	f003 031f 	and.w	r3, r3, #31
 800b44c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b450:	4618      	mov	r0, r3
 800b452:	bd80      	pop	{r7, pc}
 800b454:	58024400 	.word	0x58024400
 800b458:	08011810 	.word	0x08011810

0800b45c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b089      	sub	sp, #36	@ 0x24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b464:	4ba1      	ldr	r3, [pc, #644]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b46e:	4b9f      	ldr	r3, [pc, #636]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b472:	0b1b      	lsrs	r3, r3, #12
 800b474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b478:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b47a:	4b9c      	ldr	r3, [pc, #624]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47e:	091b      	lsrs	r3, r3, #4
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b486:	4b99      	ldr	r3, [pc, #612]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b48a:	08db      	lsrs	r3, r3, #3
 800b48c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	fb02 f303 	mul.w	r3, r2, r3
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 8111 	beq.w	800b6cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	f000 8083 	beq.w	800b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	f200 80a1 	bhi.w	800b5fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d056      	beq.n	800b574 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b4c6:	e099      	b.n	800b5fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4c8:	4b88      	ldr	r3, [pc, #544]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0320 	and.w	r3, r3, #32
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d02d      	beq.n	800b530 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4d4:	4b85      	ldr	r3, [pc, #532]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	08db      	lsrs	r3, r3, #3
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	4a84      	ldr	r2, [pc, #528]	@ (800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	ee07 3a90 	vmov	s15, r3
 800b4ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	ee07 3a90 	vmov	s15, r3
 800b4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4fe:	4b7b      	ldr	r3, [pc, #492]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b506:	ee07 3a90 	vmov	s15, r3
 800b50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b50e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b512:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b51e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b52e:	e087      	b.n	800b640 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	ee07 3a90 	vmov	s15, r3
 800b536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b542:	4b6a      	ldr	r3, [pc, #424]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b552:	ed97 6a03 	vldr	s12, [r7, #12]
 800b556:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b56e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b572:	e065      	b.n	800b640 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b6fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b586:	4b59      	ldr	r3, [pc, #356]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58e:	ee07 3a90 	vmov	s15, r3
 800b592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b596:	ed97 6a03 	vldr	s12, [r7, #12]
 800b59a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b59e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5b6:	e043      	b.n	800b640 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	ee07 3a90 	vmov	s15, r3
 800b5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b5c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ca:	4b48      	ldr	r3, [pc, #288]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5d2:	ee07 3a90 	vmov	s15, r3
 800b5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5fa:	e021      	b.n	800b640 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b606:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b6fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b60e:	4b37      	ldr	r3, [pc, #220]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b616:	ee07 3a90 	vmov	s15, r3
 800b61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b622:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b62e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b63a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b63e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b640:	4b2a      	ldr	r3, [pc, #168]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b644:	0a5b      	lsrs	r3, r3, #9
 800b646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b64a:	ee07 3a90 	vmov	s15, r3
 800b64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b652:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b65a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b65e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b666:	ee17 2a90 	vmov	r2, s15
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b66e:	4b1f      	ldr	r3, [pc, #124]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b672:	0c1b      	lsrs	r3, r3, #16
 800b674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b684:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b688:	edd7 6a07 	vldr	s13, [r7, #28]
 800b68c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b694:	ee17 2a90 	vmov	r2, s15
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b69c:	4b13      	ldr	r3, [pc, #76]	@ (800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a0:	0e1b      	lsrs	r3, r3, #24
 800b6a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6c2:	ee17 2a90 	vmov	r2, s15
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b6ca:	e008      	b.n	800b6de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	609a      	str	r2, [r3, #8]
}
 800b6de:	bf00      	nop
 800b6e0:	3724      	adds	r7, #36	@ 0x24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	58024400 	.word	0x58024400
 800b6f0:	03d09000 	.word	0x03d09000
 800b6f4:	46000000 	.word	0x46000000
 800b6f8:	4c742400 	.word	0x4c742400
 800b6fc:	4a742400 	.word	0x4a742400
 800b700:	4bbebc20 	.word	0x4bbebc20

0800b704 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b704:	b480      	push	{r7}
 800b706:	b089      	sub	sp, #36	@ 0x24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b70c:	4ba1      	ldr	r3, [pc, #644]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b716:	4b9f      	ldr	r3, [pc, #636]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71a:	0d1b      	lsrs	r3, r3, #20
 800b71c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b720:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b722:	4b9c      	ldr	r3, [pc, #624]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b726:	0a1b      	lsrs	r3, r3, #8
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b72e:	4b99      	ldr	r3, [pc, #612]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b732:	08db      	lsrs	r3, r3, #3
 800b734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	fb02 f303 	mul.w	r3, r2, r3
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f000 8111 	beq.w	800b974 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b02      	cmp	r3, #2
 800b756:	f000 8083 	beq.w	800b860 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	f200 80a1 	bhi.w	800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d056      	beq.n	800b81c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b76e:	e099      	b.n	800b8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b770:	4b88      	ldr	r3, [pc, #544]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0320 	and.w	r3, r3, #32
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d02d      	beq.n	800b7d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b77c:	4b85      	ldr	r3, [pc, #532]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	08db      	lsrs	r3, r3, #3
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	4a84      	ldr	r2, [pc, #528]	@ (800b998 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b788:	fa22 f303 	lsr.w	r3, r2, r3
 800b78c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7a6:	4b7b      	ldr	r3, [pc, #492]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b99c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b7d6:	e087      	b.n	800b8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ea:	4b6a      	ldr	r3, [pc, #424]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b99c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b81a:	e065      	b.n	800b8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b826:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b82e:	4b59      	ldr	r3, [pc, #356]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b842:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b99c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b84e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b85e:	e043      	b.n	800b8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b872:	4b48      	ldr	r3, [pc, #288]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b882:	ed97 6a03 	vldr	s12, [r7, #12]
 800b886:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b99c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b89e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8a2:	e021      	b.n	800b8e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8b6:	4b37      	ldr	r3, [pc, #220]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b99c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b8e8:	4b2a      	ldr	r3, [pc, #168]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ec:	0a5b      	lsrs	r3, r3, #9
 800b8ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b902:	edd7 6a07 	vldr	s13, [r7, #28]
 800b906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b90a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b90e:	ee17 2a90 	vmov	r2, s15
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b916:	4b1f      	ldr	r3, [pc, #124]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b91a:	0c1b      	lsrs	r3, r3, #16
 800b91c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b920:	ee07 3a90 	vmov	s15, r3
 800b924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b92c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b930:	edd7 6a07 	vldr	s13, [r7, #28]
 800b934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b93c:	ee17 2a90 	vmov	r2, s15
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b944:	4b13      	ldr	r3, [pc, #76]	@ (800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b948:	0e1b      	lsrs	r3, r3, #24
 800b94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b94e:	ee07 3a90 	vmov	s15, r3
 800b952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b95a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b95e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b96a:	ee17 2a90 	vmov	r2, s15
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b972:	e008      	b.n	800b986 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	609a      	str	r2, [r3, #8]
}
 800b986:	bf00      	nop
 800b988:	3724      	adds	r7, #36	@ 0x24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	58024400 	.word	0x58024400
 800b998:	03d09000 	.word	0x03d09000
 800b99c:	46000000 	.word	0x46000000
 800b9a0:	4c742400 	.word	0x4c742400
 800b9a4:	4a742400 	.word	0x4a742400
 800b9a8:	4bbebc20 	.word	0x4bbebc20

0800b9ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b089      	sub	sp, #36	@ 0x24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9b4:	4ba0      	ldr	r3, [pc, #640]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b9be:	4b9e      	ldr	r3, [pc, #632]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c2:	091b      	lsrs	r3, r3, #4
 800b9c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b9ca:	4b9b      	ldr	r3, [pc, #620]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b9d4:	4b98      	ldr	r3, [pc, #608]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d8:	08db      	lsrs	r3, r3, #3
 800b9da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	fb02 f303 	mul.w	r3, r2, r3
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 8111 	beq.w	800bc1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	f000 8083 	beq.w	800bb06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	f200 80a1 	bhi.w	800bb4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d056      	beq.n	800bac2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba14:	e099      	b.n	800bb4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba16:	4b88      	ldr	r3, [pc, #544]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d02d      	beq.n	800ba7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba22:	4b85      	ldr	r3, [pc, #532]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	08db      	lsrs	r3, r3, #3
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	4a83      	ldr	r2, [pc, #524]	@ (800bc3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ba2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba32:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	ee07 3a90 	vmov	s15, r3
 800ba44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba4c:	4b7a      	ldr	r3, [pc, #488]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba54:	ee07 3a90 	vmov	s15, r3
 800ba58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba60:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bc40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba78:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba7c:	e087      	b.n	800bb8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	ee07 3a90 	vmov	s15, r3
 800ba84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bc44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba90:	4b69      	ldr	r3, [pc, #420]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba98:	ee07 3a90 	vmov	s15, r3
 800ba9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bc40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800baa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800babc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bac0:	e065      	b.n	800bb8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bacc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bc48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad4:	4b58      	ldr	r3, [pc, #352]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800badc:	ee07 3a90 	vmov	s15, r3
 800bae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bc40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800baec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb04:	e043      	b.n	800bb8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	ee07 3a90 	vmov	s15, r3
 800bb0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb10:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bc4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb18:	4b47      	ldr	r3, [pc, #284]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb20:	ee07 3a90 	vmov	s15, r3
 800bb24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb2c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bc40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb48:	e021      	b.n	800bb8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	ee07 3a90 	vmov	s15, r3
 800bb50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb54:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bc44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5c:	4b36      	ldr	r3, [pc, #216]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb64:	ee07 3a90 	vmov	s15, r3
 800bb68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bc40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bb8e:	4b2a      	ldr	r3, [pc, #168]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb92:	0a5b      	lsrs	r3, r3, #9
 800bb94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb98:	ee07 3a90 	vmov	s15, r3
 800bb9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bba8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbb4:	ee17 2a90 	vmov	r2, s15
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bbbc:	4b1e      	ldr	r3, [pc, #120]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc0:	0c1b      	lsrs	r3, r3, #16
 800bbc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe2:	ee17 2a90 	vmov	r2, s15
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800bbea:	4b13      	ldr	r3, [pc, #76]	@ (800bc38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbee:	0e1b      	lsrs	r3, r3, #24
 800bbf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbf4:	ee07 3a90 	vmov	s15, r3
 800bbf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc04:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc10:	ee17 2a90 	vmov	r2, s15
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc18:	e008      	b.n	800bc2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	609a      	str	r2, [r3, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	3724      	adds	r7, #36	@ 0x24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	58024400 	.word	0x58024400
 800bc3c:	03d09000 	.word	0x03d09000
 800bc40:	46000000 	.word	0x46000000
 800bc44:	4c742400 	.word	0x4c742400
 800bc48:	4a742400 	.word	0x4a742400
 800bc4c:	4bbebc20 	.word	0x4bbebc20

0800bc50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc5e:	4b53      	ldr	r3, [pc, #332]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc62:	f003 0303 	and.w	r3, r3, #3
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d101      	bne.n	800bc6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e099      	b.n	800bda2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bc6e:	4b4f      	ldr	r3, [pc, #316]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a4e      	ldr	r2, [pc, #312]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bc74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bc78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc7a:	f7f7 ff39 	bl	8003af0 <HAL_GetTick>
 800bc7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc80:	e008      	b.n	800bc94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc82:	f7f7 ff35 	bl	8003af0 <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d901      	bls.n	800bc94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	e086      	b.n	800bda2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc94:	4b45      	ldr	r3, [pc, #276]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1f0      	bne.n	800bc82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bca0:	4b42      	ldr	r3, [pc, #264]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	031b      	lsls	r3, r3, #12
 800bcae:	493f      	ldr	r1, [pc, #252]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	628b      	str	r3, [r1, #40]	@ 0x28
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	025b      	lsls	r3, r3, #9
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	431a      	orrs	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	041b      	lsls	r3, r3, #16
 800bcd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	061b      	lsls	r3, r3, #24
 800bce0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bce4:	4931      	ldr	r1, [pc, #196]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bcea:	4b30      	ldr	r3, [pc, #192]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	492d      	ldr	r1, [pc, #180]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bcfc:	4b2b      	ldr	r3, [pc, #172]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd00:	f023 0220 	bic.w	r2, r3, #32
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	4928      	ldr	r1, [pc, #160]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd0e:	4b27      	ldr	r3, [pc, #156]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd12:	4a26      	ldr	r2, [pc, #152]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd14:	f023 0310 	bic.w	r3, r3, #16
 800bd18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd1a:	4b24      	ldr	r3, [pc, #144]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd1e:	4b24      	ldr	r3, [pc, #144]	@ (800bdb0 <RCCEx_PLL2_Config+0x160>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	69d2      	ldr	r2, [r2, #28]
 800bd26:	00d2      	lsls	r2, r2, #3
 800bd28:	4920      	ldr	r1, [pc, #128]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd32:	4a1e      	ldr	r2, [pc, #120]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd34:	f043 0310 	orr.w	r3, r3, #16
 800bd38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bd40:	4b1a      	ldr	r3, [pc, #104]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd44:	4a19      	ldr	r2, [pc, #100]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd4c:	e00f      	b.n	800bd6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d106      	bne.n	800bd62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd54:	4b15      	ldr	r3, [pc, #84]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd58:	4a14      	ldr	r2, [pc, #80]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd60:	e005      	b.n	800bd6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bd62:	4b12      	ldr	r3, [pc, #72]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd66:	4a11      	ldr	r2, [pc, #68]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bd6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bd6e:	4b0f      	ldr	r3, [pc, #60]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a0e      	ldr	r2, [pc, #56]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bd78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd7a:	f7f7 feb9 	bl	8003af0 <HAL_GetTick>
 800bd7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd80:	e008      	b.n	800bd94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bd82:	f7f7 feb5 	bl	8003af0 <HAL_GetTick>
 800bd86:	4602      	mov	r2, r0
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d901      	bls.n	800bd94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e006      	b.n	800bda2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd94:	4b05      	ldr	r3, [pc, #20]	@ (800bdac <RCCEx_PLL2_Config+0x15c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0f0      	beq.n	800bd82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	58024400 	.word	0x58024400
 800bdb0:	ffff0007 	.word	0xffff0007

0800bdb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdc2:	4b53      	ldr	r3, [pc, #332]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc6:	f003 0303 	and.w	r3, r3, #3
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d101      	bne.n	800bdd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e099      	b.n	800bf06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bdd2:	4b4f      	ldr	r3, [pc, #316]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a4e      	ldr	r2, [pc, #312]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bdd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdde:	f7f7 fe87 	bl	8003af0 <HAL_GetTick>
 800bde2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bde4:	e008      	b.n	800bdf8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bde6:	f7f7 fe83 	bl	8003af0 <HAL_GetTick>
 800bdea:	4602      	mov	r2, r0
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d901      	bls.n	800bdf8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e086      	b.n	800bf06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bdf8:	4b45      	ldr	r3, [pc, #276]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1f0      	bne.n	800bde6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be04:	4b42      	ldr	r3, [pc, #264]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	051b      	lsls	r3, r3, #20
 800be12:	493f      	ldr	r1, [pc, #252]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be14:	4313      	orrs	r3, r2
 800be16:	628b      	str	r3, [r1, #40]	@ 0x28
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	3b01      	subs	r3, #1
 800be28:	025b      	lsls	r3, r3, #9
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	431a      	orrs	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	3b01      	subs	r3, #1
 800be34:	041b      	lsls	r3, r3, #16
 800be36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	3b01      	subs	r3, #1
 800be42:	061b      	lsls	r3, r3, #24
 800be44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800be48:	4931      	ldr	r1, [pc, #196]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be4a:	4313      	orrs	r3, r2
 800be4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800be4e:	4b30      	ldr	r3, [pc, #192]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	492d      	ldr	r1, [pc, #180]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be5c:	4313      	orrs	r3, r2
 800be5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800be60:	4b2b      	ldr	r3, [pc, #172]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	4928      	ldr	r1, [pc, #160]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800be72:	4b27      	ldr	r3, [pc, #156]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be76:	4a26      	ldr	r2, [pc, #152]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800be7e:	4b24      	ldr	r3, [pc, #144]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be82:	4b24      	ldr	r3, [pc, #144]	@ (800bf14 <RCCEx_PLL3_Config+0x160>)
 800be84:	4013      	ands	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	69d2      	ldr	r2, [r2, #28]
 800be8a:	00d2      	lsls	r2, r2, #3
 800be8c:	4920      	ldr	r1, [pc, #128]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800be92:	4b1f      	ldr	r3, [pc, #124]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be96:	4a1e      	ldr	r2, [pc, #120]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800be98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bea4:	4b1a      	ldr	r3, [pc, #104]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea8:	4a19      	ldr	r2, [pc, #100]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800beaa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800beae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800beb0:	e00f      	b.n	800bed2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d106      	bne.n	800bec6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800beb8:	4b15      	ldr	r3, [pc, #84]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800beba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebc:	4a14      	ldr	r2, [pc, #80]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bebe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bec4:	e005      	b.n	800bed2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bec6:	4b12      	ldr	r3, [pc, #72]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beca:	4a11      	ldr	r2, [pc, #68]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800becc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bed0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bed2:	4b0f      	ldr	r3, [pc, #60]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a0e      	ldr	r2, [pc, #56]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800bed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bedc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bede:	f7f7 fe07 	bl	8003af0 <HAL_GetTick>
 800bee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bee4:	e008      	b.n	800bef8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bee6:	f7f7 fe03 	bl	8003af0 <HAL_GetTick>
 800beea:	4602      	mov	r2, r0
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d901      	bls.n	800bef8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bef4:	2303      	movs	r3, #3
 800bef6:	e006      	b.n	800bf06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bef8:	4b05      	ldr	r3, [pc, #20]	@ (800bf10 <RCCEx_PLL3_Config+0x15c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0f0      	beq.n	800bee6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	58024400 	.word	0x58024400
 800bf14:	ffff0007 	.word	0xffff0007

0800bf18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e02b      	b.n	800bf84 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d106      	bne.n	800bf46 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7f7 fbc5 	bl	80036d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2202      	movs	r2, #2
 800bf4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f004 fb73 	bl	8010644 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	461a      	mov	r2, r3
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	f004 fbc7 	bl	80106fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bf6e:	4b07      	ldr	r3, [pc, #28]	@ (800bf8c <HAL_SDRAM_Init+0x74>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a06      	ldr	r2, [pc, #24]	@ (800bf8c <HAL_SDRAM_Init+0x74>)
 800bf74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf78:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	52004000 	.word	0x52004000

0800bf90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e0f1      	b.n	800c186 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a78      	ldr	r2, [pc, #480]	@ (800c190 <HAL_SPI_Init+0x200>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d00f      	beq.n	800bfd2 <HAL_SPI_Init+0x42>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a77      	ldr	r2, [pc, #476]	@ (800c194 <HAL_SPI_Init+0x204>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d00a      	beq.n	800bfd2 <HAL_SPI_Init+0x42>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a75      	ldr	r2, [pc, #468]	@ (800c198 <HAL_SPI_Init+0x208>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d005      	beq.n	800bfd2 <HAL_SPI_Init+0x42>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	2b0f      	cmp	r3, #15
 800bfcc:	d901      	bls.n	800bfd2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e0d9      	b.n	800c186 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 fd12 	bl	800d9fc <SPI_GetPacketSize>
 800bfd8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a6c      	ldr	r2, [pc, #432]	@ (800c190 <HAL_SPI_Init+0x200>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d00c      	beq.n	800bffe <HAL_SPI_Init+0x6e>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a6a      	ldr	r2, [pc, #424]	@ (800c194 <HAL_SPI_Init+0x204>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d007      	beq.n	800bffe <HAL_SPI_Init+0x6e>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a69      	ldr	r2, [pc, #420]	@ (800c198 <HAL_SPI_Init+0x208>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d002      	beq.n	800bffe <HAL_SPI_Init+0x6e>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b08      	cmp	r3, #8
 800bffc:	d811      	bhi.n	800c022 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c002:	4a63      	ldr	r2, [pc, #396]	@ (800c190 <HAL_SPI_Init+0x200>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d009      	beq.n	800c01c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a61      	ldr	r2, [pc, #388]	@ (800c194 <HAL_SPI_Init+0x204>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d004      	beq.n	800c01c <HAL_SPI_Init+0x8c>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a60      	ldr	r2, [pc, #384]	@ (800c198 <HAL_SPI_Init+0x208>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d104      	bne.n	800c026 <HAL_SPI_Init+0x96>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b10      	cmp	r3, #16
 800c020:	d901      	bls.n	800c026 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e0af      	b.n	800c186 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d106      	bne.n	800c040 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7f6 fd84 	bl	8002b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2202      	movs	r2, #2
 800c044:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f022 0201 	bic.w	r2, r2, #1
 800c056:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c062:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	699b      	ldr	r3, [r3, #24]
 800c068:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c06c:	d119      	bne.n	800c0a2 <HAL_SPI_Init+0x112>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c076:	d103      	bne.n	800c080 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d008      	beq.n	800c092 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10c      	bne.n	800c0a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c090:	d107      	bne.n	800c0a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c0a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69da      	ldr	r2, [r3, #28]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0aa:	431a      	orrs	r2, r3
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b4:	ea42 0103 	orr.w	r1, r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	430a      	orrs	r2, r1
 800c0c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0cc:	431a      	orrs	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	431a      	orrs	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	431a      	orrs	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c102:	ea42 0103 	orr.w	r1, r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d113      	bne.n	800c142 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c12c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c140:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f022 0201 	bic.w	r2, r2, #1
 800c150:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	40013000 	.word	0x40013000
 800c194:	40003800 	.word	0x40003800
 800c198:	40003c00 	.word	0x40003c00

0800c19c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	@ 0x28
 800c1a0:	af02      	add	r7, sp, #8
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	603b      	str	r3, [r7, #0]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	3320      	adds	r3, #32
 800c1b2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <HAL_SPI_Transmit+0x2a>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e1d7      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1ce:	f7f7 fc8f 	bl	8003af0 <HAL_GetTick>
 800c1d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d007      	beq.n	800c1f0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800c1ec:	7efb      	ldrb	r3, [r7, #27]
 800c1ee:	e1c2      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <HAL_SPI_Transmit+0x60>
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d107      	bne.n	800c20c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800c208:	7efb      	ldrb	r3, [r7, #27]
 800c20a:	e1b4      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2203      	movs	r2, #3
 800c210:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	88fa      	ldrh	r2, [r7, #6]
 800c226:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	88fa      	ldrh	r2, [r7, #6]
 800c22e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c25c:	d107      	bne.n	800c26e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c26c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	4b96      	ldr	r3, [pc, #600]	@ (800c4d0 <HAL_SPI_Transmit+0x334>)
 800c276:	4013      	ands	r3, r2
 800c278:	88f9      	ldrh	r1, [r7, #6]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	6812      	ldr	r2, [r2, #0]
 800c27e:	430b      	orrs	r3, r1
 800c280:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f042 0201 	orr.w	r2, r2, #1
 800c290:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c29a:	d107      	bne.n	800c2ac <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	2b0f      	cmp	r3, #15
 800c2b2:	d947      	bls.n	800c344 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c2b4:	e03f      	b.n	800c336 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	f003 0302 	and.w	r3, r3, #2
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d114      	bne.n	800c2ee <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6812      	ldr	r2, [r2, #0]
 800c2ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2d4:	1d1a      	adds	r2, r3, #4
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c2ec:	e023      	b.n	800c336 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ee:	f7f7 fbff 	bl	8003af0 <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d803      	bhi.n	800c306 <HAL_SPI_Transmit+0x16a>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c304:	d102      	bne.n	800c30c <HAL_SPI_Transmit+0x170>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d114      	bne.n	800c336 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f001 faa7 	bl	800d860 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c332:	2303      	movs	r3, #3
 800c334:	e11f      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1b9      	bne.n	800c2b6 <HAL_SPI_Transmit+0x11a>
 800c342:	e0f2      	b.n	800c52a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	2b07      	cmp	r3, #7
 800c34a:	f240 80e7 	bls.w	800c51c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c34e:	e05d      	b.n	800c40c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d132      	bne.n	800c3c4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c364:	b29b      	uxth	r3, r3
 800c366:	2b01      	cmp	r3, #1
 800c368:	d918      	bls.n	800c39c <HAL_SPI_Transmit+0x200>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d014      	beq.n	800c39c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6812      	ldr	r2, [r2, #0]
 800c37c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c382:	1d1a      	adds	r2, r3, #4
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c38e:	b29b      	uxth	r3, r3
 800c390:	3b02      	subs	r3, #2
 800c392:	b29a      	uxth	r2, r3
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c39a:	e037      	b.n	800c40c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3a0:	881a      	ldrh	r2, [r3, #0]
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3aa:	1c9a      	adds	r2, r3, #2
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3c2:	e023      	b.n	800c40c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3c4:	f7f7 fb94 	bl	8003af0 <HAL_GetTick>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d803      	bhi.n	800c3dc <HAL_SPI_Transmit+0x240>
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d102      	bne.n	800c3e2 <HAL_SPI_Transmit+0x246>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d114      	bne.n	800c40c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f001 fa3c 	bl	800d860 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e0b4      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c412:	b29b      	uxth	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d19b      	bne.n	800c350 <HAL_SPI_Transmit+0x1b4>
 800c418:	e087      	b.n	800c52a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	f003 0302 	and.w	r3, r3, #2
 800c424:	2b02      	cmp	r3, #2
 800c426:	d155      	bne.n	800c4d4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c42e:	b29b      	uxth	r3, r3
 800c430:	2b03      	cmp	r3, #3
 800c432:	d918      	bls.n	800c466 <HAL_SPI_Transmit+0x2ca>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c438:	2b40      	cmp	r3, #64	@ 0x40
 800c43a:	d914      	bls.n	800c466 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6812      	ldr	r2, [r2, #0]
 800c446:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c44c:	1d1a      	adds	r2, r3, #4
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c458:	b29b      	uxth	r3, r3
 800c45a:	3b04      	subs	r3, #4
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c464:	e05a      	b.n	800c51c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d917      	bls.n	800c4a2 <HAL_SPI_Transmit+0x306>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c476:	2b00      	cmp	r3, #0
 800c478:	d013      	beq.n	800c4a2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c47e:	881a      	ldrh	r2, [r3, #0]
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c488:	1c9a      	adds	r2, r3, #2
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c494:	b29b      	uxth	r3, r3
 800c496:	3b02      	subs	r3, #2
 800c498:	b29a      	uxth	r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c4a0:	e03c      	b.n	800c51c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3320      	adds	r3, #32
 800c4ac:	7812      	ldrb	r2, [r2, #0]
 800c4ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c4cc:	e026      	b.n	800c51c <HAL_SPI_Transmit+0x380>
 800c4ce:	bf00      	nop
 800c4d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4d4:	f7f7 fb0c 	bl	8003af0 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d803      	bhi.n	800c4ec <HAL_SPI_Transmit+0x350>
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ea:	d102      	bne.n	800c4f2 <HAL_SPI_Transmit+0x356>
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d114      	bne.n	800c51c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f001 f9b4 	bl	800d860 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c506:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e02c      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c522:	b29b      	uxth	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	f47f af78 	bne.w	800c41a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2200      	movs	r2, #0
 800c532:	2108      	movs	r1, #8
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f001 fa33 	bl	800d9a0 <SPI_WaitOnFlagUntilTimeout>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d007      	beq.n	800c550 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c546:	f043 0220 	orr.w	r2, r3, #32
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f001 f985 	bl	800d860 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d001      	beq.n	800c574 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c570:	2301      	movs	r3, #1
 800c572:	e000      	b.n	800c576 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c574:	7efb      	ldrb	r3, [r7, #27]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3720      	adds	r7, #32
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop

0800c580 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	@ 0x28
 800c584:	af02      	add	r7, sp, #8
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	4613      	mov	r3, r2
 800c58e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3330      	adds	r3, #48	@ 0x30
 800c59a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5a4:	d112      	bne.n	800c5cc <HAL_SPI_Receive+0x4c>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10e      	bne.n	800c5cc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2204      	movs	r2, #4
 800c5b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c5b6:	88fa      	ldrh	r2, [r7, #6]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 f9ce 	bl	800c964 <HAL_SPI_TransmitReceive>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	e1c7      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_SPI_Receive+0x5a>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e1c0      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5e2:	f7f7 fa85 	bl	8003af0 <HAL_GetTick>
 800c5e6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d007      	beq.n	800c604 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800c600:	7ffb      	ldrb	r3, [r7, #31]
 800c602:	e1ab      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d002      	beq.n	800c610 <HAL_SPI_Receive+0x90>
 800c60a:	88fb      	ldrh	r3, [r7, #6]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d107      	bne.n	800c620 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800c61c:	7ffb      	ldrb	r3, [r7, #31]
 800c61e:	e19d      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2204      	movs	r2, #4
 800c624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	88fa      	ldrh	r2, [r7, #6]
 800c63a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	88fa      	ldrh	r2, [r7, #6]
 800c642:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c670:	d107      	bne.n	800c682 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c680:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	4b94      	ldr	r3, [pc, #592]	@ (800c8dc <HAL_SPI_Receive+0x35c>)
 800c68a:	4013      	ands	r3, r2
 800c68c:	88f9      	ldrh	r1, [r7, #6]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	6812      	ldr	r2, [r2, #0]
 800c692:	430b      	orrs	r3, r1
 800c694:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f042 0201 	orr.w	r2, r2, #1
 800c6a4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6ae:	d107      	bne.n	800c6c0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	2b0f      	cmp	r3, #15
 800c6c6:	d948      	bls.n	800c75a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c6c8:	e040      	b.n	800c74c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	695a      	ldr	r2, [r3, #20]
 800c6d0:	f248 0308 	movw	r3, #32776	@ 0x8008
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d014      	beq.n	800c704 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c6e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ea:	1d1a      	adds	r2, r3, #4
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c702:	e023      	b.n	800c74c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c704:	f7f7 f9f4 	bl	8003af0 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	429a      	cmp	r2, r3
 800c712:	d803      	bhi.n	800c71c <HAL_SPI_Receive+0x19c>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d102      	bne.n	800c722 <HAL_SPI_Receive+0x1a2>
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d114      	bne.n	800c74c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f001 f89c 	bl	800d860 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e107      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c752:	b29b      	uxth	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1b8      	bne.n	800c6ca <HAL_SPI_Receive+0x14a>
 800c758:	e0ed      	b.n	800c936 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	2b07      	cmp	r3, #7
 800c760:	f240 80e2 	bls.w	800c928 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c764:	e05b      	b.n	800c81e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d030      	beq.n	800c7d6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d014      	beq.n	800c7ac <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c78a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c78c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c792:	1d1a      	adds	r2, r3, #4
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	3b02      	subs	r3, #2
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7aa:	e038      	b.n	800c81e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7b0:	69ba      	ldr	r2, [r7, #24]
 800c7b2:	8812      	ldrh	r2, [r2, #0]
 800c7b4:	b292      	uxth	r2, r2
 800c7b6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7bc:	1c9a      	adds	r2, r3, #2
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7d4:	e023      	b.n	800c81e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7d6:	f7f7 f98b 	bl	8003af0 <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d803      	bhi.n	800c7ee <HAL_SPI_Receive+0x26e>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ec:	d102      	bne.n	800c7f4 <HAL_SPI_Receive+0x274>
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d114      	bne.n	800c81e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f001 f833 	bl	800d860 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c808:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e09e      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c824:	b29b      	uxth	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d19d      	bne.n	800c766 <HAL_SPI_Receive+0x1e6>
 800c82a:	e084      	b.n	800c936 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d052      	beq.n	800c8e0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d014      	beq.n	800c872 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c850:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c852:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c858:	1d1a      	adds	r2, r3, #4
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c864:	b29b      	uxth	r3, r3
 800c866:	3b04      	subs	r3, #4
 800c868:	b29a      	uxth	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c870:	e05a      	b.n	800c928 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c87c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c880:	d914      	bls.n	800c8ac <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	8812      	ldrh	r2, [r2, #0]
 800c88a:	b292      	uxth	r2, r2
 800c88c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c892:	1c9a      	adds	r2, r3, #2
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	3b02      	subs	r3, #2
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8aa:	e03d      	b.n	800c928 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8b8:	7812      	ldrb	r2, [r2, #0]
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8da:	e025      	b.n	800c928 <HAL_SPI_Receive+0x3a8>
 800c8dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8e0:	f7f7 f906 	bl	8003af0 <HAL_GetTick>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d803      	bhi.n	800c8f8 <HAL_SPI_Receive+0x378>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f6:	d102      	bne.n	800c8fe <HAL_SPI_Receive+0x37e>
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d114      	bne.n	800c928 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 ffae 	bl	800d860 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c912:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e019      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c92e:	b29b      	uxth	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	f47f af7b 	bne.w	800c82c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f000 ff92 	bl	800d860 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e000      	b.n	800c95c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800c95a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3720      	adds	r7, #32
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08e      	sub	sp, #56	@ 0x38
 800c968:	af02      	add	r7, sp, #8
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	3320      	adds	r3, #32
 800c97e:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3330      	adds	r3, #48	@ 0x30
 800c986:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d101      	bne.n	800c996 <HAL_SPI_TransmitReceive+0x32>
 800c992:	2302      	movs	r3, #2
 800c994:	e2ce      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c99e:	f7f7 f8a7 	bl	8003af0 <HAL_GetTick>
 800c9a2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c9a4:	887b      	ldrh	r3, [r7, #2]
 800c9a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  initial_RxXferCount = Size;
 800c9a8:	887b      	ldrh	r3, [r7, #2]
 800c9aa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  tmp_state           = hspi->State;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c9b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c9ba:	7efb      	ldrb	r3, [r7, #27]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d014      	beq.n	800c9ea <HAL_SPI_TransmitReceive+0x86>
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c9c6:	d106      	bne.n	800c9d6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d102      	bne.n	800c9d6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c9d0:	7efb      	ldrb	r3, [r7, #27]
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	d009      	beq.n	800c9ea <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    __HAL_UNLOCK(hspi);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800c9e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c9e8:	e2a4      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d005      	beq.n	800c9fc <HAL_SPI_TransmitReceive+0x98>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <HAL_SPI_TransmitReceive+0x98>
 800c9f6:	887b      	ldrh	r3, [r7, #2]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d109      	bne.n	800ca10 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    __HAL_UNLOCK(hspi);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800ca0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca0e:	e291      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b04      	cmp	r3, #4
 800ca1a:	d003      	beq.n	800ca24 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2205      	movs	r2, #5
 800ca20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	887a      	ldrh	r2, [r7, #2]
 800ca36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	887a      	ldrh	r2, [r7, #2]
 800ca3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	887a      	ldrh	r2, [r7, #2]
 800ca4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	887a      	ldrh	r2, [r7, #2]
 800ca54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	4b81      	ldr	r3, [pc, #516]	@ (800cc70 <HAL_SPI_TransmitReceive+0x30c>)
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	8879      	ldrh	r1, [r7, #2]
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	6812      	ldr	r2, [r2, #0]
 800ca74:	430b      	orrs	r3, r1
 800ca76:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f042 0201 	orr.w	r2, r2, #1
 800ca86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca90:	d107      	bne.n	800caa2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800caa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	2b0f      	cmp	r3, #15
 800caa8:	d970      	bls.n	800cb8c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800caaa:	e068      	b.n	800cb7e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	695b      	ldr	r3, [r3, #20]
 800cab2:	f003 0302 	and.w	r3, r3, #2
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d11a      	bne.n	800caf0 <HAL_SPI_TransmitReceive+0x18c>
 800caba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d017      	beq.n	800caf0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6812      	ldr	r2, [r2, #0]
 800caca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cadc:	b29b      	uxth	r3, r3
 800cade:	3b01      	subs	r3, #1
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800caee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	695a      	ldr	r2, [r3, #20]
 800caf6:	f248 0308 	movw	r3, #32776	@ 0x8008
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01a      	beq.n	800cb36 <HAL_SPI_TransmitReceive+0x1d2>
 800cb00:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d017      	beq.n	800cb36 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb16:	1d1a      	adds	r2, r3, #4
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount --;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	3b01      	subs	r3, #1
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb36:	f7f6 ffdb 	bl	8003af0 <HAL_GetTick>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d803      	bhi.n	800cb4e <HAL_SPI_TransmitReceive+0x1ea>
 800cb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4c:	d102      	bne.n	800cb54 <HAL_SPI_TransmitReceive+0x1f0>
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d114      	bne.n	800cb7e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f000 fe83 	bl	800d860 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e1da      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cb7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d193      	bne.n	800caac <HAL_SPI_TransmitReceive+0x148>
 800cb84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d190      	bne.n	800caac <HAL_SPI_TransmitReceive+0x148>
 800cb8a:	e1ac      	b.n	800cee6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	2b07      	cmp	r3, #7
 800cb92:	f240 81a0 	bls.w	800ced6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cb96:	e0a9      	b.n	800ccec <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d139      	bne.n	800cc1a <HAL_SPI_TransmitReceive+0x2b6>
 800cba6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d036      	beq.n	800cc1a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cbac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d91c      	bls.n	800cbec <HAL_SPI_TransmitReceive+0x288>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d018      	beq.n	800cbec <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6812      	ldr	r2, [r2, #0]
 800cbc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbca:	1d1a      	adds	r2, r3, #4
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	3b02      	subs	r3, #2
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cbe8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cbea:	e016      	b.n	800cc1a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbf0:	881a      	ldrh	r2, [r3, #0]
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbfa:	1c9a      	adds	r2, r3, #2
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d03d      	beq.n	800cca4 <HAL_SPI_TransmitReceive+0x340>
 800cc28:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d03a      	beq.n	800cca4 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d01b      	beq.n	800cc74 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cc46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc4c:	1d1a      	adds	r2, r3, #4
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	3b02      	subs	r3, #2
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cc6c:	e01a      	b.n	800cca4 <HAL_SPI_TransmitReceive+0x340>
 800cc6e:	bf00      	nop
 800cc70:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc78:	6a3a      	ldr	r2, [r7, #32]
 800cc7a:	8812      	ldrh	r2, [r2, #0]
 800cc7c:	b292      	uxth	r2, r2
 800cc7e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc84:	1c9a      	adds	r2, r3, #2
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	3b01      	subs	r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cca2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cca4:	f7f6 ff24 	bl	8003af0 <HAL_GetTick>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d803      	bhi.n	800ccbc <HAL_SPI_TransmitReceive+0x358>
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccba:	d102      	bne.n	800ccc2 <HAL_SPI_TransmitReceive+0x35e>
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d114      	bne.n	800ccec <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 fdcc 	bl	800d860 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e123      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ccec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f47f af52 	bne.w	800cb98 <HAL_SPI_TransmitReceive+0x234>
 800ccf4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f47f af4e 	bne.w	800cb98 <HAL_SPI_TransmitReceive+0x234>
 800ccfc:	e0f3      	b.n	800cee6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	f003 0302 	and.w	r3, r3, #2
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d15a      	bne.n	800cdc2 <HAL_SPI_TransmitReceive+0x45e>
 800cd0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d057      	beq.n	800cdc2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cd12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	d91c      	bls.n	800cd52 <HAL_SPI_TransmitReceive+0x3ee>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd1c:	2b40      	cmp	r3, #64	@ 0x40
 800cd1e:	d918      	bls.n	800cd52 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6812      	ldr	r2, [r2, #0]
 800cd2a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd30:	1d1a      	adds	r2, r3, #4
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	3b04      	subs	r3, #4
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd4e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cd50:	e037      	b.n	800cdc2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cd52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d91b      	bls.n	800cd90 <HAL_SPI_TransmitReceive+0x42c>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d017      	beq.n	800cd90 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd64:	881a      	ldrh	r2, [r3, #0]
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd6e:	1c9a      	adds	r2, r3, #2
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	3b02      	subs	r3, #2
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cd8e:	e018      	b.n	800cdc2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3320      	adds	r3, #32
 800cd9a:	7812      	ldrb	r2, [r2, #0]
 800cd9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cda2:	1c5a      	adds	r2, r3, #1
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d05e      	beq.n	800ce8e <HAL_SPI_TransmitReceive+0x52a>
 800cdd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d05b      	beq.n	800ce8e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	695b      	ldr	r3, [r3, #20]
 800cddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d018      	beq.n	800ce16 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cdee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdf4:	1d1a      	adds	r2, r3, #4
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	3b04      	subs	r3, #4
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ce14:	e03b      	b.n	800ce8e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ce20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce24:	d918      	bls.n	800ce58 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce2a:	6a3a      	ldr	r2, [r7, #32]
 800ce2c:	8812      	ldrh	r2, [r2, #0]
 800ce2e:	b292      	uxth	r2, r2
 800ce30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce36:	1c9a      	adds	r2, r3, #2
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	3b02      	subs	r3, #2
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce54:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ce56:	e01a      	b.n	800ce8e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce64:	7812      	ldrb	r2, [r2, #0]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce8c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce8e:	f7f6 fe2f 	bl	8003af0 <HAL_GetTick>
 800ce92:	4602      	mov	r2, r0
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d803      	bhi.n	800cea6 <HAL_SPI_TransmitReceive+0x542>
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea4:	d102      	bne.n	800ceac <HAL_SPI_TransmitReceive+0x548>
 800cea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d114      	bne.n	800ced6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 fcd7 	bl	800d860 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cec0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 800ced2:	2303      	movs	r3, #3
 800ced4:	e02e      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ced6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f47f af10 	bne.w	800ccfe <HAL_SPI_TransmitReceive+0x39a>
 800cede:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f47f af0c 	bne.w	800ccfe <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	2200      	movs	r2, #0
 800ceee:	2108      	movs	r1, #8
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 fd55 	bl	800d9a0 <SPI_WaitOnFlagUntilTimeout>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d007      	beq.n	800cf0c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf02:	f043 0220 	orr.w	r2, r3, #32
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f000 fca7 	bl	800d860 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e001      	b.n	800cf34 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800cf30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3730      	adds	r7, #48	@ 0x30
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
 800cf48:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d101      	bne.n	800cf5c <HAL_SPI_TransmitReceive_DMA+0x20>
 800cf58:	2302      	movs	r3, #2
 800cf5a:	e1b4      	b.n	800d2c6 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf6a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cf72:	7dbb      	ldrb	r3, [r7, #22]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d012      	beq.n	800cf9e <HAL_SPI_TransmitReceive_DMA+0x62>
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf7e:	d106      	bne.n	800cf8e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d102      	bne.n	800cf8e <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800cf88:	7dbb      	ldrb	r3, [r7, #22]
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	d007      	beq.n	800cf9e <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800cf8e:	2302      	movs	r3, #2
 800cf90:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	e193      	b.n	800d2c6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d005      	beq.n	800cfb0 <HAL_SPI_TransmitReceive_DMA+0x74>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d002      	beq.n	800cfb0 <HAL_SPI_TransmitReceive_DMA+0x74>
 800cfaa:	887b      	ldrh	r3, [r7, #2]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d107      	bne.n	800cfc0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	e182      	b.n	800d2c6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	d003      	beq.n	800cfd4 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2205      	movs	r2, #5
 800cfd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	887a      	ldrh	r2, [r7, #2]
 800cfe6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	887a      	ldrh	r2, [r7, #2]
 800cfee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	887a      	ldrh	r2, [r7, #2]
 800cffc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	887a      	ldrh	r2, [r7, #2]
 800d004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	689a      	ldr	r2, [r3, #8]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d022:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	2b0f      	cmp	r3, #15
 800d02a:	d905      	bls.n	800d038 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d036:	d10f      	bne.n	800d058 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d03c:	2b07      	cmp	r3, #7
 800d03e:	d913      	bls.n	800d068 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d04a:	d00d      	beq.n	800d068 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d050:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d056:	d007      	beq.n	800d068 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800d058:	2301      	movs	r3, #1
 800d05a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	e12e      	b.n	800d2c6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	2b07      	cmp	r3, #7
 800d06e:	d840      	bhi.n	800d0f2 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d07a:	d109      	bne.n	800d090 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d082:	b29b      	uxth	r3, r3
 800d084:	3301      	adds	r3, #1
 800d086:	105b      	asrs	r3, r3, #1
 800d088:	b29a      	uxth	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d09a:	d109      	bne.n	800d0b0 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	3303      	adds	r3, #3
 800d0a6:	109b      	asrs	r3, r3, #2
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0ba:	d109      	bne.n	800d0d0 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	105b      	asrs	r3, r3, #1
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d0d4:	699b      	ldr	r3, [r3, #24]
 800d0d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d0da:	d12e      	bne.n	800d13a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	3303      	adds	r3, #3
 800d0e6:	109b      	asrs	r3, r3, #2
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d0f0:	e023      	b.n	800d13a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	2b0f      	cmp	r3, #15
 800d0f8:	d81f      	bhi.n	800d13a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d104:	d109      	bne.n	800d11a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	3301      	adds	r3, #1
 800d110:	105b      	asrs	r3, r3, #1
 800d112:	b29a      	uxth	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d124:	d109      	bne.n	800d13a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	3301      	adds	r3, #1
 800d130:	105b      	asrs	r3, r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b04      	cmp	r3, #4
 800d144:	d108      	bne.n	800d158 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d14a:	4a61      	ldr	r2, [pc, #388]	@ (800d2d0 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800d14c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d152:	4a60      	ldr	r2, [pc, #384]	@ (800d2d4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800d154:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d156:	e007      	b.n	800d168 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d15c:	4a5e      	ldr	r2, [pc, #376]	@ (800d2d8 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800d15e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d164:	4a5d      	ldr	r2, [pc, #372]	@ (800d2dc <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800d166:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d16c:	4a5c      	ldr	r2, [pc, #368]	@ (800d2e0 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800d16e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d174:	2200      	movs	r2, #0
 800d176:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	3330      	adds	r3, #48	@ 0x30
 800d182:	4619      	mov	r1, r3
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d188:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d190:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d192:	f7f8 fcc7 	bl	8005b24 <HAL_DMA_Start_IT>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d013      	beq.n	800d1c4 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1a2:	f043 0210 	orr.w	r2, r3, #16
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    errorcode = HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	e080      	b.n	800d2c6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689a      	ldr	r2, [r3, #8]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1d2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1d8:	2200      	movs	r2, #0
 800d1da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3320      	adds	r3, #32
 800d204:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d20c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d20e:	f7f8 fc89 	bl	8005b24 <HAL_DMA_Start_IT>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d013      	beq.n	800d240 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d21e:	f043 0210 	orr.w	r2, r3, #16
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    errorcode = HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	e042      	b.n	800d2c6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d244:	69db      	ldr	r3, [r3, #28]
 800d246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d24a:	d108      	bne.n	800d25e <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6859      	ldr	r1, [r3, #4]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	4b23      	ldr	r3, [pc, #140]	@ (800d2e4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800d258:	400b      	ands	r3, r1
 800d25a:	6053      	str	r3, [r2, #4]
 800d25c:	e009      	b.n	800d272 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	685a      	ldr	r2, [r3, #4]
 800d264:	4b1f      	ldr	r3, [pc, #124]	@ (800d2e4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800d266:	4013      	ands	r3, r2
 800d268:	8879      	ldrh	r1, [r7, #2]
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	6812      	ldr	r2, [r2, #0]
 800d26e:	430b      	orrs	r3, r1
 800d270:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d280:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	691a      	ldr	r2, [r3, #16]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800d290:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f042 0201 	orr.w	r2, r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d2aa:	d107      	bne.n	800d2bc <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2ba:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return errorcode;
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	0800d7ad 	.word	0x0800d7ad
 800d2d4:	0800d721 	.word	0x0800d721
 800d2d8:	0800d7c9 	.word	0x0800d7c9
 800d2dc:	0800d767 	.word	0x0800d767
 800d2e0:	0800d7e5 	.word	0x0800d7e5
 800d2e4:	ffff0000 	.word	0xffff0000

0800d2e8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	@ 0x28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d300:	6a3a      	ldr	r2, [r7, #32]
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	4013      	ands	r3, r2
 800d306:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d310:	2300      	movs	r3, #0
 800d312:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d31a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3330      	adds	r3, #48	@ 0x30
 800d322:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d113      	bne.n	800d356 <HAL_SPI_IRQHandler+0x6e>
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	f003 0320 	and.w	r3, r3, #32
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10e      	bne.n	800d356 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d009      	beq.n	800d356 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	4798      	blx	r3
    handled = 1UL;
 800d352:	2301      	movs	r3, #1
 800d354:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10f      	bne.n	800d380 <HAL_SPI_IRQHandler+0x98>
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d370:	2b00      	cmp	r3, #0
 800d372:	d105      	bne.n	800d380 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	4798      	blx	r3
    handled = 1UL;
 800d37c:	2301      	movs	r3, #1
 800d37e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	f003 0320 	and.w	r3, r3, #32
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10f      	bne.n	800d3aa <HAL_SPI_IRQHandler+0xc2>
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	f003 0302 	and.w	r3, r3, #2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00a      	beq.n	800d3aa <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d105      	bne.n	800d3aa <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	4798      	blx	r3
    handled = 1UL;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	627b      	str	r3, [r7, #36]	@ 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f040 816f 	bne.w	800d690 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	f003 0308 	and.w	r3, r3, #8
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 80a0 	beq.w	800d4fe <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	699a      	ldr	r2, [r3, #24]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f042 0208 	orr.w	r2, r2, #8
 800d3cc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	699a      	ldr	r2, [r3, #24]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f042 0210 	orr.w	r2, r2, #16
 800d3dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	699a      	ldr	r2, [r3, #24]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3ec:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	691a      	ldr	r2, [r3, #16]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f022 0208 	bic.w	r2, r2, #8
 800d3fc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00f      	beq.n	800d428 <HAL_SPI_IRQHandler+0x140>
 800d408:	7cfb      	ldrb	r3, [r7, #19]
 800d40a:	2b04      	cmp	r3, #4
 800d40c:	d004      	beq.n	800d418 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d412:	69db      	ldr	r3, [r3, #28]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d007      	beq.n	800d428 <HAL_SPI_IRQHandler+0x140>
 800d418:	7cfb      	ldrb	r3, [r7, #19]
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d059      	beq.n	800d4d2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d422:	69db      	ldr	r3, [r3, #28]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d154      	bne.n	800d4d2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d432:	2b00      	cmp	r3, #0
 800d434:	d13d      	bne.n	800d4b2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800d436:	e036      	b.n	800d4a6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	2b0f      	cmp	r3, #15
 800d43e:	d90b      	bls.n	800d458 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d448:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d44a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d450:	1d1a      	adds	r2, r3, #4
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	665a      	str	r2, [r3, #100]	@ 0x64
 800d456:	e01d      	b.n	800d494 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	2b07      	cmp	r3, #7
 800d45e:	d90b      	bls.n	800d478 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	8812      	ldrh	r2, [r2, #0]
 800d468:	b292      	uxth	r2, r2
 800d46a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d470:	1c9a      	adds	r2, r3, #2
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	665a      	str	r2, [r3, #100]	@ 0x64
 800d476:	e00d      	b.n	800d494 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d484:	7812      	ldrb	r2, [r2, #0]
 800d486:	b2d2      	uxtb	r2, r2
 800d488:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	665a      	str	r2, [r3, #100]	@ 0x64
          }

          hspi->RxXferCount--;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	3b01      	subs	r3, #1
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        while (hspi->RxXferCount != 0UL)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1c2      	bne.n	800d438 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f9d4 	bl	800d860 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f91e 	bl	800d70c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800d4d0:	e0e3      	b.n	800d69a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d4d2:	7cfb      	ldrb	r3, [r7, #19]
 800d4d4:	2b05      	cmp	r3, #5
 800d4d6:	d103      	bne.n	800d4e0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f8f9 	bl	800d6d0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d4de:	e0d9      	b.n	800d694 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d4e0:	7cfb      	ldrb	r3, [r7, #19]
 800d4e2:	2b04      	cmp	r3, #4
 800d4e4:	d103      	bne.n	800d4ee <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f8e8 	bl	800d6bc <HAL_SPI_RxCpltCallback>
    return;
 800d4ec:	e0d2      	b.n	800d694 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d4ee:	7cfb      	ldrb	r3, [r7, #19]
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	f040 80cf 	bne.w	800d694 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f8d6 	bl	800d6a8 <HAL_SPI_TxCpltCallback>
    return;
 800d4fc:	e0ca      	b.n	800d694 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00d      	beq.n	800d524 <HAL_SPI_IRQHandler+0x23c>
 800d508:	6a3b      	ldr	r3, [r7, #32]
 800d50a:	f003 0308 	and.w	r3, r3, #8
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d008      	beq.n	800d524 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	699a      	ldr	r2, [r3, #24]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d520:	619a      	str	r2, [r3, #24]

    return;
 800d522:	e0ba      	b.n	800d69a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 80b5 	beq.w	800d69a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00f      	beq.n	800d55a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d540:	f043 0204 	orr.w	r2, r3, #4
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	699a      	ldr	r2, [r3, #24]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d558:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00f      	beq.n	800d584 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d56a:	f043 0201 	orr.w	r2, r3, #1
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699a      	ldr	r2, [r3, #24]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d582:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00f      	beq.n	800d5ae <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d594:	f043 0208 	orr.w	r2, r3, #8
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	699a      	ldr	r2, [r3, #24]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d5ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	f003 0320 	and.w	r3, r3, #32
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00f      	beq.n	800d5d8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	699a      	ldr	r2, [r3, #24]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f042 0220 	orr.w	r2, r2, #32
 800d5d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d05a      	beq.n	800d698 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f022 0201 	bic.w	r2, r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6919      	ldr	r1, [r3, #16]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	4b28      	ldr	r3, [pc, #160]	@ (800d6a0 <HAL_SPI_IRQHandler+0x3b8>)
 800d5fe:	400b      	ands	r3, r1
 800d600:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d608:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d60c:	d138      	bne.n	800d680 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	689a      	ldr	r2, [r3, #8]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d61c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d013      	beq.n	800d64e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d62a:	4a1e      	ldr	r2, [pc, #120]	@ (800d6a4 <HAL_SPI_IRQHandler+0x3bc>)
 800d62c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d632:	4618      	mov	r0, r3
 800d634:	f7f8 fffe 	bl	8006634 <HAL_DMA_Abort_IT>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d007      	beq.n	800d64e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d644:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d652:	2b00      	cmp	r3, #0
 800d654:	d020      	beq.n	800d698 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d65a:	4a12      	ldr	r2, [pc, #72]	@ (800d6a4 <HAL_SPI_IRQHandler+0x3bc>)
 800d65c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d662:	4618      	mov	r0, r3
 800d664:	f7f8 ffe6 	bl	8006634 <HAL_DMA_Abort_IT>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d014      	beq.n	800d698 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d674:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d67e:	e00b      	b.n	800d698 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f83f 	bl	800d70c <HAL_SPI_ErrorCallback>
    return;
 800d68e:	e003      	b.n	800d698 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800d690:	bf00      	nop
 800d692:	e002      	b.n	800d69a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d694:	bf00      	nop
 800d696:	e000      	b.n	800d69a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d698:	bf00      	nop
  }
}
 800d69a:	3728      	adds	r7, #40	@ 0x28
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	fffffc94 	.word	0xfffffc94
 800d6a4:	0800d82b 	.word	0x0800d82b

0800d6a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d72c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b07      	cmp	r3, #7
 800d738:	d011      	beq.n	800d75e <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d744:	d103      	bne.n	800d74e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f7ff ffb8 	bl	800d6bc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800d74c:	e007      	b.n	800d75e <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	691a      	ldr	r2, [r3, #16]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f042 0208 	orr.w	r2, r2, #8
 800d75c:	611a      	str	r2, [r3, #16]
}
 800d75e:	bf00      	nop
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d772:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b07      	cmp	r3, #7
 800d77e:	d011      	beq.n	800d7a4 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d784:	69db      	ldr	r3, [r3, #28]
 800d786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d78a:	d103      	bne.n	800d794 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f7ff ff9f 	bl	800d6d0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800d792:	e007      	b.n	800d7a4 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	691a      	ldr	r2, [r3, #16]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f042 0208 	orr.w	r2, r2, #8
 800d7a2:	611a      	str	r2, [r3, #16]
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff ff92 	bl	800d6e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d7c0:	bf00      	nop
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff ff8e 	bl	800d6f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7f0:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7fa f88e 	bl	8007914 <HAL_DMA_GetError>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d011      	beq.n	800d822 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 f82e 	bl	800d860 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d80a:	f043 0210 	orr.w	r2, r3, #16
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f7ff ff75 	bl	800d70c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d836:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff ff5b 	bl	800d70c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d856:	bf00      	nop
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
	...

0800d860 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d860:	b480      	push	{r7}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	699a      	ldr	r2, [r3, #24]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f042 0208 	orr.w	r2, r2, #8
 800d87e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699a      	ldr	r2, [r3, #24]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f042 0210 	orr.w	r2, r2, #16
 800d88e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f022 0201 	bic.w	r2, r2, #1
 800d89e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6919      	ldr	r1, [r3, #16]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	4b3c      	ldr	r3, [pc, #240]	@ (800d99c <SPI_CloseTransfer+0x13c>)
 800d8ac:	400b      	ands	r3, r1
 800d8ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	689a      	ldr	r2, [r3, #8]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d8be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	2b04      	cmp	r3, #4
 800d8ca:	d014      	beq.n	800d8f6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00f      	beq.n	800d8f6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	699a      	ldr	r2, [r3, #24]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f042 0220 	orr.w	r2, r2, #32
 800d8f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	2b03      	cmp	r3, #3
 800d900:	d014      	beq.n	800d92c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00f      	beq.n	800d92c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d912:	f043 0204 	orr.w	r2, r3, #4
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	699a      	ldr	r2, [r3, #24]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d92a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00f      	beq.n	800d956 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d93c:	f043 0201 	orr.w	r2, r3, #1
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	699a      	ldr	r2, [r3, #24]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d954:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00f      	beq.n	800d980 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d966:	f043 0208 	orr.w	r2, r3, #8
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	699a      	ldr	r2, [r3, #24]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d97e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d990:	bf00      	nop
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	fffffc90 	.word	0xfffffc90

0800d9a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	603b      	str	r3, [r7, #0]
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d9b0:	e010      	b.n	800d9d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9b2:	f7f6 f89d 	bl	8003af0 <HAL_GetTick>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	69ba      	ldr	r2, [r7, #24]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d803      	bhi.n	800d9ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c8:	d102      	bne.n	800d9d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d101      	bne.n	800d9d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	e00f      	b.n	800d9f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	695a      	ldr	r2, [r3, #20]
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	4013      	ands	r3, r2
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	bf0c      	ite	eq
 800d9e4:	2301      	moveq	r3, #1
 800d9e6:	2300      	movne	r3, #0
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	79fb      	ldrb	r3, [r7, #7]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d0df      	beq.n	800d9b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da08:	095b      	lsrs	r3, r3, #5
 800da0a:	3301      	adds	r3, #1
 800da0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	3301      	adds	r3, #1
 800da14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	3307      	adds	r3, #7
 800da1a:	08db      	lsrs	r3, r3, #3
 800da1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	fb02 f303 	mul.w	r3, r2, r3
}
 800da26:	4618      	mov	r0, r3
 800da28:	3714      	adds	r7, #20
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b082      	sub	sp, #8
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	e049      	b.n	800dad8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7f5 fa4f 	bl	8002efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2202      	movs	r2, #2
 800da62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3304      	adds	r3, #4
 800da6e:	4619      	mov	r1, r3
 800da70:	4610      	mov	r0, r2
 800da72:	f000 faa3 	bl	800dfbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2201      	movs	r2, #1
 800da8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2201      	movs	r2, #1
 800da92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	e049      	b.n	800db86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f841 	bl	800db8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2202      	movs	r2, #2
 800db10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f000 fa4c 	bl	800dfbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800db8e:	b480      	push	{r7}
 800db90:	b083      	sub	sp, #12
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800db96:	bf00      	nop
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
	...

0800dba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d101      	bne.n	800dbc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	e0ff      	b.n	800ddc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b14      	cmp	r3, #20
 800dbce:	f200 80f0 	bhi.w	800ddb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dbd2:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd8:	0800dc2d 	.word	0x0800dc2d
 800dbdc:	0800ddb3 	.word	0x0800ddb3
 800dbe0:	0800ddb3 	.word	0x0800ddb3
 800dbe4:	0800ddb3 	.word	0x0800ddb3
 800dbe8:	0800dc6d 	.word	0x0800dc6d
 800dbec:	0800ddb3 	.word	0x0800ddb3
 800dbf0:	0800ddb3 	.word	0x0800ddb3
 800dbf4:	0800ddb3 	.word	0x0800ddb3
 800dbf8:	0800dcaf 	.word	0x0800dcaf
 800dbfc:	0800ddb3 	.word	0x0800ddb3
 800dc00:	0800ddb3 	.word	0x0800ddb3
 800dc04:	0800ddb3 	.word	0x0800ddb3
 800dc08:	0800dcef 	.word	0x0800dcef
 800dc0c:	0800ddb3 	.word	0x0800ddb3
 800dc10:	0800ddb3 	.word	0x0800ddb3
 800dc14:	0800ddb3 	.word	0x0800ddb3
 800dc18:	0800dd31 	.word	0x0800dd31
 800dc1c:	0800ddb3 	.word	0x0800ddb3
 800dc20:	0800ddb3 	.word	0x0800ddb3
 800dc24:	0800ddb3 	.word	0x0800ddb3
 800dc28:	0800dd71 	.word	0x0800dd71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68b9      	ldr	r1, [r7, #8]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fa68 	bl	800e108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	699a      	ldr	r2, [r3, #24]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f042 0208 	orr.w	r2, r2, #8
 800dc46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	699a      	ldr	r2, [r3, #24]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f022 0204 	bic.w	r2, r2, #4
 800dc56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	6999      	ldr	r1, [r3, #24]
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	691a      	ldr	r2, [r3, #16]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	430a      	orrs	r2, r1
 800dc68:	619a      	str	r2, [r3, #24]
      break;
 800dc6a:	e0a5      	b.n	800ddb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68b9      	ldr	r1, [r7, #8]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 fad8 	bl	800e228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	699a      	ldr	r2, [r3, #24]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	699a      	ldr	r2, [r3, #24]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6999      	ldr	r1, [r3, #24]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	691b      	ldr	r3, [r3, #16]
 800dca2:	021a      	lsls	r2, r3, #8
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	619a      	str	r2, [r3, #24]
      break;
 800dcac:	e084      	b.n	800ddb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 fb41 	bl	800e33c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	69da      	ldr	r2, [r3, #28]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f042 0208 	orr.w	r2, r2, #8
 800dcc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	69da      	ldr	r2, [r3, #28]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f022 0204 	bic.w	r2, r2, #4
 800dcd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	69d9      	ldr	r1, [r3, #28]
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	691a      	ldr	r2, [r3, #16]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	61da      	str	r2, [r3, #28]
      break;
 800dcec:	e064      	b.n	800ddb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68b9      	ldr	r1, [r7, #8]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 fba9 	bl	800e44c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	69da      	ldr	r2, [r3, #28]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	69da      	ldr	r2, [r3, #28]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	69d9      	ldr	r1, [r3, #28]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	021a      	lsls	r2, r3, #8
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	430a      	orrs	r2, r1
 800dd2c:	61da      	str	r2, [r3, #28]
      break;
 800dd2e:	e043      	b.n	800ddb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	4618      	mov	r0, r3
 800dd38:	f000 fbf2 	bl	800e520 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f042 0208 	orr.w	r2, r2, #8
 800dd4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f022 0204 	bic.w	r2, r2, #4
 800dd5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	691a      	ldr	r2, [r3, #16]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	430a      	orrs	r2, r1
 800dd6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd6e:	e023      	b.n	800ddb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68b9      	ldr	r1, [r7, #8]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 fc36 	bl	800e5e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	021a      	lsls	r2, r3, #8
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	430a      	orrs	r2, r1
 800ddae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ddb0:	e002      	b.n	800ddb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	75fb      	strb	r3, [r7, #23]
      break;
 800ddb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop

0800ddcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d101      	bne.n	800dde8 <HAL_TIM_ConfigClockSource+0x1c>
 800dde4:	2302      	movs	r3, #2
 800dde6:	e0dc      	b.n	800dfa2 <HAL_TIM_ConfigClockSource+0x1d6>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	4b6a      	ldr	r3, [pc, #424]	@ (800dfac <HAL_TIM_ConfigClockSource+0x1e0>)
 800de04:	4013      	ands	r3, r2
 800de06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a64      	ldr	r2, [pc, #400]	@ (800dfb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	f000 80a9 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800de24:	4a62      	ldr	r2, [pc, #392]	@ (800dfb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de26:	4293      	cmp	r3, r2
 800de28:	f200 80ae 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de2c:	4a61      	ldr	r2, [pc, #388]	@ (800dfb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	f000 80a1 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800de34:	4a5f      	ldr	r2, [pc, #380]	@ (800dfb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800de36:	4293      	cmp	r3, r2
 800de38:	f200 80a6 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de3c:	4a5e      	ldr	r2, [pc, #376]	@ (800dfb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	f000 8099 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800de44:	4a5c      	ldr	r2, [pc, #368]	@ (800dfb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800de46:	4293      	cmp	r3, r2
 800de48:	f200 809e 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800de50:	f000 8091 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800de54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800de58:	f200 8096 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de60:	f000 8089 	beq.w	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800de64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de68:	f200 808e 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de70:	d03e      	beq.n	800def0 <HAL_TIM_ConfigClockSource+0x124>
 800de72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de76:	f200 8087 	bhi.w	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de7e:	f000 8086 	beq.w	800df8e <HAL_TIM_ConfigClockSource+0x1c2>
 800de82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de86:	d87f      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de88:	2b70      	cmp	r3, #112	@ 0x70
 800de8a:	d01a      	beq.n	800dec2 <HAL_TIM_ConfigClockSource+0xf6>
 800de8c:	2b70      	cmp	r3, #112	@ 0x70
 800de8e:	d87b      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de90:	2b60      	cmp	r3, #96	@ 0x60
 800de92:	d050      	beq.n	800df36 <HAL_TIM_ConfigClockSource+0x16a>
 800de94:	2b60      	cmp	r3, #96	@ 0x60
 800de96:	d877      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800de98:	2b50      	cmp	r3, #80	@ 0x50
 800de9a:	d03c      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x14a>
 800de9c:	2b50      	cmp	r3, #80	@ 0x50
 800de9e:	d873      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800dea0:	2b40      	cmp	r3, #64	@ 0x40
 800dea2:	d058      	beq.n	800df56 <HAL_TIM_ConfigClockSource+0x18a>
 800dea4:	2b40      	cmp	r3, #64	@ 0x40
 800dea6:	d86f      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800dea8:	2b30      	cmp	r3, #48	@ 0x30
 800deaa:	d064      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800deac:	2b30      	cmp	r3, #48	@ 0x30
 800deae:	d86b      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800deb0:	2b20      	cmp	r3, #32
 800deb2:	d060      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800deb4:	2b20      	cmp	r3, #32
 800deb6:	d867      	bhi.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d05c      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800debc:	2b10      	cmp	r3, #16
 800debe:	d05a      	beq.n	800df76 <HAL_TIM_ConfigClockSource+0x1aa>
 800dec0:	e062      	b.n	800df88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6818      	ldr	r0, [r3, #0]
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	6899      	ldr	r1, [r3, #8]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	f000 fc6d 	bl	800e7b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	609a      	str	r2, [r3, #8]
      break;
 800deee:	e04f      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6818      	ldr	r0, [r3, #0]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	6899      	ldr	r1, [r3, #8]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	685a      	ldr	r2, [r3, #4]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	f000 fc56 	bl	800e7b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	689a      	ldr	r2, [r3, #8]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800df12:	609a      	str	r2, [r3, #8]
      break;
 800df14:	e03c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	6859      	ldr	r1, [r3, #4]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	461a      	mov	r2, r3
 800df24:	f000 fbc6 	bl	800e6b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2150      	movs	r1, #80	@ 0x50
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fc20 	bl	800e774 <TIM_ITRx_SetConfig>
      break;
 800df34:	e02c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	6859      	ldr	r1, [r3, #4]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	461a      	mov	r2, r3
 800df44:	f000 fbe5 	bl	800e712 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2160      	movs	r1, #96	@ 0x60
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 fc10 	bl	800e774 <TIM_ITRx_SetConfig>
      break;
 800df54:	e01c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6818      	ldr	r0, [r3, #0]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	6859      	ldr	r1, [r3, #4]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	461a      	mov	r2, r3
 800df64:	f000 fba6 	bl	800e6b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2140      	movs	r1, #64	@ 0x40
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 fc00 	bl	800e774 <TIM_ITRx_SetConfig>
      break;
 800df74:	e00c      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4619      	mov	r1, r3
 800df80:	4610      	mov	r0, r2
 800df82:	f000 fbf7 	bl	800e774 <TIM_ITRx_SetConfig>
      break;
 800df86:	e003      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
      break;
 800df8c:	e000      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	ffceff88 	.word	0xffceff88
 800dfb0:	00100040 	.word	0x00100040
 800dfb4:	00100030 	.word	0x00100030
 800dfb8:	00100020 	.word	0x00100020

0800dfbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a44      	ldr	r2, [pc, #272]	@ (800e0e0 <TIM_Base_SetConfig+0x124>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d013      	beq.n	800dffc <TIM_Base_SetConfig+0x40>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfda:	d00f      	beq.n	800dffc <TIM_Base_SetConfig+0x40>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a41      	ldr	r2, [pc, #260]	@ (800e0e4 <TIM_Base_SetConfig+0x128>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d00b      	beq.n	800dffc <TIM_Base_SetConfig+0x40>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a40      	ldr	r2, [pc, #256]	@ (800e0e8 <TIM_Base_SetConfig+0x12c>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d007      	beq.n	800dffc <TIM_Base_SetConfig+0x40>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a3f      	ldr	r2, [pc, #252]	@ (800e0ec <TIM_Base_SetConfig+0x130>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d003      	beq.n	800dffc <TIM_Base_SetConfig+0x40>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a3e      	ldr	r2, [pc, #248]	@ (800e0f0 <TIM_Base_SetConfig+0x134>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d108      	bne.n	800e00e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	4313      	orrs	r3, r2
 800e00c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a33      	ldr	r2, [pc, #204]	@ (800e0e0 <TIM_Base_SetConfig+0x124>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d027      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e01c:	d023      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4a30      	ldr	r2, [pc, #192]	@ (800e0e4 <TIM_Base_SetConfig+0x128>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d01f      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4a2f      	ldr	r2, [pc, #188]	@ (800e0e8 <TIM_Base_SetConfig+0x12c>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d01b      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a2e      	ldr	r2, [pc, #184]	@ (800e0ec <TIM_Base_SetConfig+0x130>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d017      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a2d      	ldr	r2, [pc, #180]	@ (800e0f0 <TIM_Base_SetConfig+0x134>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d013      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a2c      	ldr	r2, [pc, #176]	@ (800e0f4 <TIM_Base_SetConfig+0x138>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d00f      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a2b      	ldr	r2, [pc, #172]	@ (800e0f8 <TIM_Base_SetConfig+0x13c>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d00b      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a2a      	ldr	r2, [pc, #168]	@ (800e0fc <TIM_Base_SetConfig+0x140>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d007      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a29      	ldr	r2, [pc, #164]	@ (800e100 <TIM_Base_SetConfig+0x144>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d003      	beq.n	800e066 <TIM_Base_SetConfig+0xaa>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a28      	ldr	r2, [pc, #160]	@ (800e104 <TIM_Base_SetConfig+0x148>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d108      	bne.n	800e078 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e06c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	4313      	orrs	r3, r2
 800e076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	695b      	ldr	r3, [r3, #20]
 800e082:	4313      	orrs	r3, r2
 800e084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	689a      	ldr	r2, [r3, #8]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a10      	ldr	r2, [pc, #64]	@ (800e0e0 <TIM_Base_SetConfig+0x124>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d00f      	beq.n	800e0c4 <TIM_Base_SetConfig+0x108>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4a12      	ldr	r2, [pc, #72]	@ (800e0f0 <TIM_Base_SetConfig+0x134>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d00b      	beq.n	800e0c4 <TIM_Base_SetConfig+0x108>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a11      	ldr	r2, [pc, #68]	@ (800e0f4 <TIM_Base_SetConfig+0x138>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d007      	beq.n	800e0c4 <TIM_Base_SetConfig+0x108>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4a10      	ldr	r2, [pc, #64]	@ (800e0f8 <TIM_Base_SetConfig+0x13c>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d003      	beq.n	800e0c4 <TIM_Base_SetConfig+0x108>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4a0f      	ldr	r2, [pc, #60]	@ (800e0fc <TIM_Base_SetConfig+0x140>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d103      	bne.n	800e0cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	691a      	ldr	r2, [r3, #16]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	615a      	str	r2, [r3, #20]
}
 800e0d2:	bf00      	nop
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	40010000 	.word	0x40010000
 800e0e4:	40000400 	.word	0x40000400
 800e0e8:	40000800 	.word	0x40000800
 800e0ec:	40000c00 	.word	0x40000c00
 800e0f0:	40010400 	.word	0x40010400
 800e0f4:	40014000 	.word	0x40014000
 800e0f8:	40014400 	.word	0x40014400
 800e0fc:	40014800 	.word	0x40014800
 800e100:	4000e000 	.word	0x4000e000
 800e104:	4000e400 	.word	0x4000e400

0800e108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a1b      	ldr	r3, [r3, #32]
 800e116:	f023 0201 	bic.w	r2, r3, #1
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6a1b      	ldr	r3, [r3, #32]
 800e122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	699b      	ldr	r3, [r3, #24]
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	4b37      	ldr	r3, [pc, #220]	@ (800e210 <TIM_OC1_SetConfig+0x108>)
 800e134:	4013      	ands	r3, r2
 800e136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f023 0303 	bic.w	r3, r3, #3
 800e13e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4313      	orrs	r3, r2
 800e148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f023 0302 	bic.w	r3, r3, #2
 800e150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	697a      	ldr	r2, [r7, #20]
 800e158:	4313      	orrs	r3, r2
 800e15a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a2d      	ldr	r2, [pc, #180]	@ (800e214 <TIM_OC1_SetConfig+0x10c>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d00f      	beq.n	800e184 <TIM_OC1_SetConfig+0x7c>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a2c      	ldr	r2, [pc, #176]	@ (800e218 <TIM_OC1_SetConfig+0x110>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d00b      	beq.n	800e184 <TIM_OC1_SetConfig+0x7c>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a2b      	ldr	r2, [pc, #172]	@ (800e21c <TIM_OC1_SetConfig+0x114>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d007      	beq.n	800e184 <TIM_OC1_SetConfig+0x7c>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a2a      	ldr	r2, [pc, #168]	@ (800e220 <TIM_OC1_SetConfig+0x118>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d003      	beq.n	800e184 <TIM_OC1_SetConfig+0x7c>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a29      	ldr	r2, [pc, #164]	@ (800e224 <TIM_OC1_SetConfig+0x11c>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d10c      	bne.n	800e19e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	f023 0308 	bic.w	r3, r3, #8
 800e18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	4313      	orrs	r3, r2
 800e194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f023 0304 	bic.w	r3, r3, #4
 800e19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a1c      	ldr	r2, [pc, #112]	@ (800e214 <TIM_OC1_SetConfig+0x10c>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d00f      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xbe>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e218 <TIM_OC1_SetConfig+0x110>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d00b      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xbe>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a1a      	ldr	r2, [pc, #104]	@ (800e21c <TIM_OC1_SetConfig+0x114>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d007      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xbe>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a19      	ldr	r2, [pc, #100]	@ (800e220 <TIM_OC1_SetConfig+0x118>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d003      	beq.n	800e1c6 <TIM_OC1_SetConfig+0xbe>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a18      	ldr	r2, [pc, #96]	@ (800e224 <TIM_OC1_SetConfig+0x11c>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d111      	bne.n	800e1ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	693a      	ldr	r2, [r7, #16]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	693a      	ldr	r2, [r7, #16]
 800e1ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	697a      	ldr	r2, [r7, #20]
 800e202:	621a      	str	r2, [r3, #32]
}
 800e204:	bf00      	nop
 800e206:	371c      	adds	r7, #28
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	fffeff8f 	.word	0xfffeff8f
 800e214:	40010000 	.word	0x40010000
 800e218:	40010400 	.word	0x40010400
 800e21c:	40014000 	.word	0x40014000
 800e220:	40014400 	.word	0x40014400
 800e224:	40014800 	.word	0x40014800

0800e228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e228:	b480      	push	{r7}
 800e22a:	b087      	sub	sp, #28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a1b      	ldr	r3, [r3, #32]
 800e236:	f023 0210 	bic.w	r2, r3, #16
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a1b      	ldr	r3, [r3, #32]
 800e242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	4b34      	ldr	r3, [pc, #208]	@ (800e324 <TIM_OC2_SetConfig+0xfc>)
 800e254:	4013      	ands	r3, r2
 800e256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e25e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	4313      	orrs	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f023 0320 	bic.w	r3, r3, #32
 800e272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	011b      	lsls	r3, r3, #4
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	4313      	orrs	r3, r2
 800e27e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4a29      	ldr	r2, [pc, #164]	@ (800e328 <TIM_OC2_SetConfig+0x100>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d003      	beq.n	800e290 <TIM_OC2_SetConfig+0x68>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a28      	ldr	r2, [pc, #160]	@ (800e32c <TIM_OC2_SetConfig+0x104>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10d      	bne.n	800e2ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	011b      	lsls	r3, r3, #4
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e328 <TIM_OC2_SetConfig+0x100>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d00f      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xac>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a1d      	ldr	r2, [pc, #116]	@ (800e32c <TIM_OC2_SetConfig+0x104>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d00b      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xac>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a1c      	ldr	r2, [pc, #112]	@ (800e330 <TIM_OC2_SetConfig+0x108>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d007      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xac>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a1b      	ldr	r2, [pc, #108]	@ (800e334 <TIM_OC2_SetConfig+0x10c>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d003      	beq.n	800e2d4 <TIM_OC2_SetConfig+0xac>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a1a      	ldr	r2, [pc, #104]	@ (800e338 <TIM_OC2_SetConfig+0x110>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d113      	bne.n	800e2fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	621a      	str	r2, [r3, #32]
}
 800e316:	bf00      	nop
 800e318:	371c      	adds	r7, #28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	feff8fff 	.word	0xfeff8fff
 800e328:	40010000 	.word	0x40010000
 800e32c:	40010400 	.word	0x40010400
 800e330:	40014000 	.word	0x40014000
 800e334:	40014400 	.word	0x40014400
 800e338:	40014800 	.word	0x40014800

0800e33c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b087      	sub	sp, #28
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a1b      	ldr	r3, [r3, #32]
 800e34a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	4b33      	ldr	r3, [pc, #204]	@ (800e434 <TIM_OC3_SetConfig+0xf8>)
 800e368:	4013      	ands	r3, r2
 800e36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f023 0303 	bic.w	r3, r3, #3
 800e372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	021b      	lsls	r3, r3, #8
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	4313      	orrs	r3, r2
 800e390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4a28      	ldr	r2, [pc, #160]	@ (800e438 <TIM_OC3_SetConfig+0xfc>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d003      	beq.n	800e3a2 <TIM_OC3_SetConfig+0x66>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a27      	ldr	r2, [pc, #156]	@ (800e43c <TIM_OC3_SetConfig+0x100>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d10d      	bne.n	800e3be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	021b      	lsls	r3, r3, #8
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e438 <TIM_OC3_SetConfig+0xfc>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d00f      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xaa>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a1c      	ldr	r2, [pc, #112]	@ (800e43c <TIM_OC3_SetConfig+0x100>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d00b      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xaa>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e440 <TIM_OC3_SetConfig+0x104>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d007      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xaa>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4a1a      	ldr	r2, [pc, #104]	@ (800e444 <TIM_OC3_SetConfig+0x108>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d003      	beq.n	800e3e6 <TIM_OC3_SetConfig+0xaa>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4a19      	ldr	r2, [pc, #100]	@ (800e448 <TIM_OC3_SetConfig+0x10c>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d113      	bne.n	800e40e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	695b      	ldr	r3, [r3, #20]
 800e3fa:	011b      	lsls	r3, r3, #4
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	011b      	lsls	r3, r3, #4
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	4313      	orrs	r3, r2
 800e40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	621a      	str	r2, [r3, #32]
}
 800e428:	bf00      	nop
 800e42a:	371c      	adds	r7, #28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	fffeff8f 	.word	0xfffeff8f
 800e438:	40010000 	.word	0x40010000
 800e43c:	40010400 	.word	0x40010400
 800e440:	40014000 	.word	0x40014000
 800e444:	40014400 	.word	0x40014400
 800e448:	40014800 	.word	0x40014800

0800e44c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b087      	sub	sp, #28
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	69db      	ldr	r3, [r3, #28]
 800e472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	4b24      	ldr	r3, [pc, #144]	@ (800e508 <TIM_OC4_SetConfig+0xbc>)
 800e478:	4013      	ands	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	021b      	lsls	r3, r3, #8
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	031b      	lsls	r3, r3, #12
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a19      	ldr	r2, [pc, #100]	@ (800e50c <TIM_OC4_SetConfig+0xc0>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d00f      	beq.n	800e4cc <TIM_OC4_SetConfig+0x80>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a18      	ldr	r2, [pc, #96]	@ (800e510 <TIM_OC4_SetConfig+0xc4>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d00b      	beq.n	800e4cc <TIM_OC4_SetConfig+0x80>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a17      	ldr	r2, [pc, #92]	@ (800e514 <TIM_OC4_SetConfig+0xc8>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d007      	beq.n	800e4cc <TIM_OC4_SetConfig+0x80>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a16      	ldr	r2, [pc, #88]	@ (800e518 <TIM_OC4_SetConfig+0xcc>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d003      	beq.n	800e4cc <TIM_OC4_SetConfig+0x80>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a15      	ldr	r2, [pc, #84]	@ (800e51c <TIM_OC4_SetConfig+0xd0>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d109      	bne.n	800e4e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e4d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	695b      	ldr	r3, [r3, #20]
 800e4d8:	019b      	lsls	r3, r3, #6
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	685a      	ldr	r2, [r3, #4]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	621a      	str	r2, [r3, #32]
}
 800e4fa:	bf00      	nop
 800e4fc:	371c      	adds	r7, #28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	feff8fff 	.word	0xfeff8fff
 800e50c:	40010000 	.word	0x40010000
 800e510:	40010400 	.word	0x40010400
 800e514:	40014000 	.word	0x40014000
 800e518:	40014400 	.word	0x40014400
 800e51c:	40014800 	.word	0x40014800

0800e520 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e520:	b480      	push	{r7}
 800e522:	b087      	sub	sp, #28
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a1b      	ldr	r3, [r3, #32]
 800e52e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a1b      	ldr	r3, [r3, #32]
 800e53a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4b21      	ldr	r3, [pc, #132]	@ (800e5d0 <TIM_OC5_SetConfig+0xb0>)
 800e54c:	4013      	ands	r3, r2
 800e54e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	4313      	orrs	r3, r2
 800e558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e560:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	041b      	lsls	r3, r3, #16
 800e568:	693a      	ldr	r2, [r7, #16]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a18      	ldr	r2, [pc, #96]	@ (800e5d4 <TIM_OC5_SetConfig+0xb4>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d00f      	beq.n	800e596 <TIM_OC5_SetConfig+0x76>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a17      	ldr	r2, [pc, #92]	@ (800e5d8 <TIM_OC5_SetConfig+0xb8>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d00b      	beq.n	800e596 <TIM_OC5_SetConfig+0x76>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a16      	ldr	r2, [pc, #88]	@ (800e5dc <TIM_OC5_SetConfig+0xbc>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d007      	beq.n	800e596 <TIM_OC5_SetConfig+0x76>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a15      	ldr	r2, [pc, #84]	@ (800e5e0 <TIM_OC5_SetConfig+0xc0>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d003      	beq.n	800e596 <TIM_OC5_SetConfig+0x76>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a14      	ldr	r2, [pc, #80]	@ (800e5e4 <TIM_OC5_SetConfig+0xc4>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d109      	bne.n	800e5aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e59c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	697a      	ldr	r2, [r7, #20]
 800e5ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	621a      	str	r2, [r3, #32]
}
 800e5c4:	bf00      	nop
 800e5c6:	371c      	adds	r7, #28
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	fffeff8f 	.word	0xfffeff8f
 800e5d4:	40010000 	.word	0x40010000
 800e5d8:	40010400 	.word	0x40010400
 800e5dc:	40014000 	.word	0x40014000
 800e5e0:	40014400 	.word	0x40014400
 800e5e4:	40014800 	.word	0x40014800

0800e5e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b087      	sub	sp, #28
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	4b22      	ldr	r3, [pc, #136]	@ (800e69c <TIM_OC6_SetConfig+0xb4>)
 800e614:	4013      	ands	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	021b      	lsls	r3, r3, #8
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	4313      	orrs	r3, r2
 800e622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e62a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	051b      	lsls	r3, r3, #20
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	4313      	orrs	r3, r2
 800e636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a19      	ldr	r2, [pc, #100]	@ (800e6a0 <TIM_OC6_SetConfig+0xb8>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d00f      	beq.n	800e660 <TIM_OC6_SetConfig+0x78>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a18      	ldr	r2, [pc, #96]	@ (800e6a4 <TIM_OC6_SetConfig+0xbc>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d00b      	beq.n	800e660 <TIM_OC6_SetConfig+0x78>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a17      	ldr	r2, [pc, #92]	@ (800e6a8 <TIM_OC6_SetConfig+0xc0>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d007      	beq.n	800e660 <TIM_OC6_SetConfig+0x78>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a16      	ldr	r2, [pc, #88]	@ (800e6ac <TIM_OC6_SetConfig+0xc4>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d003      	beq.n	800e660 <TIM_OC6_SetConfig+0x78>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a15      	ldr	r2, [pc, #84]	@ (800e6b0 <TIM_OC6_SetConfig+0xc8>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d109      	bne.n	800e674 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e666:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	695b      	ldr	r3, [r3, #20]
 800e66c:	029b      	lsls	r3, r3, #10
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	4313      	orrs	r3, r2
 800e672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68fa      	ldr	r2, [r7, #12]
 800e67e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	621a      	str	r2, [r3, #32]
}
 800e68e:	bf00      	nop
 800e690:	371c      	adds	r7, #28
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	feff8fff 	.word	0xfeff8fff
 800e6a0:	40010000 	.word	0x40010000
 800e6a4:	40010400 	.word	0x40010400
 800e6a8:	40014000 	.word	0x40014000
 800e6ac:	40014400 	.word	0x40014400
 800e6b0:	40014800 	.word	0x40014800

0800e6b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6a1b      	ldr	r3, [r3, #32]
 800e6c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	f023 0201 	bic.w	r2, r3, #1
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	699b      	ldr	r3, [r3, #24]
 800e6d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	011b      	lsls	r3, r3, #4
 800e6e4:	693a      	ldr	r2, [r7, #16]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f023 030a 	bic.w	r3, r3, #10
 800e6f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	621a      	str	r2, [r3, #32]
}
 800e706:	bf00      	nop
 800e708:	371c      	adds	r7, #28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e712:	b480      	push	{r7}
 800e714:	b087      	sub	sp, #28
 800e716:	af00      	add	r7, sp, #0
 800e718:	60f8      	str	r0, [r7, #12]
 800e71a:	60b9      	str	r1, [r7, #8]
 800e71c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	f023 0210 	bic.w	r2, r3, #16
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6a1b      	ldr	r3, [r3, #32]
 800e734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e73c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	031b      	lsls	r3, r3, #12
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	4313      	orrs	r3, r2
 800e746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e74e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	011b      	lsls	r3, r3, #4
 800e754:	693a      	ldr	r2, [r7, #16]
 800e756:	4313      	orrs	r3, r2
 800e758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	697a      	ldr	r2, [r7, #20]
 800e75e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	621a      	str	r2, [r3, #32]
}
 800e766:	bf00      	nop
 800e768:	371c      	adds	r7, #28
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
	...

0800e774 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	4b09      	ldr	r3, [pc, #36]	@ (800e7ac <TIM_ITRx_SetConfig+0x38>)
 800e788:	4013      	ands	r3, r2
 800e78a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e78c:	683a      	ldr	r2, [r7, #0]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	4313      	orrs	r3, r2
 800e792:	f043 0307 	orr.w	r3, r3, #7
 800e796:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	609a      	str	r2, [r3, #8]
}
 800e79e:	bf00      	nop
 800e7a0:	3714      	adds	r7, #20
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	ffcfff8f 	.word	0xffcfff8f

0800e7b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b087      	sub	sp, #28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
 800e7bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	021a      	lsls	r2, r3, #8
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	431a      	orrs	r2, r3
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	697a      	ldr	r2, [r7, #20]
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	609a      	str	r2, [r3, #8]
}
 800e7e4:	bf00      	nop
 800e7e6:	371c      	adds	r7, #28
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e800:	2b01      	cmp	r3, #1
 800e802:	d101      	bne.n	800e808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e804:	2302      	movs	r3, #2
 800e806:	e077      	b.n	800e8f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2202      	movs	r2, #2
 800e814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a35      	ldr	r2, [pc, #212]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d004      	beq.n	800e83c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a34      	ldr	r2, [pc, #208]	@ (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d108      	bne.n	800e84e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a25      	ldr	r2, [pc, #148]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d02c      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e87a:	d027      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a22      	ldr	r2, [pc, #136]	@ (800e90c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d022      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a21      	ldr	r2, [pc, #132]	@ (800e910 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d01d      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a1f      	ldr	r2, [pc, #124]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d018      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a1a      	ldr	r2, [pc, #104]	@ (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d013      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d00e      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a1a      	ldr	r2, [pc, #104]	@ (800e91c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d009      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a18      	ldr	r2, [pc, #96]	@ (800e920 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d004      	beq.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a17      	ldr	r2, [pc, #92]	@ (800e924 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d10c      	bne.n	800e8e6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3714      	adds	r7, #20
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr
 800e904:	40010000 	.word	0x40010000
 800e908:	40010400 	.word	0x40010400
 800e90c:	40000400 	.word	0x40000400
 800e910:	40000800 	.word	0x40000800
 800e914:	40000c00 	.word	0x40000c00
 800e918:	40001800 	.word	0x40001800
 800e91c:	40014000 	.word	0x40014000
 800e920:	4000e000 	.word	0x4000e000
 800e924:	4000e400 	.word	0x4000e400

0800e928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	e042      	b.n	800e9c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e940:	2b00      	cmp	r3, #0
 800e942:	d106      	bne.n	800e952 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7f4 fb69 	bl	8003024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2224      	movs	r2, #36	@ 0x24
 800e956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f022 0201 	bic.w	r2, r2, #1
 800e968:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fc80 	bl	800f270 <UART_SetConfig>
 800e970:	4603      	mov	r3, r0
 800e972:	2b01      	cmp	r3, #1
 800e974:	d101      	bne.n	800e97a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	e022      	b.n	800e9c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f001 fae0 	bl	800ff48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e996:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	689a      	ldr	r2, [r3, #8]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e9a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f042 0201 	orr.w	r2, r2, #1
 800e9b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f001 fb67 	bl	801008c <UART_CheckIdleState>
 800e9be:	4603      	mov	r3, r0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	@ 0x28
 800e9cc:	af02      	add	r7, sp, #8
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	603b      	str	r3, [r7, #0]
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9de:	2b20      	cmp	r3, #32
 800e9e0:	f040 8083 	bne.w	800eaea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d002      	beq.n	800e9f0 <HAL_UART_Transmit+0x28>
 800e9ea:	88fb      	ldrh	r3, [r7, #6]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d101      	bne.n	800e9f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e07b      	b.n	800eaec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d101      	bne.n	800ea02 <HAL_UART_Transmit+0x3a>
 800e9fe:	2302      	movs	r3, #2
 800ea00:	e074      	b.n	800eaec <HAL_UART_Transmit+0x124>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2221      	movs	r2, #33	@ 0x21
 800ea16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea1a:	f7f5 f869 	bl	8003af0 <HAL_GetTick>
 800ea1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	88fa      	ldrh	r2, [r7, #6]
 800ea24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	88fa      	ldrh	r2, [r7, #6]
 800ea2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea38:	d108      	bne.n	800ea4c <HAL_UART_Transmit+0x84>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d104      	bne.n	800ea4c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	61bb      	str	r3, [r7, #24]
 800ea4a:	e003      	b.n	800ea54 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea50:	2300      	movs	r3, #0
 800ea52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800ea5c:	e02c      	b.n	800eab8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	2200      	movs	r2, #0
 800ea66:	2180      	movs	r1, #128	@ 0x80
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f001 fb5a 	bl	8010122 <UART_WaitOnFlagUntilTimeout>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d001      	beq.n	800ea78 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e039      	b.n	800eaec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10b      	bne.n	800ea96 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	461a      	mov	r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	3302      	adds	r3, #2
 800ea92:	61bb      	str	r3, [r7, #24]
 800ea94:	e007      	b.n	800eaa6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	781a      	ldrb	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3b01      	subs	r3, #1
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1cc      	bne.n	800ea5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2200      	movs	r2, #0
 800eacc:	2140      	movs	r1, #64	@ 0x40
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f001 fb27 	bl	8010122 <UART_WaitOnFlagUntilTimeout>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eada:	2303      	movs	r3, #3
 800eadc:	e006      	b.n	800eaec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2220      	movs	r2, #32
 800eae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	e000      	b.n	800eaec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800eaea:	2302      	movs	r3, #2
  }
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3720      	adds	r7, #32
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b0ba      	sub	sp, #232	@ 0xe8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	69db      	ldr	r3, [r3, #28]
 800eb02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eb22:	4013      	ands	r3, r2
 800eb24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eb28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d11b      	bne.n	800eb68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb34:	f003 0320 	and.w	r3, r3, #32
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d015      	beq.n	800eb68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb40:	f003 0320 	and.w	r3, r3, #32
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d105      	bne.n	800eb54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d009      	beq.n	800eb68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 835a 	beq.w	800f212 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	4798      	blx	r3
      }
      return;
 800eb66:	e354      	b.n	800f212 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f000 811f 	beq.w	800edb0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb76:	4b8b      	ldr	r3, [pc, #556]	@ (800eda4 <HAL_UART_IRQHandler+0x2b0>)
 800eb78:	4013      	ands	r3, r2
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d106      	bne.n	800eb8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb82:	4b89      	ldr	r3, [pc, #548]	@ (800eda8 <HAL_UART_IRQHandler+0x2b4>)
 800eb84:	4013      	ands	r3, r2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f000 8112 	beq.w	800edb0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d011      	beq.n	800ebbc <HAL_UART_IRQHandler+0xc8>
 800eb98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00b      	beq.n	800ebbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebb2:	f043 0201 	orr.w	r2, r3, #1
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc0:	f003 0302 	and.w	r3, r3, #2
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d011      	beq.n	800ebec <HAL_UART_IRQHandler+0xf8>
 800ebc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebcc:	f003 0301 	and.w	r3, r3, #1
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00b      	beq.n	800ebec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2202      	movs	r2, #2
 800ebda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebe2:	f043 0204 	orr.w	r2, r3, #4
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebf0:	f003 0304 	and.w	r3, r3, #4
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d011      	beq.n	800ec1c <HAL_UART_IRQHandler+0x128>
 800ebf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebfc:	f003 0301 	and.w	r3, r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00b      	beq.n	800ec1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2204      	movs	r2, #4
 800ec0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec12:	f043 0202 	orr.w	r2, r3, #2
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec20:	f003 0308 	and.w	r3, r3, #8
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d017      	beq.n	800ec58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec2c:	f003 0320 	and.w	r3, r3, #32
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d105      	bne.n	800ec40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ec34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec38:	4b5a      	ldr	r3, [pc, #360]	@ (800eda4 <HAL_UART_IRQHandler+0x2b0>)
 800ec3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00b      	beq.n	800ec58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2208      	movs	r2, #8
 800ec46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec4e:	f043 0208 	orr.w	r2, r3, #8
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d012      	beq.n	800ec8a <HAL_UART_IRQHandler+0x196>
 800ec64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00c      	beq.n	800ec8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec80:	f043 0220 	orr.w	r2, r3, #32
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 82c0 	beq.w	800f216 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec9a:	f003 0320 	and.w	r3, r3, #32
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d013      	beq.n	800ecca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eca6:	f003 0320 	and.w	r3, r3, #32
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d105      	bne.n	800ecba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ecae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ecb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d007      	beq.n	800ecca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d003      	beq.n	800ecca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecde:	2b40      	cmp	r3, #64	@ 0x40
 800ece0:	d005      	beq.n	800ecee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ece2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ece6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d04f      	beq.n	800ed8e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f001 fae0 	bl	80102b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecfe:	2b40      	cmp	r3, #64	@ 0x40
 800ed00:	d141      	bne.n	800ed86 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	3308      	adds	r3, #8
 800ed08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed10:	e853 3f00 	ldrex	r3, [r3]
 800ed14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ed18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	3308      	adds	r3, #8
 800ed2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ed2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ed32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ed3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ed3e:	e841 2300 	strex	r3, r2, [r1]
 800ed42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ed46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1d9      	bne.n	800ed02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d013      	beq.n	800ed7e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed5a:	4a14      	ldr	r2, [pc, #80]	@ (800edac <HAL_UART_IRQHandler+0x2b8>)
 800ed5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7f7 fc66 	bl	8006634 <HAL_DMA_Abort_IT>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d017      	beq.n	800ed9e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800ed78:	4610      	mov	r0, r2
 800ed7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed7c:	e00f      	b.n	800ed9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fa60 	bl	800f244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed84:	e00b      	b.n	800ed9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fa5c 	bl	800f244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed8c:	e007      	b.n	800ed9e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fa58 	bl	800f244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 800ed9c:	e23b      	b.n	800f216 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed9e:	bf00      	nop
    return;
 800eda0:	e239      	b.n	800f216 <HAL_UART_IRQHandler+0x722>
 800eda2:	bf00      	nop
 800eda4:	10000001 	.word	0x10000001
 800eda8:	04000120 	.word	0x04000120
 800edac:	08010381 	.word	0x08010381

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	f040 81ce 	bne.w	800f156 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800edba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edbe:	f003 0310 	and.w	r3, r3, #16
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f000 81c7 	beq.w	800f156 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800edc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edcc:	f003 0310 	and.w	r3, r3, #16
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f000 81c0 	beq.w	800f156 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2210      	movs	r2, #16
 800eddc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ede8:	2b40      	cmp	r3, #64	@ 0x40
 800edea:	f040 813b 	bne.w	800f064 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a8b      	ldr	r2, [pc, #556]	@ (800f024 <HAL_UART_IRQHandler+0x530>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d059      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a89      	ldr	r2, [pc, #548]	@ (800f028 <HAL_UART_IRQHandler+0x534>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d053      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a87      	ldr	r2, [pc, #540]	@ (800f02c <HAL_UART_IRQHandler+0x538>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d04d      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a85      	ldr	r2, [pc, #532]	@ (800f030 <HAL_UART_IRQHandler+0x53c>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d047      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a83      	ldr	r2, [pc, #524]	@ (800f034 <HAL_UART_IRQHandler+0x540>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d041      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a81      	ldr	r2, [pc, #516]	@ (800f038 <HAL_UART_IRQHandler+0x544>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d03b      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a7f      	ldr	r2, [pc, #508]	@ (800f03c <HAL_UART_IRQHandler+0x548>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d035      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a7d      	ldr	r2, [pc, #500]	@ (800f040 <HAL_UART_IRQHandler+0x54c>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d02f      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a7b      	ldr	r2, [pc, #492]	@ (800f044 <HAL_UART_IRQHandler+0x550>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d029      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a79      	ldr	r2, [pc, #484]	@ (800f048 <HAL_UART_IRQHandler+0x554>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d023      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a77      	ldr	r2, [pc, #476]	@ (800f04c <HAL_UART_IRQHandler+0x558>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d01d      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a75      	ldr	r2, [pc, #468]	@ (800f050 <HAL_UART_IRQHandler+0x55c>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d017      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a73      	ldr	r2, [pc, #460]	@ (800f054 <HAL_UART_IRQHandler+0x560>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d011      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a71      	ldr	r2, [pc, #452]	@ (800f058 <HAL_UART_IRQHandler+0x564>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d00b      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a6f      	ldr	r2, [pc, #444]	@ (800f05c <HAL_UART_IRQHandler+0x568>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d005      	beq.n	800eeae <HAL_UART_IRQHandler+0x3ba>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a6d      	ldr	r2, [pc, #436]	@ (800f060 <HAL_UART_IRQHandler+0x56c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d105      	bne.n	800eeba <HAL_UART_IRQHandler+0x3c6>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	e004      	b.n	800eec4 <HAL_UART_IRQHandler+0x3d0>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eec8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f000 81a4 	beq.w	800f21a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eed8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eedc:	429a      	cmp	r2, r3
 800eede:	f080 819c 	bcs.w	800f21a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eef6:	f000 8086 	beq.w	800f006 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef06:	e853 3f00 	ldrex	r3, [r3]
 800ef0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ef0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ef30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef34:	e841 2300 	strex	r3, r2, [r1]
 800ef38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1da      	bne.n	800eefa <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3308      	adds	r3, #8
 800ef4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef4e:	e853 3f00 	ldrex	r3, [r3]
 800ef52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef56:	f023 0301 	bic.w	r3, r3, #1
 800ef5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3308      	adds	r3, #8
 800ef64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef74:	e841 2300 	strex	r3, r2, [r1]
 800ef78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1e1      	bne.n	800ef44 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3308      	adds	r3, #8
 800ef86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef8a:	e853 3f00 	ldrex	r3, [r3]
 800ef8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ef90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	3308      	adds	r3, #8
 800efa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800efa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800efaa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efac:	e841 2300 	strex	r3, r2, [r1]
 800efb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800efb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1e3      	bne.n	800ef80 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2220      	movs	r2, #32
 800efbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efce:	e853 3f00 	ldrex	r3, [r3]
 800efd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800efd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efd6:	f023 0310 	bic.w	r3, r3, #16
 800efda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	461a      	mov	r2, r3
 800efe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eff0:	e841 2300 	strex	r3, r2, [r1]
 800eff4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d1e4      	bne.n	800efc6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f000:	4618      	mov	r0, r3
 800f002:	f7f6 fff9 	bl	8005ff8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f012:	b29b      	uxth	r3, r3
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	b29b      	uxth	r3, r3
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 f91c 	bl	800f258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f020:	e0fb      	b.n	800f21a <HAL_UART_IRQHandler+0x726>
 800f022:	bf00      	nop
 800f024:	40020010 	.word	0x40020010
 800f028:	40020028 	.word	0x40020028
 800f02c:	40020040 	.word	0x40020040
 800f030:	40020058 	.word	0x40020058
 800f034:	40020070 	.word	0x40020070
 800f038:	40020088 	.word	0x40020088
 800f03c:	400200a0 	.word	0x400200a0
 800f040:	400200b8 	.word	0x400200b8
 800f044:	40020410 	.word	0x40020410
 800f048:	40020428 	.word	0x40020428
 800f04c:	40020440 	.word	0x40020440
 800f050:	40020458 	.word	0x40020458
 800f054:	40020470 	.word	0x40020470
 800f058:	40020488 	.word	0x40020488
 800f05c:	400204a0 	.word	0x400204a0
 800f060:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f070:	b29b      	uxth	r3, r3
 800f072:	1ad3      	subs	r3, r2, r3
 800f074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f07e:	b29b      	uxth	r3, r3
 800f080:	2b00      	cmp	r3, #0
 800f082:	f000 80cc 	beq.w	800f21e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f000 80c7 	beq.w	800f21e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f098:	e853 3f00 	ldrex	r3, [r3]
 800f09c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e4      	bne.n	800f090 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	3308      	adds	r3, #8
 800f0cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d0:	e853 3f00 	ldrex	r3, [r3]
 800f0d4:	623b      	str	r3, [r7, #32]
   return(result);
 800f0d6:	6a3a      	ldr	r2, [r7, #32]
 800f0d8:	4b54      	ldr	r3, [pc, #336]	@ (800f22c <HAL_UART_IRQHandler+0x738>)
 800f0da:	4013      	ands	r3, r2
 800f0dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f0ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800f0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0f2:	e841 2300 	strex	r3, r2, [r1]
 800f0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1e3      	bne.n	800f0c6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2220      	movs	r2, #32
 800f102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	e853 3f00 	ldrex	r3, [r3]
 800f11e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f023 0310 	bic.w	r3, r3, #16
 800f126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	461a      	mov	r2, r3
 800f130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f134:	61fb      	str	r3, [r7, #28]
 800f136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f138:	69b9      	ldr	r1, [r7, #24]
 800f13a:	69fa      	ldr	r2, [r7, #28]
 800f13c:	e841 2300 	strex	r3, r2, [r1]
 800f140:	617b      	str	r3, [r7, #20]
   return(result);
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d1e4      	bne.n	800f112 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f14c:	4619      	mov	r1, r3
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 f882 	bl	800f258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f154:	e063      	b.n	800f21e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f15a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00e      	beq.n	800f180 <HAL_UART_IRQHandler+0x68c>
 800f162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d008      	beq.n	800f180 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f001 f942 	bl	8010402 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f17e:	e051      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d014      	beq.n	800f1b6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f194:	2b00      	cmp	r3, #0
 800f196:	d105      	bne.n	800f1a4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f19c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d008      	beq.n	800f1b6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d03a      	beq.n	800f222 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	4798      	blx	r3
    }
    return;
 800f1b4:	e035      	b.n	800f222 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d009      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x6e2>
 800f1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f001 f8ec 	bl	80103ac <UART_EndTransmit_IT>
    return;
 800f1d4:	e026      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d009      	beq.n	800f1f6 <HAL_UART_IRQHandler+0x702>
 800f1e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f001 f91b 	bl	801042a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1f4:	e016      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d010      	beq.n	800f224 <HAL_UART_IRQHandler+0x730>
 800f202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f206:	2b00      	cmp	r3, #0
 800f208:	da0c      	bge.n	800f224 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f001 f903 	bl	8010416 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f210:	e008      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
      return;
 800f212:	bf00      	nop
 800f214:	e006      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
    return;
 800f216:	bf00      	nop
 800f218:	e004      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
      return;
 800f21a:	bf00      	nop
 800f21c:	e002      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
      return;
 800f21e:	bf00      	nop
 800f220:	e000      	b.n	800f224 <HAL_UART_IRQHandler+0x730>
    return;
 800f222:	bf00      	nop
  }
}
 800f224:	37e8      	adds	r7, #232	@ 0xe8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	effffffe 	.word	0xeffffffe

0800f230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f264:	bf00      	nop
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f274:	b092      	sub	sp, #72	@ 0x48
 800f276:	af00      	add	r7, sp, #0
 800f278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f27a:	2300      	movs	r3, #0
 800f27c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	689a      	ldr	r2, [r3, #8]
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	431a      	orrs	r2, r3
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	695b      	ldr	r3, [r3, #20]
 800f28e:	431a      	orrs	r2, r3
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	69db      	ldr	r3, [r3, #28]
 800f294:	4313      	orrs	r3, r2
 800f296:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	4bbe      	ldr	r3, [pc, #760]	@ (800f598 <UART_SetConfig+0x328>)
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	6812      	ldr	r2, [r2, #0]
 800f2a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2a8:	430b      	orrs	r3, r1
 800f2aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	68da      	ldr	r2, [r3, #12]
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	430a      	orrs	r2, r1
 800f2c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4ab3      	ldr	r2, [pc, #716]	@ (800f59c <UART_SetConfig+0x32c>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d004      	beq.n	800f2dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	689a      	ldr	r2, [r3, #8]
 800f2e2:	4baf      	ldr	r3, [pc, #700]	@ (800f5a0 <UART_SetConfig+0x330>)
 800f2e4:	4013      	ands	r3, r2
 800f2e6:	697a      	ldr	r2, [r7, #20]
 800f2e8:	6812      	ldr	r2, [r2, #0]
 800f2ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2ec:	430b      	orrs	r3, r1
 800f2ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f6:	f023 010f 	bic.w	r1, r3, #15
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	430a      	orrs	r2, r1
 800f304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4aa6      	ldr	r2, [pc, #664]	@ (800f5a4 <UART_SetConfig+0x334>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d177      	bne.n	800f400 <UART_SetConfig+0x190>
 800f310:	4ba5      	ldr	r3, [pc, #660]	@ (800f5a8 <UART_SetConfig+0x338>)
 800f312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f318:	2b28      	cmp	r3, #40	@ 0x28
 800f31a:	d86d      	bhi.n	800f3f8 <UART_SetConfig+0x188>
 800f31c:	a201      	add	r2, pc, #4	@ (adr r2, 800f324 <UART_SetConfig+0xb4>)
 800f31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f322:	bf00      	nop
 800f324:	0800f3c9 	.word	0x0800f3c9
 800f328:	0800f3f9 	.word	0x0800f3f9
 800f32c:	0800f3f9 	.word	0x0800f3f9
 800f330:	0800f3f9 	.word	0x0800f3f9
 800f334:	0800f3f9 	.word	0x0800f3f9
 800f338:	0800f3f9 	.word	0x0800f3f9
 800f33c:	0800f3f9 	.word	0x0800f3f9
 800f340:	0800f3f9 	.word	0x0800f3f9
 800f344:	0800f3d1 	.word	0x0800f3d1
 800f348:	0800f3f9 	.word	0x0800f3f9
 800f34c:	0800f3f9 	.word	0x0800f3f9
 800f350:	0800f3f9 	.word	0x0800f3f9
 800f354:	0800f3f9 	.word	0x0800f3f9
 800f358:	0800f3f9 	.word	0x0800f3f9
 800f35c:	0800f3f9 	.word	0x0800f3f9
 800f360:	0800f3f9 	.word	0x0800f3f9
 800f364:	0800f3d9 	.word	0x0800f3d9
 800f368:	0800f3f9 	.word	0x0800f3f9
 800f36c:	0800f3f9 	.word	0x0800f3f9
 800f370:	0800f3f9 	.word	0x0800f3f9
 800f374:	0800f3f9 	.word	0x0800f3f9
 800f378:	0800f3f9 	.word	0x0800f3f9
 800f37c:	0800f3f9 	.word	0x0800f3f9
 800f380:	0800f3f9 	.word	0x0800f3f9
 800f384:	0800f3e1 	.word	0x0800f3e1
 800f388:	0800f3f9 	.word	0x0800f3f9
 800f38c:	0800f3f9 	.word	0x0800f3f9
 800f390:	0800f3f9 	.word	0x0800f3f9
 800f394:	0800f3f9 	.word	0x0800f3f9
 800f398:	0800f3f9 	.word	0x0800f3f9
 800f39c:	0800f3f9 	.word	0x0800f3f9
 800f3a0:	0800f3f9 	.word	0x0800f3f9
 800f3a4:	0800f3e9 	.word	0x0800f3e9
 800f3a8:	0800f3f9 	.word	0x0800f3f9
 800f3ac:	0800f3f9 	.word	0x0800f3f9
 800f3b0:	0800f3f9 	.word	0x0800f3f9
 800f3b4:	0800f3f9 	.word	0x0800f3f9
 800f3b8:	0800f3f9 	.word	0x0800f3f9
 800f3bc:	0800f3f9 	.word	0x0800f3f9
 800f3c0:	0800f3f9 	.word	0x0800f3f9
 800f3c4:	0800f3f1 	.word	0x0800f3f1
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ce:	e326      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f3d0:	2304      	movs	r3, #4
 800f3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d6:	e322      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f3d8:	2308      	movs	r3, #8
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3de:	e31e      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f3e0:	2310      	movs	r3, #16
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e6:	e31a      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f3e8:	2320      	movs	r3, #32
 800f3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ee:	e316      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f3f0:	2340      	movs	r3, #64	@ 0x40
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e312      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f3f8:	2380      	movs	r3, #128	@ 0x80
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e30e      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a69      	ldr	r2, [pc, #420]	@ (800f5ac <UART_SetConfig+0x33c>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d130      	bne.n	800f46c <UART_SetConfig+0x1fc>
 800f40a:	4b67      	ldr	r3, [pc, #412]	@ (800f5a8 <UART_SetConfig+0x338>)
 800f40c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f40e:	f003 0307 	and.w	r3, r3, #7
 800f412:	2b05      	cmp	r3, #5
 800f414:	d826      	bhi.n	800f464 <UART_SetConfig+0x1f4>
 800f416:	a201      	add	r2, pc, #4	@ (adr r2, 800f41c <UART_SetConfig+0x1ac>)
 800f418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41c:	0800f435 	.word	0x0800f435
 800f420:	0800f43d 	.word	0x0800f43d
 800f424:	0800f445 	.word	0x0800f445
 800f428:	0800f44d 	.word	0x0800f44d
 800f42c:	0800f455 	.word	0x0800f455
 800f430:	0800f45d 	.word	0x0800f45d
 800f434:	2300      	movs	r3, #0
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e2f0      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f43c:	2304      	movs	r3, #4
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e2ec      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f444:	2308      	movs	r3, #8
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e2e8      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f44c:	2310      	movs	r3, #16
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e2e4      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f454:	2320      	movs	r3, #32
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e2e0      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f45c:	2340      	movs	r3, #64	@ 0x40
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e2dc      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f464:	2380      	movs	r3, #128	@ 0x80
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46a:	e2d8      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a4f      	ldr	r2, [pc, #316]	@ (800f5b0 <UART_SetConfig+0x340>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d130      	bne.n	800f4d8 <UART_SetConfig+0x268>
 800f476:	4b4c      	ldr	r3, [pc, #304]	@ (800f5a8 <UART_SetConfig+0x338>)
 800f478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f47a:	f003 0307 	and.w	r3, r3, #7
 800f47e:	2b05      	cmp	r3, #5
 800f480:	d826      	bhi.n	800f4d0 <UART_SetConfig+0x260>
 800f482:	a201      	add	r2, pc, #4	@ (adr r2, 800f488 <UART_SetConfig+0x218>)
 800f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f488:	0800f4a1 	.word	0x0800f4a1
 800f48c:	0800f4a9 	.word	0x0800f4a9
 800f490:	0800f4b1 	.word	0x0800f4b1
 800f494:	0800f4b9 	.word	0x0800f4b9
 800f498:	0800f4c1 	.word	0x0800f4c1
 800f49c:	0800f4c9 	.word	0x0800f4c9
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a6:	e2ba      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4a8:	2304      	movs	r3, #4
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e2b6      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4b0:	2308      	movs	r3, #8
 800f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	e2b2      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4b8:	2310      	movs	r3, #16
 800f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4be:	e2ae      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4c0:	2320      	movs	r3, #32
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c6:	e2aa      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4c8:	2340      	movs	r3, #64	@ 0x40
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ce:	e2a6      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4d0:	2380      	movs	r3, #128	@ 0x80
 800f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d6:	e2a2      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a35      	ldr	r2, [pc, #212]	@ (800f5b4 <UART_SetConfig+0x344>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d130      	bne.n	800f544 <UART_SetConfig+0x2d4>
 800f4e2:	4b31      	ldr	r3, [pc, #196]	@ (800f5a8 <UART_SetConfig+0x338>)
 800f4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	2b05      	cmp	r3, #5
 800f4ec:	d826      	bhi.n	800f53c <UART_SetConfig+0x2cc>
 800f4ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f4 <UART_SetConfig+0x284>)
 800f4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f4:	0800f50d 	.word	0x0800f50d
 800f4f8:	0800f515 	.word	0x0800f515
 800f4fc:	0800f51d 	.word	0x0800f51d
 800f500:	0800f525 	.word	0x0800f525
 800f504:	0800f52d 	.word	0x0800f52d
 800f508:	0800f535 	.word	0x0800f535
 800f50c:	2300      	movs	r3, #0
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e284      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f514:	2304      	movs	r3, #4
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e280      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f51c:	2308      	movs	r3, #8
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e27c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f524:	2310      	movs	r3, #16
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e278      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f52c:	2320      	movs	r3, #32
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e274      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f534:	2340      	movs	r3, #64	@ 0x40
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53a:	e270      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f53c:	2380      	movs	r3, #128	@ 0x80
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f542:	e26c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a1b      	ldr	r2, [pc, #108]	@ (800f5b8 <UART_SetConfig+0x348>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d142      	bne.n	800f5d4 <UART_SetConfig+0x364>
 800f54e:	4b16      	ldr	r3, [pc, #88]	@ (800f5a8 <UART_SetConfig+0x338>)
 800f550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f552:	f003 0307 	and.w	r3, r3, #7
 800f556:	2b05      	cmp	r3, #5
 800f558:	d838      	bhi.n	800f5cc <UART_SetConfig+0x35c>
 800f55a:	a201      	add	r2, pc, #4	@ (adr r2, 800f560 <UART_SetConfig+0x2f0>)
 800f55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f560:	0800f579 	.word	0x0800f579
 800f564:	0800f581 	.word	0x0800f581
 800f568:	0800f589 	.word	0x0800f589
 800f56c:	0800f591 	.word	0x0800f591
 800f570:	0800f5bd 	.word	0x0800f5bd
 800f574:	0800f5c5 	.word	0x0800f5c5
 800f578:	2300      	movs	r3, #0
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e24e      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f580:	2304      	movs	r3, #4
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e24a      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f588:	2308      	movs	r3, #8
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e246      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f590:	2310      	movs	r3, #16
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e242      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f598:	cfff69f3 	.word	0xcfff69f3
 800f59c:	58000c00 	.word	0x58000c00
 800f5a0:	11fff4ff 	.word	0x11fff4ff
 800f5a4:	40011000 	.word	0x40011000
 800f5a8:	58024400 	.word	0x58024400
 800f5ac:	40004400 	.word	0x40004400
 800f5b0:	40004800 	.word	0x40004800
 800f5b4:	40004c00 	.word	0x40004c00
 800f5b8:	40005000 	.word	0x40005000
 800f5bc:	2320      	movs	r3, #32
 800f5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5c2:	e22c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f5c4:	2340      	movs	r3, #64	@ 0x40
 800f5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ca:	e228      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f5cc:	2380      	movs	r3, #128	@ 0x80
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5d2:	e224      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4ab1      	ldr	r2, [pc, #708]	@ (800f8a0 <UART_SetConfig+0x630>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d176      	bne.n	800f6cc <UART_SetConfig+0x45c>
 800f5de:	4bb1      	ldr	r3, [pc, #708]	@ (800f8a4 <UART_SetConfig+0x634>)
 800f5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f5e6:	2b28      	cmp	r3, #40	@ 0x28
 800f5e8:	d86c      	bhi.n	800f6c4 <UART_SetConfig+0x454>
 800f5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f0 <UART_SetConfig+0x380>)
 800f5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f0:	0800f695 	.word	0x0800f695
 800f5f4:	0800f6c5 	.word	0x0800f6c5
 800f5f8:	0800f6c5 	.word	0x0800f6c5
 800f5fc:	0800f6c5 	.word	0x0800f6c5
 800f600:	0800f6c5 	.word	0x0800f6c5
 800f604:	0800f6c5 	.word	0x0800f6c5
 800f608:	0800f6c5 	.word	0x0800f6c5
 800f60c:	0800f6c5 	.word	0x0800f6c5
 800f610:	0800f69d 	.word	0x0800f69d
 800f614:	0800f6c5 	.word	0x0800f6c5
 800f618:	0800f6c5 	.word	0x0800f6c5
 800f61c:	0800f6c5 	.word	0x0800f6c5
 800f620:	0800f6c5 	.word	0x0800f6c5
 800f624:	0800f6c5 	.word	0x0800f6c5
 800f628:	0800f6c5 	.word	0x0800f6c5
 800f62c:	0800f6c5 	.word	0x0800f6c5
 800f630:	0800f6a5 	.word	0x0800f6a5
 800f634:	0800f6c5 	.word	0x0800f6c5
 800f638:	0800f6c5 	.word	0x0800f6c5
 800f63c:	0800f6c5 	.word	0x0800f6c5
 800f640:	0800f6c5 	.word	0x0800f6c5
 800f644:	0800f6c5 	.word	0x0800f6c5
 800f648:	0800f6c5 	.word	0x0800f6c5
 800f64c:	0800f6c5 	.word	0x0800f6c5
 800f650:	0800f6ad 	.word	0x0800f6ad
 800f654:	0800f6c5 	.word	0x0800f6c5
 800f658:	0800f6c5 	.word	0x0800f6c5
 800f65c:	0800f6c5 	.word	0x0800f6c5
 800f660:	0800f6c5 	.word	0x0800f6c5
 800f664:	0800f6c5 	.word	0x0800f6c5
 800f668:	0800f6c5 	.word	0x0800f6c5
 800f66c:	0800f6c5 	.word	0x0800f6c5
 800f670:	0800f6b5 	.word	0x0800f6b5
 800f674:	0800f6c5 	.word	0x0800f6c5
 800f678:	0800f6c5 	.word	0x0800f6c5
 800f67c:	0800f6c5 	.word	0x0800f6c5
 800f680:	0800f6c5 	.word	0x0800f6c5
 800f684:	0800f6c5 	.word	0x0800f6c5
 800f688:	0800f6c5 	.word	0x0800f6c5
 800f68c:	0800f6c5 	.word	0x0800f6c5
 800f690:	0800f6bd 	.word	0x0800f6bd
 800f694:	2301      	movs	r3, #1
 800f696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f69a:	e1c0      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f69c:	2304      	movs	r3, #4
 800f69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a2:	e1bc      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f6a4:	2308      	movs	r3, #8
 800f6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6aa:	e1b8      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f6ac:	2310      	movs	r3, #16
 800f6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b2:	e1b4      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f6b4:	2320      	movs	r3, #32
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ba:	e1b0      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f6bc:	2340      	movs	r3, #64	@ 0x40
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c2:	e1ac      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f6c4:	2380      	movs	r3, #128	@ 0x80
 800f6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ca:	e1a8      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a75      	ldr	r2, [pc, #468]	@ (800f8a8 <UART_SetConfig+0x638>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d130      	bne.n	800f738 <UART_SetConfig+0x4c8>
 800f6d6:	4b73      	ldr	r3, [pc, #460]	@ (800f8a4 <UART_SetConfig+0x634>)
 800f6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6da:	f003 0307 	and.w	r3, r3, #7
 800f6de:	2b05      	cmp	r3, #5
 800f6e0:	d826      	bhi.n	800f730 <UART_SetConfig+0x4c0>
 800f6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e8 <UART_SetConfig+0x478>)
 800f6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e8:	0800f701 	.word	0x0800f701
 800f6ec:	0800f709 	.word	0x0800f709
 800f6f0:	0800f711 	.word	0x0800f711
 800f6f4:	0800f719 	.word	0x0800f719
 800f6f8:	0800f721 	.word	0x0800f721
 800f6fc:	0800f729 	.word	0x0800f729
 800f700:	2300      	movs	r3, #0
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f706:	e18a      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f708:	2304      	movs	r3, #4
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e186      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f710:	2308      	movs	r3, #8
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e182      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f718:	2310      	movs	r3, #16
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e17e      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f720:	2320      	movs	r3, #32
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e17a      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f728:	2340      	movs	r3, #64	@ 0x40
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e176      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f730:	2380      	movs	r3, #128	@ 0x80
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f736:	e172      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a5b      	ldr	r2, [pc, #364]	@ (800f8ac <UART_SetConfig+0x63c>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d130      	bne.n	800f7a4 <UART_SetConfig+0x534>
 800f742:	4b58      	ldr	r3, [pc, #352]	@ (800f8a4 <UART_SetConfig+0x634>)
 800f744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f746:	f003 0307 	and.w	r3, r3, #7
 800f74a:	2b05      	cmp	r3, #5
 800f74c:	d826      	bhi.n	800f79c <UART_SetConfig+0x52c>
 800f74e:	a201      	add	r2, pc, #4	@ (adr r2, 800f754 <UART_SetConfig+0x4e4>)
 800f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f754:	0800f76d 	.word	0x0800f76d
 800f758:	0800f775 	.word	0x0800f775
 800f75c:	0800f77d 	.word	0x0800f77d
 800f760:	0800f785 	.word	0x0800f785
 800f764:	0800f78d 	.word	0x0800f78d
 800f768:	0800f795 	.word	0x0800f795
 800f76c:	2300      	movs	r3, #0
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e154      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f774:	2304      	movs	r3, #4
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e150      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f77c:	2308      	movs	r3, #8
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e14c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f784:	2310      	movs	r3, #16
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e148      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f78c:	2320      	movs	r3, #32
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e144      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f794:	2340      	movs	r3, #64	@ 0x40
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e140      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f79c:	2380      	movs	r3, #128	@ 0x80
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a2:	e13c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a41      	ldr	r2, [pc, #260]	@ (800f8b0 <UART_SetConfig+0x640>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	f040 8082 	bne.w	800f8b4 <UART_SetConfig+0x644>
 800f7b0:	4b3c      	ldr	r3, [pc, #240]	@ (800f8a4 <UART_SetConfig+0x634>)
 800f7b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f7b8:	2b28      	cmp	r3, #40	@ 0x28
 800f7ba:	d86d      	bhi.n	800f898 <UART_SetConfig+0x628>
 800f7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c4 <UART_SetConfig+0x554>)
 800f7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c2:	bf00      	nop
 800f7c4:	0800f869 	.word	0x0800f869
 800f7c8:	0800f899 	.word	0x0800f899
 800f7cc:	0800f899 	.word	0x0800f899
 800f7d0:	0800f899 	.word	0x0800f899
 800f7d4:	0800f899 	.word	0x0800f899
 800f7d8:	0800f899 	.word	0x0800f899
 800f7dc:	0800f899 	.word	0x0800f899
 800f7e0:	0800f899 	.word	0x0800f899
 800f7e4:	0800f871 	.word	0x0800f871
 800f7e8:	0800f899 	.word	0x0800f899
 800f7ec:	0800f899 	.word	0x0800f899
 800f7f0:	0800f899 	.word	0x0800f899
 800f7f4:	0800f899 	.word	0x0800f899
 800f7f8:	0800f899 	.word	0x0800f899
 800f7fc:	0800f899 	.word	0x0800f899
 800f800:	0800f899 	.word	0x0800f899
 800f804:	0800f879 	.word	0x0800f879
 800f808:	0800f899 	.word	0x0800f899
 800f80c:	0800f899 	.word	0x0800f899
 800f810:	0800f899 	.word	0x0800f899
 800f814:	0800f899 	.word	0x0800f899
 800f818:	0800f899 	.word	0x0800f899
 800f81c:	0800f899 	.word	0x0800f899
 800f820:	0800f899 	.word	0x0800f899
 800f824:	0800f881 	.word	0x0800f881
 800f828:	0800f899 	.word	0x0800f899
 800f82c:	0800f899 	.word	0x0800f899
 800f830:	0800f899 	.word	0x0800f899
 800f834:	0800f899 	.word	0x0800f899
 800f838:	0800f899 	.word	0x0800f899
 800f83c:	0800f899 	.word	0x0800f899
 800f840:	0800f899 	.word	0x0800f899
 800f844:	0800f889 	.word	0x0800f889
 800f848:	0800f899 	.word	0x0800f899
 800f84c:	0800f899 	.word	0x0800f899
 800f850:	0800f899 	.word	0x0800f899
 800f854:	0800f899 	.word	0x0800f899
 800f858:	0800f899 	.word	0x0800f899
 800f85c:	0800f899 	.word	0x0800f899
 800f860:	0800f899 	.word	0x0800f899
 800f864:	0800f891 	.word	0x0800f891
 800f868:	2301      	movs	r3, #1
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f86e:	e0d6      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f870:	2304      	movs	r3, #4
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f876:	e0d2      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f878:	2308      	movs	r3, #8
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f87e:	e0ce      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f880:	2310      	movs	r3, #16
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f886:	e0ca      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f888:	2320      	movs	r3, #32
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88e:	e0c6      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f890:	2340      	movs	r3, #64	@ 0x40
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f896:	e0c2      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f898:	2380      	movs	r3, #128	@ 0x80
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89e:	e0be      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f8a0:	40011400 	.word	0x40011400
 800f8a4:	58024400 	.word	0x58024400
 800f8a8:	40007800 	.word	0x40007800
 800f8ac:	40007c00 	.word	0x40007c00
 800f8b0:	40011800 	.word	0x40011800
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4aad      	ldr	r2, [pc, #692]	@ (800fb70 <UART_SetConfig+0x900>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d176      	bne.n	800f9ac <UART_SetConfig+0x73c>
 800f8be:	4bad      	ldr	r3, [pc, #692]	@ (800fb74 <UART_SetConfig+0x904>)
 800f8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8c6:	2b28      	cmp	r3, #40	@ 0x28
 800f8c8:	d86c      	bhi.n	800f9a4 <UART_SetConfig+0x734>
 800f8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f8d0 <UART_SetConfig+0x660>)
 800f8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d0:	0800f975 	.word	0x0800f975
 800f8d4:	0800f9a5 	.word	0x0800f9a5
 800f8d8:	0800f9a5 	.word	0x0800f9a5
 800f8dc:	0800f9a5 	.word	0x0800f9a5
 800f8e0:	0800f9a5 	.word	0x0800f9a5
 800f8e4:	0800f9a5 	.word	0x0800f9a5
 800f8e8:	0800f9a5 	.word	0x0800f9a5
 800f8ec:	0800f9a5 	.word	0x0800f9a5
 800f8f0:	0800f97d 	.word	0x0800f97d
 800f8f4:	0800f9a5 	.word	0x0800f9a5
 800f8f8:	0800f9a5 	.word	0x0800f9a5
 800f8fc:	0800f9a5 	.word	0x0800f9a5
 800f900:	0800f9a5 	.word	0x0800f9a5
 800f904:	0800f9a5 	.word	0x0800f9a5
 800f908:	0800f9a5 	.word	0x0800f9a5
 800f90c:	0800f9a5 	.word	0x0800f9a5
 800f910:	0800f985 	.word	0x0800f985
 800f914:	0800f9a5 	.word	0x0800f9a5
 800f918:	0800f9a5 	.word	0x0800f9a5
 800f91c:	0800f9a5 	.word	0x0800f9a5
 800f920:	0800f9a5 	.word	0x0800f9a5
 800f924:	0800f9a5 	.word	0x0800f9a5
 800f928:	0800f9a5 	.word	0x0800f9a5
 800f92c:	0800f9a5 	.word	0x0800f9a5
 800f930:	0800f98d 	.word	0x0800f98d
 800f934:	0800f9a5 	.word	0x0800f9a5
 800f938:	0800f9a5 	.word	0x0800f9a5
 800f93c:	0800f9a5 	.word	0x0800f9a5
 800f940:	0800f9a5 	.word	0x0800f9a5
 800f944:	0800f9a5 	.word	0x0800f9a5
 800f948:	0800f9a5 	.word	0x0800f9a5
 800f94c:	0800f9a5 	.word	0x0800f9a5
 800f950:	0800f995 	.word	0x0800f995
 800f954:	0800f9a5 	.word	0x0800f9a5
 800f958:	0800f9a5 	.word	0x0800f9a5
 800f95c:	0800f9a5 	.word	0x0800f9a5
 800f960:	0800f9a5 	.word	0x0800f9a5
 800f964:	0800f9a5 	.word	0x0800f9a5
 800f968:	0800f9a5 	.word	0x0800f9a5
 800f96c:	0800f9a5 	.word	0x0800f9a5
 800f970:	0800f99d 	.word	0x0800f99d
 800f974:	2301      	movs	r3, #1
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97a:	e050      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f97c:	2304      	movs	r3, #4
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f982:	e04c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f984:	2308      	movs	r3, #8
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98a:	e048      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f98c:	2310      	movs	r3, #16
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f992:	e044      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f994:	2320      	movs	r3, #32
 800f996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f99a:	e040      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f99c:	2340      	movs	r3, #64	@ 0x40
 800f99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a2:	e03c      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f9a4:	2380      	movs	r3, #128	@ 0x80
 800f9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9aa:	e038      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a71      	ldr	r2, [pc, #452]	@ (800fb78 <UART_SetConfig+0x908>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d130      	bne.n	800fa18 <UART_SetConfig+0x7a8>
 800f9b6:	4b6f      	ldr	r3, [pc, #444]	@ (800fb74 <UART_SetConfig+0x904>)
 800f9b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9ba:	f003 0307 	and.w	r3, r3, #7
 800f9be:	2b05      	cmp	r3, #5
 800f9c0:	d826      	bhi.n	800fa10 <UART_SetConfig+0x7a0>
 800f9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9c8 <UART_SetConfig+0x758>)
 800f9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c8:	0800f9e1 	.word	0x0800f9e1
 800f9cc:	0800f9e9 	.word	0x0800f9e9
 800f9d0:	0800f9f1 	.word	0x0800f9f1
 800f9d4:	0800f9f9 	.word	0x0800f9f9
 800f9d8:	0800fa01 	.word	0x0800fa01
 800f9dc:	0800fa09 	.word	0x0800fa09
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e01a      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ee:	e016      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f6:	e012      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800f9f8:	2310      	movs	r3, #16
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fe:	e00e      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800fa00:	2320      	movs	r3, #32
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e00a      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800fa08:	2340      	movs	r3, #64	@ 0x40
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0e:	e006      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800fa10:	2380      	movs	r3, #128	@ 0x80
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa16:	e002      	b.n	800fa1e <UART_SetConfig+0x7ae>
 800fa18:	2380      	movs	r3, #128	@ 0x80
 800fa1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4a55      	ldr	r2, [pc, #340]	@ (800fb78 <UART_SetConfig+0x908>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	f040 80f8 	bne.w	800fc1a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa2e:	2b20      	cmp	r3, #32
 800fa30:	dc46      	bgt.n	800fac0 <UART_SetConfig+0x850>
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	db75      	blt.n	800fb22 <UART_SetConfig+0x8b2>
 800fa36:	3b02      	subs	r3, #2
 800fa38:	2b1e      	cmp	r3, #30
 800fa3a:	d872      	bhi.n	800fb22 <UART_SetConfig+0x8b2>
 800fa3c:	a201      	add	r2, pc, #4	@ (adr r2, 800fa44 <UART_SetConfig+0x7d4>)
 800fa3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa42:	bf00      	nop
 800fa44:	0800fac7 	.word	0x0800fac7
 800fa48:	0800fb23 	.word	0x0800fb23
 800fa4c:	0800facf 	.word	0x0800facf
 800fa50:	0800fb23 	.word	0x0800fb23
 800fa54:	0800fb23 	.word	0x0800fb23
 800fa58:	0800fb23 	.word	0x0800fb23
 800fa5c:	0800fadf 	.word	0x0800fadf
 800fa60:	0800fb23 	.word	0x0800fb23
 800fa64:	0800fb23 	.word	0x0800fb23
 800fa68:	0800fb23 	.word	0x0800fb23
 800fa6c:	0800fb23 	.word	0x0800fb23
 800fa70:	0800fb23 	.word	0x0800fb23
 800fa74:	0800fb23 	.word	0x0800fb23
 800fa78:	0800fb23 	.word	0x0800fb23
 800fa7c:	0800faef 	.word	0x0800faef
 800fa80:	0800fb23 	.word	0x0800fb23
 800fa84:	0800fb23 	.word	0x0800fb23
 800fa88:	0800fb23 	.word	0x0800fb23
 800fa8c:	0800fb23 	.word	0x0800fb23
 800fa90:	0800fb23 	.word	0x0800fb23
 800fa94:	0800fb23 	.word	0x0800fb23
 800fa98:	0800fb23 	.word	0x0800fb23
 800fa9c:	0800fb23 	.word	0x0800fb23
 800faa0:	0800fb23 	.word	0x0800fb23
 800faa4:	0800fb23 	.word	0x0800fb23
 800faa8:	0800fb23 	.word	0x0800fb23
 800faac:	0800fb23 	.word	0x0800fb23
 800fab0:	0800fb23 	.word	0x0800fb23
 800fab4:	0800fb23 	.word	0x0800fb23
 800fab8:	0800fb23 	.word	0x0800fb23
 800fabc:	0800fb15 	.word	0x0800fb15
 800fac0:	2b40      	cmp	r3, #64	@ 0x40
 800fac2:	d02a      	beq.n	800fb1a <UART_SetConfig+0x8aa>
 800fac4:	e02d      	b.n	800fb22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fac6:	f7fb fcb3 	bl	800b430 <HAL_RCCEx_GetD3PCLK1Freq>
 800faca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800facc:	e02f      	b.n	800fb2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800face:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fb fcc2 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fadc:	e027      	b.n	800fb2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fade:	f107 0318 	add.w	r3, r7, #24
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fb fe0e 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faec:	e01f      	b.n	800fb2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800faee:	4b21      	ldr	r3, [pc, #132]	@ (800fb74 <UART_SetConfig+0x904>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f003 0320 	and.w	r3, r3, #32
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d009      	beq.n	800fb0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fafa:	4b1e      	ldr	r3, [pc, #120]	@ (800fb74 <UART_SetConfig+0x904>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	08db      	lsrs	r3, r3, #3
 800fb00:	f003 0303 	and.w	r3, r3, #3
 800fb04:	4a1d      	ldr	r2, [pc, #116]	@ (800fb7c <UART_SetConfig+0x90c>)
 800fb06:	fa22 f303 	lsr.w	r3, r2, r3
 800fb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb0c:	e00f      	b.n	800fb2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb0e:	4b1b      	ldr	r3, [pc, #108]	@ (800fb7c <UART_SetConfig+0x90c>)
 800fb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb12:	e00c      	b.n	800fb2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb14:	4b1a      	ldr	r3, [pc, #104]	@ (800fb80 <UART_SetConfig+0x910>)
 800fb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb18:	e009      	b.n	800fb2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb20:	e005      	b.n	800fb2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb22:	2300      	movs	r3, #0
 800fb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fb26:	2301      	movs	r3, #1
 800fb28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fb2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f000 81ee 	beq.w	800ff12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3a:	4a12      	ldr	r2, [pc, #72]	@ (800fb84 <UART_SetConfig+0x914>)
 800fb3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb40:	461a      	mov	r2, r3
 800fb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb44:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb48:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	005b      	lsls	r3, r3, #1
 800fb52:	4413      	add	r3, r2
 800fb54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d305      	bcc.n	800fb66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d910      	bls.n	800fb88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fb66:	2301      	movs	r3, #1
 800fb68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb6c:	e1d1      	b.n	800ff12 <UART_SetConfig+0xca2>
 800fb6e:	bf00      	nop
 800fb70:	40011c00 	.word	0x40011c00
 800fb74:	58024400 	.word	0x58024400
 800fb78:	58000c00 	.word	0x58000c00
 800fb7c:	03d09000 	.word	0x03d09000
 800fb80:	003d0900 	.word	0x003d0900
 800fb84:	08011828 	.word	0x08011828
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	60bb      	str	r3, [r7, #8]
 800fb8e:	60fa      	str	r2, [r7, #12]
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb94:	4ac0      	ldr	r2, [pc, #768]	@ (800fe98 <UART_SetConfig+0xc28>)
 800fb96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	603b      	str	r3, [r7, #0]
 800fba0:	607a      	str	r2, [r7, #4]
 800fba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fbaa:	f7f0 fc09 	bl	80003c0 <__aeabi_uldivmod>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	4610      	mov	r0, r2
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	f04f 0200 	mov.w	r2, #0
 800fbba:	f04f 0300 	mov.w	r3, #0
 800fbbe:	020b      	lsls	r3, r1, #8
 800fbc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fbc4:	0202      	lsls	r2, r0, #8
 800fbc6:	6979      	ldr	r1, [r7, #20]
 800fbc8:	6849      	ldr	r1, [r1, #4]
 800fbca:	0849      	lsrs	r1, r1, #1
 800fbcc:	2000      	movs	r0, #0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	eb12 0804 	adds.w	r8, r2, r4
 800fbd6:	eb43 0905 	adc.w	r9, r3, r5
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	469a      	mov	sl, r3
 800fbe2:	4693      	mov	fp, r2
 800fbe4:	4652      	mov	r2, sl
 800fbe6:	465b      	mov	r3, fp
 800fbe8:	4640      	mov	r0, r8
 800fbea:	4649      	mov	r1, r9
 800fbec:	f7f0 fbe8 	bl	80003c0 <__aeabi_uldivmod>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fbfe:	d308      	bcc.n	800fc12 <UART_SetConfig+0x9a2>
 800fc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc06:	d204      	bcs.n	800fc12 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc0e:	60da      	str	r2, [r3, #12]
 800fc10:	e17f      	b.n	800ff12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc18:	e17b      	b.n	800ff12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc22:	f040 80bd 	bne.w	800fda0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fc26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	2b20      	cmp	r3, #32
 800fc2c:	dc48      	bgt.n	800fcc0 <UART_SetConfig+0xa50>
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	db7b      	blt.n	800fd2a <UART_SetConfig+0xaba>
 800fc32:	2b20      	cmp	r3, #32
 800fc34:	d879      	bhi.n	800fd2a <UART_SetConfig+0xaba>
 800fc36:	a201      	add	r2, pc, #4	@ (adr r2, 800fc3c <UART_SetConfig+0x9cc>)
 800fc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3c:	0800fcc7 	.word	0x0800fcc7
 800fc40:	0800fccf 	.word	0x0800fccf
 800fc44:	0800fd2b 	.word	0x0800fd2b
 800fc48:	0800fd2b 	.word	0x0800fd2b
 800fc4c:	0800fcd7 	.word	0x0800fcd7
 800fc50:	0800fd2b 	.word	0x0800fd2b
 800fc54:	0800fd2b 	.word	0x0800fd2b
 800fc58:	0800fd2b 	.word	0x0800fd2b
 800fc5c:	0800fce7 	.word	0x0800fce7
 800fc60:	0800fd2b 	.word	0x0800fd2b
 800fc64:	0800fd2b 	.word	0x0800fd2b
 800fc68:	0800fd2b 	.word	0x0800fd2b
 800fc6c:	0800fd2b 	.word	0x0800fd2b
 800fc70:	0800fd2b 	.word	0x0800fd2b
 800fc74:	0800fd2b 	.word	0x0800fd2b
 800fc78:	0800fd2b 	.word	0x0800fd2b
 800fc7c:	0800fcf7 	.word	0x0800fcf7
 800fc80:	0800fd2b 	.word	0x0800fd2b
 800fc84:	0800fd2b 	.word	0x0800fd2b
 800fc88:	0800fd2b 	.word	0x0800fd2b
 800fc8c:	0800fd2b 	.word	0x0800fd2b
 800fc90:	0800fd2b 	.word	0x0800fd2b
 800fc94:	0800fd2b 	.word	0x0800fd2b
 800fc98:	0800fd2b 	.word	0x0800fd2b
 800fc9c:	0800fd2b 	.word	0x0800fd2b
 800fca0:	0800fd2b 	.word	0x0800fd2b
 800fca4:	0800fd2b 	.word	0x0800fd2b
 800fca8:	0800fd2b 	.word	0x0800fd2b
 800fcac:	0800fd2b 	.word	0x0800fd2b
 800fcb0:	0800fd2b 	.word	0x0800fd2b
 800fcb4:	0800fd2b 	.word	0x0800fd2b
 800fcb8:	0800fd2b 	.word	0x0800fd2b
 800fcbc:	0800fd1d 	.word	0x0800fd1d
 800fcc0:	2b40      	cmp	r3, #64	@ 0x40
 800fcc2:	d02e      	beq.n	800fd22 <UART_SetConfig+0xab2>
 800fcc4:	e031      	b.n	800fd2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcc6:	f7fa f867 	bl	8009d98 <HAL_RCC_GetPCLK1Freq>
 800fcca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fccc:	e033      	b.n	800fd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcce:	f7fa f879 	bl	8009dc4 <HAL_RCC_GetPCLK2Freq>
 800fcd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fcd4:	e02f      	b.n	800fd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fb fbbe 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fce4:	e027      	b.n	800fd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fce6:	f107 0318 	add.w	r3, r7, #24
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fb fd0a 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcf4:	e01f      	b.n	800fd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcf6:	4b69      	ldr	r3, [pc, #420]	@ (800fe9c <UART_SetConfig+0xc2c>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f003 0320 	and.w	r3, r3, #32
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d009      	beq.n	800fd16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd02:	4b66      	ldr	r3, [pc, #408]	@ (800fe9c <UART_SetConfig+0xc2c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	08db      	lsrs	r3, r3, #3
 800fd08:	f003 0303 	and.w	r3, r3, #3
 800fd0c:	4a64      	ldr	r2, [pc, #400]	@ (800fea0 <UART_SetConfig+0xc30>)
 800fd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd14:	e00f      	b.n	800fd36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fd16:	4b62      	ldr	r3, [pc, #392]	@ (800fea0 <UART_SetConfig+0xc30>)
 800fd18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd1a:	e00c      	b.n	800fd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd1c:	4b61      	ldr	r3, [pc, #388]	@ (800fea4 <UART_SetConfig+0xc34>)
 800fd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd20:	e009      	b.n	800fd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd28:	e005      	b.n	800fd36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f000 80ea 	beq.w	800ff12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd42:	4a55      	ldr	r2, [pc, #340]	@ (800fe98 <UART_SetConfig+0xc28>)
 800fd44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd50:	005a      	lsls	r2, r3, #1
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	085b      	lsrs	r3, r3, #1
 800fd58:	441a      	add	r2, r3
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd66:	2b0f      	cmp	r3, #15
 800fd68:	d916      	bls.n	800fd98 <UART_SetConfig+0xb28>
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd70:	d212      	bcs.n	800fd98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	f023 030f 	bic.w	r3, r3, #15
 800fd7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7e:	085b      	lsrs	r3, r3, #1
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fd94:	60da      	str	r2, [r3, #12]
 800fd96:	e0bc      	b.n	800ff12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd9e:	e0b8      	b.n	800ff12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fda0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fda4:	2b20      	cmp	r3, #32
 800fda6:	dc4b      	bgt.n	800fe40 <UART_SetConfig+0xbd0>
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f2c0 8087 	blt.w	800febc <UART_SetConfig+0xc4c>
 800fdae:	2b20      	cmp	r3, #32
 800fdb0:	f200 8084 	bhi.w	800febc <UART_SetConfig+0xc4c>
 800fdb4:	a201      	add	r2, pc, #4	@ (adr r2, 800fdbc <UART_SetConfig+0xb4c>)
 800fdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdba:	bf00      	nop
 800fdbc:	0800fe47 	.word	0x0800fe47
 800fdc0:	0800fe4f 	.word	0x0800fe4f
 800fdc4:	0800febd 	.word	0x0800febd
 800fdc8:	0800febd 	.word	0x0800febd
 800fdcc:	0800fe57 	.word	0x0800fe57
 800fdd0:	0800febd 	.word	0x0800febd
 800fdd4:	0800febd 	.word	0x0800febd
 800fdd8:	0800febd 	.word	0x0800febd
 800fddc:	0800fe67 	.word	0x0800fe67
 800fde0:	0800febd 	.word	0x0800febd
 800fde4:	0800febd 	.word	0x0800febd
 800fde8:	0800febd 	.word	0x0800febd
 800fdec:	0800febd 	.word	0x0800febd
 800fdf0:	0800febd 	.word	0x0800febd
 800fdf4:	0800febd 	.word	0x0800febd
 800fdf8:	0800febd 	.word	0x0800febd
 800fdfc:	0800fe77 	.word	0x0800fe77
 800fe00:	0800febd 	.word	0x0800febd
 800fe04:	0800febd 	.word	0x0800febd
 800fe08:	0800febd 	.word	0x0800febd
 800fe0c:	0800febd 	.word	0x0800febd
 800fe10:	0800febd 	.word	0x0800febd
 800fe14:	0800febd 	.word	0x0800febd
 800fe18:	0800febd 	.word	0x0800febd
 800fe1c:	0800febd 	.word	0x0800febd
 800fe20:	0800febd 	.word	0x0800febd
 800fe24:	0800febd 	.word	0x0800febd
 800fe28:	0800febd 	.word	0x0800febd
 800fe2c:	0800febd 	.word	0x0800febd
 800fe30:	0800febd 	.word	0x0800febd
 800fe34:	0800febd 	.word	0x0800febd
 800fe38:	0800febd 	.word	0x0800febd
 800fe3c:	0800feaf 	.word	0x0800feaf
 800fe40:	2b40      	cmp	r3, #64	@ 0x40
 800fe42:	d037      	beq.n	800feb4 <UART_SetConfig+0xc44>
 800fe44:	e03a      	b.n	800febc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe46:	f7f9 ffa7 	bl	8009d98 <HAL_RCC_GetPCLK1Freq>
 800fe4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe4c:	e03c      	b.n	800fec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe4e:	f7f9 ffb9 	bl	8009dc4 <HAL_RCC_GetPCLK2Freq>
 800fe52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe54:	e038      	b.n	800fec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7fb fafe 	bl	800b45c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe64:	e030      	b.n	800fec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe66:	f107 0318 	add.w	r3, r7, #24
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fb fc4a 	bl	800b704 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe74:	e028      	b.n	800fec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe76:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <UART_SetConfig+0xc2c>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f003 0320 	and.w	r3, r3, #32
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d012      	beq.n	800fea8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe82:	4b06      	ldr	r3, [pc, #24]	@ (800fe9c <UART_SetConfig+0xc2c>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	08db      	lsrs	r3, r3, #3
 800fe88:	f003 0303 	and.w	r3, r3, #3
 800fe8c:	4a04      	ldr	r2, [pc, #16]	@ (800fea0 <UART_SetConfig+0xc30>)
 800fe8e:	fa22 f303 	lsr.w	r3, r2, r3
 800fe92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe94:	e018      	b.n	800fec8 <UART_SetConfig+0xc58>
 800fe96:	bf00      	nop
 800fe98:	08011828 	.word	0x08011828
 800fe9c:	58024400 	.word	0x58024400
 800fea0:	03d09000 	.word	0x03d09000
 800fea4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fea8:	4b24      	ldr	r3, [pc, #144]	@ (800ff3c <UART_SetConfig+0xccc>)
 800feaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800feac:	e00c      	b.n	800fec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800feae:	4b24      	ldr	r3, [pc, #144]	@ (800ff40 <UART_SetConfig+0xcd0>)
 800feb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800feb2:	e009      	b.n	800fec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800feb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800feb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800feba:	e005      	b.n	800fec8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800febc:	2300      	movs	r3, #0
 800febe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fec0:	2301      	movs	r3, #1
 800fec2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fec6:	bf00      	nop
    }

    if (pclk != 0U)
 800fec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d021      	beq.n	800ff12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed2:	4a1c      	ldr	r2, [pc, #112]	@ (800ff44 <UART_SetConfig+0xcd4>)
 800fed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fed8:	461a      	mov	r2, r3
 800feda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fedc:	fbb3 f2f2 	udiv	r2, r3, r2
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	085b      	lsrs	r3, r3, #1
 800fee6:	441a      	add	r2, r3
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	fbb2 f3f3 	udiv	r3, r2, r3
 800fef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef4:	2b0f      	cmp	r3, #15
 800fef6:	d909      	bls.n	800ff0c <UART_SetConfig+0xc9c>
 800fef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fefe:	d205      	bcs.n	800ff0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	60da      	str	r2, [r3, #12]
 800ff0a:	e002      	b.n	800ff12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	2201      	movs	r2, #1
 800ff16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	2200      	movs	r2, #0
 800ff26:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800ff2e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3748      	adds	r7, #72	@ 0x48
 800ff36:	46bd      	mov	sp, r7
 800ff38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff3c:	03d09000 	.word	0x03d09000
 800ff40:	003d0900 	.word	0x003d0900
 800ff44:	08011828 	.word	0x08011828

0800ff48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff54:	f003 0301 	and.w	r3, r3, #1
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d00a      	beq.n	800ff72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	430a      	orrs	r2, r1
 800ff70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff76:	f003 0302 	and.w	r3, r3, #2
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00a      	beq.n	800ff94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	430a      	orrs	r2, r1
 800ff92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff98:	f003 0304 	and.w	r3, r3, #4
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00a      	beq.n	800ffb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	430a      	orrs	r2, r1
 800ffb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffba:	f003 0308 	and.w	r3, r3, #8
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00a      	beq.n	800ffd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	430a      	orrs	r2, r1
 800ffd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffdc:	f003 0310 	and.w	r3, r3, #16
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00a      	beq.n	800fffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	430a      	orrs	r2, r1
 800fff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fffe:	f003 0320 	and.w	r3, r3, #32
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00a      	beq.n	801001c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	430a      	orrs	r2, r1
 801001a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010024:	2b00      	cmp	r3, #0
 8010026:	d01a      	beq.n	801005e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	430a      	orrs	r2, r1
 801003c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010046:	d10a      	bne.n	801005e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	430a      	orrs	r2, r1
 801005c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00a      	beq.n	8010080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	430a      	orrs	r2, r1
 801007e:	605a      	str	r2, [r3, #4]
  }
}
 8010080:	bf00      	nop
 8010082:	370c      	adds	r7, #12
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af02      	add	r7, sp, #8
 8010092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801009c:	f7f3 fd28 	bl	8003af0 <HAL_GetTick>
 80100a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 0308 	and.w	r3, r3, #8
 80100ac:	2b08      	cmp	r3, #8
 80100ae:	d10e      	bne.n	80100ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f82f 	bl	8010122 <UART_WaitOnFlagUntilTimeout>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d001      	beq.n	80100ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100ca:	2303      	movs	r3, #3
 80100cc:	e025      	b.n	801011a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f003 0304 	and.w	r3, r3, #4
 80100d8:	2b04      	cmp	r3, #4
 80100da:	d10e      	bne.n	80100fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f819 	bl	8010122 <UART_WaitOnFlagUntilTimeout>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e00f      	b.n	801011a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2220      	movs	r2, #32
 80100fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2220      	movs	r2, #32
 8010106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b09c      	sub	sp, #112	@ 0x70
 8010126:	af00      	add	r7, sp, #0
 8010128:	60f8      	str	r0, [r7, #12]
 801012a:	60b9      	str	r1, [r7, #8]
 801012c:	603b      	str	r3, [r7, #0]
 801012e:	4613      	mov	r3, r2
 8010130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010132:	e0a9      	b.n	8010288 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013a:	f000 80a5 	beq.w	8010288 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801013e:	f7f3 fcd7 	bl	8003af0 <HAL_GetTick>
 8010142:	4602      	mov	r2, r0
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801014a:	429a      	cmp	r2, r3
 801014c:	d302      	bcc.n	8010154 <UART_WaitOnFlagUntilTimeout+0x32>
 801014e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010150:	2b00      	cmp	r3, #0
 8010152:	d140      	bne.n	80101d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801015c:	e853 3f00 	ldrex	r3, [r3]
 8010160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010164:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8010168:	667b      	str	r3, [r7, #100]	@ 0x64
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	461a      	mov	r2, r3
 8010170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010172:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010174:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010176:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010178:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801017a:	e841 2300 	strex	r3, r2, [r1]
 801017e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010182:	2b00      	cmp	r3, #0
 8010184:	d1e6      	bne.n	8010154 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3308      	adds	r3, #8
 801018c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801018e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010190:	e853 3f00 	ldrex	r3, [r3]
 8010194:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010198:	f023 0301 	bic.w	r3, r3, #1
 801019c:	663b      	str	r3, [r7, #96]	@ 0x60
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3308      	adds	r3, #8
 80101a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80101a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80101a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101ae:	e841 2300 	strex	r3, r2, [r1]
 80101b2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80101b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1e5      	bne.n	8010186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2220      	movs	r2, #32
 80101be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2220      	movs	r2, #32
 80101c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80101d2:	2303      	movs	r3, #3
 80101d4:	e069      	b.n	80102aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f003 0304 	and.w	r3, r3, #4
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d051      	beq.n	8010288 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	69db      	ldr	r3, [r3, #28]
 80101ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80101ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80101f2:	d149      	bne.n	8010288 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80101fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010206:	e853 3f00 	ldrex	r3, [r3]
 801020a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801020c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8010212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	461a      	mov	r2, r3
 801021a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801021c:	637b      	str	r3, [r7, #52]	@ 0x34
 801021e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010220:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010224:	e841 2300 	strex	r3, r2, [r1]
 8010228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801022a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1e6      	bne.n	80101fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3308      	adds	r3, #8
 8010236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	e853 3f00 	ldrex	r3, [r3]
 801023e:	613b      	str	r3, [r7, #16]
   return(result);
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	f023 0301 	bic.w	r3, r3, #1
 8010246:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3308      	adds	r3, #8
 801024e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010250:	623a      	str	r2, [r7, #32]
 8010252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010254:	69f9      	ldr	r1, [r7, #28]
 8010256:	6a3a      	ldr	r2, [r7, #32]
 8010258:	e841 2300 	strex	r3, r2, [r1]
 801025c:	61bb      	str	r3, [r7, #24]
   return(result);
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1e5      	bne.n	8010230 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2220      	movs	r2, #32
 8010268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2220      	movs	r2, #32
 8010270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2220      	movs	r2, #32
 8010278:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010284:	2303      	movs	r3, #3
 8010286:	e010      	b.n	80102aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	69da      	ldr	r2, [r3, #28]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	4013      	ands	r3, r2
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	429a      	cmp	r2, r3
 8010296:	bf0c      	ite	eq
 8010298:	2301      	moveq	r3, #1
 801029a:	2300      	movne	r3, #0
 801029c:	b2db      	uxtb	r3, r3
 801029e:	461a      	mov	r2, r3
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	f43f af46 	beq.w	8010134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80102a8:	2300      	movs	r3, #0
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3770      	adds	r7, #112	@ 0x70
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
	...

080102b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b095      	sub	sp, #84	@ 0x54
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102c4:	e853 3f00 	ldrex	r3, [r3]
 80102c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80102ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	461a      	mov	r2, r3
 80102d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102da:	643b      	str	r3, [r7, #64]	@ 0x40
 80102dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102e2:	e841 2300 	strex	r3, r2, [r1]
 80102e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80102e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1e6      	bne.n	80102bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	3308      	adds	r3, #8
 80102f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	e853 3f00 	ldrex	r3, [r3]
 80102fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80102fe:	69fa      	ldr	r2, [r7, #28]
 8010300:	4b1e      	ldr	r3, [pc, #120]	@ (801037c <UART_EndRxTransfer+0xc8>)
 8010302:	4013      	ands	r3, r2
 8010304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	3308      	adds	r3, #8
 801030c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801030e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010316:	e841 2300 	strex	r3, r2, [r1]
 801031a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1e5      	bne.n	80102ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010326:	2b01      	cmp	r3, #1
 8010328:	d118      	bne.n	801035c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	e853 3f00 	ldrex	r3, [r3]
 8010336:	60bb      	str	r3, [r7, #8]
   return(result);
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	f023 0310 	bic.w	r3, r3, #16
 801033e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	461a      	mov	r2, r3
 8010346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010348:	61bb      	str	r3, [r7, #24]
 801034a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034c:	6979      	ldr	r1, [r7, #20]
 801034e:	69ba      	ldr	r2, [r7, #24]
 8010350:	e841 2300 	strex	r3, r2, [r1]
 8010354:	613b      	str	r3, [r7, #16]
   return(result);
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1e6      	bne.n	801032a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2220      	movs	r2, #32
 8010360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8010370:	bf00      	nop
 8010372:	3754      	adds	r7, #84	@ 0x54
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	effffffe 	.word	0xeffffffe

08010380 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801038c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2200      	movs	r2, #0
 8010392:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2200      	movs	r2, #0
 801039a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7fe ff50 	bl	800f244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103a4:	bf00      	nop
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b088      	sub	sp, #32
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	e853 3f00 	ldrex	r3, [r3]
 80103c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103c8:	61fb      	str	r3, [r7, #28]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	461a      	mov	r2, r3
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	61bb      	str	r3, [r7, #24]
 80103d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d6:	6979      	ldr	r1, [r7, #20]
 80103d8:	69ba      	ldr	r2, [r7, #24]
 80103da:	e841 2300 	strex	r3, r2, [r1]
 80103de:	613b      	str	r3, [r7, #16]
   return(result);
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d1e6      	bne.n	80103b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2220      	movs	r2, #32
 80103ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7fe ff1b 	bl	800f230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103fa:	bf00      	nop
 80103fc:	3720      	adds	r7, #32
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010402:	b480      	push	{r7}
 8010404:	b083      	sub	sp, #12
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801040a:	bf00      	nop
 801040c:	370c      	adds	r7, #12
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr

08010416 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010416:	b480      	push	{r7}
 8010418:	b083      	sub	sp, #12
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801041e:	bf00      	nop
 8010420:	370c      	adds	r7, #12
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr

0801042a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801042a:	b480      	push	{r7}
 801042c:	b083      	sub	sp, #12
 801042e:	af00      	add	r7, sp, #0
 8010430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010432:	bf00      	nop
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801043e:	b480      	push	{r7}
 8010440:	b085      	sub	sp, #20
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801044c:	2b01      	cmp	r3, #1
 801044e:	d101      	bne.n	8010454 <HAL_UARTEx_DisableFifoMode+0x16>
 8010450:	2302      	movs	r3, #2
 8010452:	e027      	b.n	80104a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2201      	movs	r2, #1
 8010458:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2224      	movs	r2, #36	@ 0x24
 8010460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f022 0201 	bic.w	r2, r2, #1
 801047a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010482:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2220      	movs	r2, #32
 8010496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80104a2:	2300      	movs	r3, #0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d101      	bne.n	80104c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80104c4:	2302      	movs	r3, #2
 80104c6:	e02d      	b.n	8010524 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2224      	movs	r2, #36	@ 0x24
 80104d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f022 0201 	bic.w	r2, r2, #1
 80104ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	683a      	ldr	r2, [r7, #0]
 8010500:	430a      	orrs	r2, r1
 8010502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f84f 	bl	80105a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2220      	movs	r2, #32
 8010516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801053c:	2b01      	cmp	r3, #1
 801053e:	d101      	bne.n	8010544 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010540:	2302      	movs	r3, #2
 8010542:	e02d      	b.n	80105a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2224      	movs	r2, #36	@ 0x24
 8010550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f022 0201 	bic.w	r2, r2, #1
 801056a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	430a      	orrs	r2, r1
 801057e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f811 	bl	80105a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2220      	movs	r2, #32
 8010592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3710      	adds	r7, #16
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d108      	bne.n	80105ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80105c8:	e031      	b.n	801062e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80105ca:	2310      	movs	r3, #16
 80105cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80105ce:	2310      	movs	r3, #16
 80105d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	0e5b      	lsrs	r3, r3, #25
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	f003 0307 	and.w	r3, r3, #7
 80105e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	0f5b      	lsrs	r3, r3, #29
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	f003 0307 	and.w	r3, r3, #7
 80105f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80105f2:	7bbb      	ldrb	r3, [r7, #14]
 80105f4:	7b3a      	ldrb	r2, [r7, #12]
 80105f6:	4911      	ldr	r1, [pc, #68]	@ (801063c <UARTEx_SetNbDataToProcess+0x94>)
 80105f8:	5c8a      	ldrb	r2, [r1, r2]
 80105fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80105fe:	7b3a      	ldrb	r2, [r7, #12]
 8010600:	490f      	ldr	r1, [pc, #60]	@ (8010640 <UARTEx_SetNbDataToProcess+0x98>)
 8010602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010604:	fb93 f3f2 	sdiv	r3, r3, r2
 8010608:	b29a      	uxth	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	7b7a      	ldrb	r2, [r7, #13]
 8010614:	4909      	ldr	r1, [pc, #36]	@ (801063c <UARTEx_SetNbDataToProcess+0x94>)
 8010616:	5c8a      	ldrb	r2, [r1, r2]
 8010618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801061c:	7b7a      	ldrb	r2, [r7, #13]
 801061e:	4908      	ldr	r1, [pc, #32]	@ (8010640 <UARTEx_SetNbDataToProcess+0x98>)
 8010620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010622:	fb93 f3f2 	sdiv	r3, r3, r2
 8010626:	b29a      	uxth	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801062e:	bf00      	nop
 8010630:	3714      	adds	r7, #20
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	08011840 	.word	0x08011840
 8010640:	08011848 	.word	0x08011848

08010644 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d121      	bne.n	801069a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	4b27      	ldr	r3, [pc, #156]	@ (80106f8 <FMC_SDRAM_Init+0xb4>)
 801065c:	4013      	ands	r3, r2
 801065e:	683a      	ldr	r2, [r7, #0]
 8010660:	6851      	ldr	r1, [r2, #4]
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	6892      	ldr	r2, [r2, #8]
 8010666:	4311      	orrs	r1, r2
 8010668:	683a      	ldr	r2, [r7, #0]
 801066a:	68d2      	ldr	r2, [r2, #12]
 801066c:	4311      	orrs	r1, r2
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	6912      	ldr	r2, [r2, #16]
 8010672:	4311      	orrs	r1, r2
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	6952      	ldr	r2, [r2, #20]
 8010678:	4311      	orrs	r1, r2
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	6992      	ldr	r2, [r2, #24]
 801067e:	4311      	orrs	r1, r2
 8010680:	683a      	ldr	r2, [r7, #0]
 8010682:	69d2      	ldr	r2, [r2, #28]
 8010684:	4311      	orrs	r1, r2
 8010686:	683a      	ldr	r2, [r7, #0]
 8010688:	6a12      	ldr	r2, [r2, #32]
 801068a:	4311      	orrs	r1, r2
 801068c:	683a      	ldr	r2, [r7, #0]
 801068e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010690:	430a      	orrs	r2, r1
 8010692:	431a      	orrs	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	e026      	b.n	80106e8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	69d9      	ldr	r1, [r3, #28]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	6a1b      	ldr	r3, [r3, #32]
 80106aa:	4319      	orrs	r1, r3
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106b0:	430b      	orrs	r3, r1
 80106b2:	431a      	orrs	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	4b0e      	ldr	r3, [pc, #56]	@ (80106f8 <FMC_SDRAM_Init+0xb4>)
 80106be:	4013      	ands	r3, r2
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	6851      	ldr	r1, [r2, #4]
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	6892      	ldr	r2, [r2, #8]
 80106c8:	4311      	orrs	r1, r2
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	68d2      	ldr	r2, [r2, #12]
 80106ce:	4311      	orrs	r1, r2
 80106d0:	683a      	ldr	r2, [r7, #0]
 80106d2:	6912      	ldr	r2, [r2, #16]
 80106d4:	4311      	orrs	r1, r2
 80106d6:	683a      	ldr	r2, [r7, #0]
 80106d8:	6952      	ldr	r2, [r2, #20]
 80106da:	4311      	orrs	r1, r2
 80106dc:	683a      	ldr	r2, [r7, #0]
 80106de:	6992      	ldr	r2, [r2, #24]
 80106e0:	430a      	orrs	r2, r1
 80106e2:	431a      	orrs	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	ffff8000 	.word	0xffff8000

080106fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d128      	bne.n	8010760 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	1e59      	subs	r1, r3, #1
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	3b01      	subs	r3, #1
 8010722:	011b      	lsls	r3, r3, #4
 8010724:	4319      	orrs	r1, r3
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	3b01      	subs	r3, #1
 801072c:	021b      	lsls	r3, r3, #8
 801072e:	4319      	orrs	r1, r3
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	3b01      	subs	r3, #1
 8010736:	031b      	lsls	r3, r3, #12
 8010738:	4319      	orrs	r1, r3
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	3b01      	subs	r3, #1
 8010740:	041b      	lsls	r3, r3, #16
 8010742:	4319      	orrs	r1, r3
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	695b      	ldr	r3, [r3, #20]
 8010748:	3b01      	subs	r3, #1
 801074a:	051b      	lsls	r3, r3, #20
 801074c:	4319      	orrs	r1, r3
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	699b      	ldr	r3, [r3, #24]
 8010752:	3b01      	subs	r3, #1
 8010754:	061b      	lsls	r3, r3, #24
 8010756:	430b      	orrs	r3, r1
 8010758:	431a      	orrs	r2, r3
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	609a      	str	r2, [r3, #8]
 801075e:	e02d      	b.n	80107bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	689a      	ldr	r2, [r3, #8]
 8010764:	4b19      	ldr	r3, [pc, #100]	@ (80107cc <FMC_SDRAM_Timing_Init+0xd0>)
 8010766:	4013      	ands	r3, r2
 8010768:	68ba      	ldr	r2, [r7, #8]
 801076a:	68d2      	ldr	r2, [r2, #12]
 801076c:	3a01      	subs	r2, #1
 801076e:	0311      	lsls	r1, r2, #12
 8010770:	68ba      	ldr	r2, [r7, #8]
 8010772:	6952      	ldr	r2, [r2, #20]
 8010774:	3a01      	subs	r2, #1
 8010776:	0512      	lsls	r2, r2, #20
 8010778:	430a      	orrs	r2, r1
 801077a:	431a      	orrs	r2, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	1e59      	subs	r1, r3, #1
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	3b01      	subs	r3, #1
 8010794:	011b      	lsls	r3, r3, #4
 8010796:	4319      	orrs	r1, r3
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	3b01      	subs	r3, #1
 801079e:	021b      	lsls	r3, r3, #8
 80107a0:	4319      	orrs	r1, r3
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	691b      	ldr	r3, [r3, #16]
 80107a6:	3b01      	subs	r3, #1
 80107a8:	041b      	lsls	r3, r3, #16
 80107aa:	4319      	orrs	r1, r3
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	3b01      	subs	r3, #1
 80107b2:	061b      	lsls	r3, r3, #24
 80107b4:	430b      	orrs	r3, r1
 80107b6:	431a      	orrs	r2, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3714      	adds	r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	ff0f0fff 	.word	0xff0f0fff

080107d0 <_vsniprintf_r>:
 80107d0:	b530      	push	{r4, r5, lr}
 80107d2:	4614      	mov	r4, r2
 80107d4:	2c00      	cmp	r4, #0
 80107d6:	b09b      	sub	sp, #108	@ 0x6c
 80107d8:	4605      	mov	r5, r0
 80107da:	461a      	mov	r2, r3
 80107dc:	da05      	bge.n	80107ea <_vsniprintf_r+0x1a>
 80107de:	238b      	movs	r3, #139	@ 0x8b
 80107e0:	6003      	str	r3, [r0, #0]
 80107e2:	f04f 30ff 	mov.w	r0, #4294967295
 80107e6:	b01b      	add	sp, #108	@ 0x6c
 80107e8:	bd30      	pop	{r4, r5, pc}
 80107ea:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80107ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80107f2:	bf14      	ite	ne
 80107f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80107f8:	4623      	moveq	r3, r4
 80107fa:	9302      	str	r3, [sp, #8]
 80107fc:	9305      	str	r3, [sp, #20]
 80107fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010802:	9100      	str	r1, [sp, #0]
 8010804:	9104      	str	r1, [sp, #16]
 8010806:	f8ad 300e 	strh.w	r3, [sp, #14]
 801080a:	4669      	mov	r1, sp
 801080c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801080e:	f000 f9af 	bl	8010b70 <_svfiprintf_r>
 8010812:	1c43      	adds	r3, r0, #1
 8010814:	bfbc      	itt	lt
 8010816:	238b      	movlt	r3, #139	@ 0x8b
 8010818:	602b      	strlt	r3, [r5, #0]
 801081a:	2c00      	cmp	r4, #0
 801081c:	d0e3      	beq.n	80107e6 <_vsniprintf_r+0x16>
 801081e:	9b00      	ldr	r3, [sp, #0]
 8010820:	2200      	movs	r2, #0
 8010822:	701a      	strb	r2, [r3, #0]
 8010824:	e7df      	b.n	80107e6 <_vsniprintf_r+0x16>
	...

08010828 <vsniprintf>:
 8010828:	b507      	push	{r0, r1, r2, lr}
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	4613      	mov	r3, r2
 801082e:	460a      	mov	r2, r1
 8010830:	4601      	mov	r1, r0
 8010832:	4803      	ldr	r0, [pc, #12]	@ (8010840 <vsniprintf+0x18>)
 8010834:	6800      	ldr	r0, [r0, #0]
 8010836:	f7ff ffcb 	bl	80107d0 <_vsniprintf_r>
 801083a:	b003      	add	sp, #12
 801083c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010840:	24000010 	.word	0x24000010

08010844 <memset>:
 8010844:	4402      	add	r2, r0
 8010846:	4603      	mov	r3, r0
 8010848:	4293      	cmp	r3, r2
 801084a:	d100      	bne.n	801084e <memset+0xa>
 801084c:	4770      	bx	lr
 801084e:	f803 1b01 	strb.w	r1, [r3], #1
 8010852:	e7f9      	b.n	8010848 <memset+0x4>

08010854 <__errno>:
 8010854:	4b01      	ldr	r3, [pc, #4]	@ (801085c <__errno+0x8>)
 8010856:	6818      	ldr	r0, [r3, #0]
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	24000010 	.word	0x24000010

08010860 <__libc_init_array>:
 8010860:	b570      	push	{r4, r5, r6, lr}
 8010862:	4d0d      	ldr	r5, [pc, #52]	@ (8010898 <__libc_init_array+0x38>)
 8010864:	4c0d      	ldr	r4, [pc, #52]	@ (801089c <__libc_init_array+0x3c>)
 8010866:	1b64      	subs	r4, r4, r5
 8010868:	10a4      	asrs	r4, r4, #2
 801086a:	2600      	movs	r6, #0
 801086c:	42a6      	cmp	r6, r4
 801086e:	d109      	bne.n	8010884 <__libc_init_array+0x24>
 8010870:	4d0b      	ldr	r5, [pc, #44]	@ (80108a0 <__libc_init_array+0x40>)
 8010872:	4c0c      	ldr	r4, [pc, #48]	@ (80108a4 <__libc_init_array+0x44>)
 8010874:	f000 fc66 	bl	8011144 <_init>
 8010878:	1b64      	subs	r4, r4, r5
 801087a:	10a4      	asrs	r4, r4, #2
 801087c:	2600      	movs	r6, #0
 801087e:	42a6      	cmp	r6, r4
 8010880:	d105      	bne.n	801088e <__libc_init_array+0x2e>
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	f855 3b04 	ldr.w	r3, [r5], #4
 8010888:	4798      	blx	r3
 801088a:	3601      	adds	r6, #1
 801088c:	e7ee      	b.n	801086c <__libc_init_array+0xc>
 801088e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010892:	4798      	blx	r3
 8010894:	3601      	adds	r6, #1
 8010896:	e7f2      	b.n	801087e <__libc_init_array+0x1e>
 8010898:	0801188c 	.word	0x0801188c
 801089c:	0801188c 	.word	0x0801188c
 80108a0:	0801188c 	.word	0x0801188c
 80108a4:	08011890 	.word	0x08011890

080108a8 <__retarget_lock_acquire_recursive>:
 80108a8:	4770      	bx	lr

080108aa <__retarget_lock_release_recursive>:
 80108aa:	4770      	bx	lr

080108ac <memcpy>:
 80108ac:	440a      	add	r2, r1
 80108ae:	4291      	cmp	r1, r2
 80108b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80108b4:	d100      	bne.n	80108b8 <memcpy+0xc>
 80108b6:	4770      	bx	lr
 80108b8:	b510      	push	{r4, lr}
 80108ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108c2:	4291      	cmp	r1, r2
 80108c4:	d1f9      	bne.n	80108ba <memcpy+0xe>
 80108c6:	bd10      	pop	{r4, pc}

080108c8 <_free_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4605      	mov	r5, r0
 80108cc:	2900      	cmp	r1, #0
 80108ce:	d041      	beq.n	8010954 <_free_r+0x8c>
 80108d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108d4:	1f0c      	subs	r4, r1, #4
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	bfb8      	it	lt
 80108da:	18e4      	addlt	r4, r4, r3
 80108dc:	f000 f8e0 	bl	8010aa0 <__malloc_lock>
 80108e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010958 <_free_r+0x90>)
 80108e2:	6813      	ldr	r3, [r2, #0]
 80108e4:	b933      	cbnz	r3, 80108f4 <_free_r+0x2c>
 80108e6:	6063      	str	r3, [r4, #4]
 80108e8:	6014      	str	r4, [r2, #0]
 80108ea:	4628      	mov	r0, r5
 80108ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108f0:	f000 b8dc 	b.w	8010aac <__malloc_unlock>
 80108f4:	42a3      	cmp	r3, r4
 80108f6:	d908      	bls.n	801090a <_free_r+0x42>
 80108f8:	6820      	ldr	r0, [r4, #0]
 80108fa:	1821      	adds	r1, r4, r0
 80108fc:	428b      	cmp	r3, r1
 80108fe:	bf01      	itttt	eq
 8010900:	6819      	ldreq	r1, [r3, #0]
 8010902:	685b      	ldreq	r3, [r3, #4]
 8010904:	1809      	addeq	r1, r1, r0
 8010906:	6021      	streq	r1, [r4, #0]
 8010908:	e7ed      	b.n	80108e6 <_free_r+0x1e>
 801090a:	461a      	mov	r2, r3
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	b10b      	cbz	r3, 8010914 <_free_r+0x4c>
 8010910:	42a3      	cmp	r3, r4
 8010912:	d9fa      	bls.n	801090a <_free_r+0x42>
 8010914:	6811      	ldr	r1, [r2, #0]
 8010916:	1850      	adds	r0, r2, r1
 8010918:	42a0      	cmp	r0, r4
 801091a:	d10b      	bne.n	8010934 <_free_r+0x6c>
 801091c:	6820      	ldr	r0, [r4, #0]
 801091e:	4401      	add	r1, r0
 8010920:	1850      	adds	r0, r2, r1
 8010922:	4283      	cmp	r3, r0
 8010924:	6011      	str	r1, [r2, #0]
 8010926:	d1e0      	bne.n	80108ea <_free_r+0x22>
 8010928:	6818      	ldr	r0, [r3, #0]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	6053      	str	r3, [r2, #4]
 801092e:	4408      	add	r0, r1
 8010930:	6010      	str	r0, [r2, #0]
 8010932:	e7da      	b.n	80108ea <_free_r+0x22>
 8010934:	d902      	bls.n	801093c <_free_r+0x74>
 8010936:	230c      	movs	r3, #12
 8010938:	602b      	str	r3, [r5, #0]
 801093a:	e7d6      	b.n	80108ea <_free_r+0x22>
 801093c:	6820      	ldr	r0, [r4, #0]
 801093e:	1821      	adds	r1, r4, r0
 8010940:	428b      	cmp	r3, r1
 8010942:	bf04      	itt	eq
 8010944:	6819      	ldreq	r1, [r3, #0]
 8010946:	685b      	ldreq	r3, [r3, #4]
 8010948:	6063      	str	r3, [r4, #4]
 801094a:	bf04      	itt	eq
 801094c:	1809      	addeq	r1, r1, r0
 801094e:	6021      	streq	r1, [r4, #0]
 8010950:	6054      	str	r4, [r2, #4]
 8010952:	e7ca      	b.n	80108ea <_free_r+0x22>
 8010954:	bd38      	pop	{r3, r4, r5, pc}
 8010956:	bf00      	nop
 8010958:	24000c30 	.word	0x24000c30

0801095c <sbrk_aligned>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	4e0f      	ldr	r6, [pc, #60]	@ (801099c <sbrk_aligned+0x40>)
 8010960:	460c      	mov	r4, r1
 8010962:	6831      	ldr	r1, [r6, #0]
 8010964:	4605      	mov	r5, r0
 8010966:	b911      	cbnz	r1, 801096e <sbrk_aligned+0x12>
 8010968:	f000 fba6 	bl	80110b8 <_sbrk_r>
 801096c:	6030      	str	r0, [r6, #0]
 801096e:	4621      	mov	r1, r4
 8010970:	4628      	mov	r0, r5
 8010972:	f000 fba1 	bl	80110b8 <_sbrk_r>
 8010976:	1c43      	adds	r3, r0, #1
 8010978:	d103      	bne.n	8010982 <sbrk_aligned+0x26>
 801097a:	f04f 34ff 	mov.w	r4, #4294967295
 801097e:	4620      	mov	r0, r4
 8010980:	bd70      	pop	{r4, r5, r6, pc}
 8010982:	1cc4      	adds	r4, r0, #3
 8010984:	f024 0403 	bic.w	r4, r4, #3
 8010988:	42a0      	cmp	r0, r4
 801098a:	d0f8      	beq.n	801097e <sbrk_aligned+0x22>
 801098c:	1a21      	subs	r1, r4, r0
 801098e:	4628      	mov	r0, r5
 8010990:	f000 fb92 	bl	80110b8 <_sbrk_r>
 8010994:	3001      	adds	r0, #1
 8010996:	d1f2      	bne.n	801097e <sbrk_aligned+0x22>
 8010998:	e7ef      	b.n	801097a <sbrk_aligned+0x1e>
 801099a:	bf00      	nop
 801099c:	24000c2c 	.word	0x24000c2c

080109a0 <_malloc_r>:
 80109a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109a4:	1ccd      	adds	r5, r1, #3
 80109a6:	f025 0503 	bic.w	r5, r5, #3
 80109aa:	3508      	adds	r5, #8
 80109ac:	2d0c      	cmp	r5, #12
 80109ae:	bf38      	it	cc
 80109b0:	250c      	movcc	r5, #12
 80109b2:	2d00      	cmp	r5, #0
 80109b4:	4606      	mov	r6, r0
 80109b6:	db01      	blt.n	80109bc <_malloc_r+0x1c>
 80109b8:	42a9      	cmp	r1, r5
 80109ba:	d904      	bls.n	80109c6 <_malloc_r+0x26>
 80109bc:	230c      	movs	r3, #12
 80109be:	6033      	str	r3, [r6, #0]
 80109c0:	2000      	movs	r0, #0
 80109c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a9c <_malloc_r+0xfc>
 80109ca:	f000 f869 	bl	8010aa0 <__malloc_lock>
 80109ce:	f8d8 3000 	ldr.w	r3, [r8]
 80109d2:	461c      	mov	r4, r3
 80109d4:	bb44      	cbnz	r4, 8010a28 <_malloc_r+0x88>
 80109d6:	4629      	mov	r1, r5
 80109d8:	4630      	mov	r0, r6
 80109da:	f7ff ffbf 	bl	801095c <sbrk_aligned>
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	4604      	mov	r4, r0
 80109e2:	d158      	bne.n	8010a96 <_malloc_r+0xf6>
 80109e4:	f8d8 4000 	ldr.w	r4, [r8]
 80109e8:	4627      	mov	r7, r4
 80109ea:	2f00      	cmp	r7, #0
 80109ec:	d143      	bne.n	8010a76 <_malloc_r+0xd6>
 80109ee:	2c00      	cmp	r4, #0
 80109f0:	d04b      	beq.n	8010a8a <_malloc_r+0xea>
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	4639      	mov	r1, r7
 80109f6:	4630      	mov	r0, r6
 80109f8:	eb04 0903 	add.w	r9, r4, r3
 80109fc:	f000 fb5c 	bl	80110b8 <_sbrk_r>
 8010a00:	4581      	cmp	r9, r0
 8010a02:	d142      	bne.n	8010a8a <_malloc_r+0xea>
 8010a04:	6821      	ldr	r1, [r4, #0]
 8010a06:	1a6d      	subs	r5, r5, r1
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7ff ffa6 	bl	801095c <sbrk_aligned>
 8010a10:	3001      	adds	r0, #1
 8010a12:	d03a      	beq.n	8010a8a <_malloc_r+0xea>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	442b      	add	r3, r5
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	bb62      	cbnz	r2, 8010a7c <_malloc_r+0xdc>
 8010a22:	f8c8 7000 	str.w	r7, [r8]
 8010a26:	e00f      	b.n	8010a48 <_malloc_r+0xa8>
 8010a28:	6822      	ldr	r2, [r4, #0]
 8010a2a:	1b52      	subs	r2, r2, r5
 8010a2c:	d420      	bmi.n	8010a70 <_malloc_r+0xd0>
 8010a2e:	2a0b      	cmp	r2, #11
 8010a30:	d917      	bls.n	8010a62 <_malloc_r+0xc2>
 8010a32:	1961      	adds	r1, r4, r5
 8010a34:	42a3      	cmp	r3, r4
 8010a36:	6025      	str	r5, [r4, #0]
 8010a38:	bf18      	it	ne
 8010a3a:	6059      	strne	r1, [r3, #4]
 8010a3c:	6863      	ldr	r3, [r4, #4]
 8010a3e:	bf08      	it	eq
 8010a40:	f8c8 1000 	streq.w	r1, [r8]
 8010a44:	5162      	str	r2, [r4, r5]
 8010a46:	604b      	str	r3, [r1, #4]
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f000 f82f 	bl	8010aac <__malloc_unlock>
 8010a4e:	f104 000b 	add.w	r0, r4, #11
 8010a52:	1d23      	adds	r3, r4, #4
 8010a54:	f020 0007 	bic.w	r0, r0, #7
 8010a58:	1ac2      	subs	r2, r0, r3
 8010a5a:	bf1c      	itt	ne
 8010a5c:	1a1b      	subne	r3, r3, r0
 8010a5e:	50a3      	strne	r3, [r4, r2]
 8010a60:	e7af      	b.n	80109c2 <_malloc_r+0x22>
 8010a62:	6862      	ldr	r2, [r4, #4]
 8010a64:	42a3      	cmp	r3, r4
 8010a66:	bf0c      	ite	eq
 8010a68:	f8c8 2000 	streq.w	r2, [r8]
 8010a6c:	605a      	strne	r2, [r3, #4]
 8010a6e:	e7eb      	b.n	8010a48 <_malloc_r+0xa8>
 8010a70:	4623      	mov	r3, r4
 8010a72:	6864      	ldr	r4, [r4, #4]
 8010a74:	e7ae      	b.n	80109d4 <_malloc_r+0x34>
 8010a76:	463c      	mov	r4, r7
 8010a78:	687f      	ldr	r7, [r7, #4]
 8010a7a:	e7b6      	b.n	80109ea <_malloc_r+0x4a>
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	42a3      	cmp	r3, r4
 8010a82:	d1fb      	bne.n	8010a7c <_malloc_r+0xdc>
 8010a84:	2300      	movs	r3, #0
 8010a86:	6053      	str	r3, [r2, #4]
 8010a88:	e7de      	b.n	8010a48 <_malloc_r+0xa8>
 8010a8a:	230c      	movs	r3, #12
 8010a8c:	6033      	str	r3, [r6, #0]
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f000 f80c 	bl	8010aac <__malloc_unlock>
 8010a94:	e794      	b.n	80109c0 <_malloc_r+0x20>
 8010a96:	6005      	str	r5, [r0, #0]
 8010a98:	e7d6      	b.n	8010a48 <_malloc_r+0xa8>
 8010a9a:	bf00      	nop
 8010a9c:	24000c30 	.word	0x24000c30

08010aa0 <__malloc_lock>:
 8010aa0:	4801      	ldr	r0, [pc, #4]	@ (8010aa8 <__malloc_lock+0x8>)
 8010aa2:	f7ff bf01 	b.w	80108a8 <__retarget_lock_acquire_recursive>
 8010aa6:	bf00      	nop
 8010aa8:	24000c28 	.word	0x24000c28

08010aac <__malloc_unlock>:
 8010aac:	4801      	ldr	r0, [pc, #4]	@ (8010ab4 <__malloc_unlock+0x8>)
 8010aae:	f7ff befc 	b.w	80108aa <__retarget_lock_release_recursive>
 8010ab2:	bf00      	nop
 8010ab4:	24000c28 	.word	0x24000c28

08010ab8 <__ssputs_r>:
 8010ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010abc:	688e      	ldr	r6, [r1, #8]
 8010abe:	461f      	mov	r7, r3
 8010ac0:	42be      	cmp	r6, r7
 8010ac2:	680b      	ldr	r3, [r1, #0]
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	4690      	mov	r8, r2
 8010aca:	d82d      	bhi.n	8010b28 <__ssputs_r+0x70>
 8010acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ad4:	d026      	beq.n	8010b24 <__ssputs_r+0x6c>
 8010ad6:	6965      	ldr	r5, [r4, #20]
 8010ad8:	6909      	ldr	r1, [r1, #16]
 8010ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ade:	eba3 0901 	sub.w	r9, r3, r1
 8010ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ae6:	1c7b      	adds	r3, r7, #1
 8010ae8:	444b      	add	r3, r9
 8010aea:	106d      	asrs	r5, r5, #1
 8010aec:	429d      	cmp	r5, r3
 8010aee:	bf38      	it	cc
 8010af0:	461d      	movcc	r5, r3
 8010af2:	0553      	lsls	r3, r2, #21
 8010af4:	d527      	bpl.n	8010b46 <__ssputs_r+0x8e>
 8010af6:	4629      	mov	r1, r5
 8010af8:	f7ff ff52 	bl	80109a0 <_malloc_r>
 8010afc:	4606      	mov	r6, r0
 8010afe:	b360      	cbz	r0, 8010b5a <__ssputs_r+0xa2>
 8010b00:	6921      	ldr	r1, [r4, #16]
 8010b02:	464a      	mov	r2, r9
 8010b04:	f7ff fed2 	bl	80108ac <memcpy>
 8010b08:	89a3      	ldrh	r3, [r4, #12]
 8010b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b12:	81a3      	strh	r3, [r4, #12]
 8010b14:	6126      	str	r6, [r4, #16]
 8010b16:	6165      	str	r5, [r4, #20]
 8010b18:	444e      	add	r6, r9
 8010b1a:	eba5 0509 	sub.w	r5, r5, r9
 8010b1e:	6026      	str	r6, [r4, #0]
 8010b20:	60a5      	str	r5, [r4, #8]
 8010b22:	463e      	mov	r6, r7
 8010b24:	42be      	cmp	r6, r7
 8010b26:	d900      	bls.n	8010b2a <__ssputs_r+0x72>
 8010b28:	463e      	mov	r6, r7
 8010b2a:	6820      	ldr	r0, [r4, #0]
 8010b2c:	4632      	mov	r2, r6
 8010b2e:	4641      	mov	r1, r8
 8010b30:	f000 faa8 	bl	8011084 <memmove>
 8010b34:	68a3      	ldr	r3, [r4, #8]
 8010b36:	1b9b      	subs	r3, r3, r6
 8010b38:	60a3      	str	r3, [r4, #8]
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	4433      	add	r3, r6
 8010b3e:	6023      	str	r3, [r4, #0]
 8010b40:	2000      	movs	r0, #0
 8010b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b46:	462a      	mov	r2, r5
 8010b48:	f000 fac6 	bl	80110d8 <_realloc_r>
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d1e0      	bne.n	8010b14 <__ssputs_r+0x5c>
 8010b52:	6921      	ldr	r1, [r4, #16]
 8010b54:	4650      	mov	r0, sl
 8010b56:	f7ff feb7 	bl	80108c8 <_free_r>
 8010b5a:	230c      	movs	r3, #12
 8010b5c:	f8ca 3000 	str.w	r3, [sl]
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b66:	81a3      	strh	r3, [r4, #12]
 8010b68:	f04f 30ff 	mov.w	r0, #4294967295
 8010b6c:	e7e9      	b.n	8010b42 <__ssputs_r+0x8a>
	...

08010b70 <_svfiprintf_r>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	4698      	mov	r8, r3
 8010b76:	898b      	ldrh	r3, [r1, #12]
 8010b78:	061b      	lsls	r3, r3, #24
 8010b7a:	b09d      	sub	sp, #116	@ 0x74
 8010b7c:	4607      	mov	r7, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	4614      	mov	r4, r2
 8010b82:	d510      	bpl.n	8010ba6 <_svfiprintf_r+0x36>
 8010b84:	690b      	ldr	r3, [r1, #16]
 8010b86:	b973      	cbnz	r3, 8010ba6 <_svfiprintf_r+0x36>
 8010b88:	2140      	movs	r1, #64	@ 0x40
 8010b8a:	f7ff ff09 	bl	80109a0 <_malloc_r>
 8010b8e:	6028      	str	r0, [r5, #0]
 8010b90:	6128      	str	r0, [r5, #16]
 8010b92:	b930      	cbnz	r0, 8010ba2 <_svfiprintf_r+0x32>
 8010b94:	230c      	movs	r3, #12
 8010b96:	603b      	str	r3, [r7, #0]
 8010b98:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9c:	b01d      	add	sp, #116	@ 0x74
 8010b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba2:	2340      	movs	r3, #64	@ 0x40
 8010ba4:	616b      	str	r3, [r5, #20]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010baa:	2320      	movs	r3, #32
 8010bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bb4:	2330      	movs	r3, #48	@ 0x30
 8010bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010d54 <_svfiprintf_r+0x1e4>
 8010bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010bbe:	f04f 0901 	mov.w	r9, #1
 8010bc2:	4623      	mov	r3, r4
 8010bc4:	469a      	mov	sl, r3
 8010bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bca:	b10a      	cbz	r2, 8010bd0 <_svfiprintf_r+0x60>
 8010bcc:	2a25      	cmp	r2, #37	@ 0x25
 8010bce:	d1f9      	bne.n	8010bc4 <_svfiprintf_r+0x54>
 8010bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8010bd4:	d00b      	beq.n	8010bee <_svfiprintf_r+0x7e>
 8010bd6:	465b      	mov	r3, fp
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f7ff ff6b 	bl	8010ab8 <__ssputs_r>
 8010be2:	3001      	adds	r0, #1
 8010be4:	f000 80a7 	beq.w	8010d36 <_svfiprintf_r+0x1c6>
 8010be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bea:	445a      	add	r2, fp
 8010bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bee:	f89a 3000 	ldrb.w	r3, [sl]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	f000 809f 	beq.w	8010d36 <_svfiprintf_r+0x1c6>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8010bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c02:	f10a 0a01 	add.w	sl, sl, #1
 8010c06:	9304      	str	r3, [sp, #16]
 8010c08:	9307      	str	r3, [sp, #28]
 8010c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c10:	4654      	mov	r4, sl
 8010c12:	2205      	movs	r2, #5
 8010c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c18:	484e      	ldr	r0, [pc, #312]	@ (8010d54 <_svfiprintf_r+0x1e4>)
 8010c1a:	f7ef fb81 	bl	8000320 <memchr>
 8010c1e:	9a04      	ldr	r2, [sp, #16]
 8010c20:	b9d8      	cbnz	r0, 8010c5a <_svfiprintf_r+0xea>
 8010c22:	06d0      	lsls	r0, r2, #27
 8010c24:	bf44      	itt	mi
 8010c26:	2320      	movmi	r3, #32
 8010c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c2c:	0711      	lsls	r1, r2, #28
 8010c2e:	bf44      	itt	mi
 8010c30:	232b      	movmi	r3, #43	@ 0x2b
 8010c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c36:	f89a 3000 	ldrb.w	r3, [sl]
 8010c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c3c:	d015      	beq.n	8010c6a <_svfiprintf_r+0xfa>
 8010c3e:	9a07      	ldr	r2, [sp, #28]
 8010c40:	4654      	mov	r4, sl
 8010c42:	2000      	movs	r0, #0
 8010c44:	f04f 0c0a 	mov.w	ip, #10
 8010c48:	4621      	mov	r1, r4
 8010c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c4e:	3b30      	subs	r3, #48	@ 0x30
 8010c50:	2b09      	cmp	r3, #9
 8010c52:	d94b      	bls.n	8010cec <_svfiprintf_r+0x17c>
 8010c54:	b1b0      	cbz	r0, 8010c84 <_svfiprintf_r+0x114>
 8010c56:	9207      	str	r2, [sp, #28]
 8010c58:	e014      	b.n	8010c84 <_svfiprintf_r+0x114>
 8010c5a:	eba0 0308 	sub.w	r3, r0, r8
 8010c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8010c62:	4313      	orrs	r3, r2
 8010c64:	9304      	str	r3, [sp, #16]
 8010c66:	46a2      	mov	sl, r4
 8010c68:	e7d2      	b.n	8010c10 <_svfiprintf_r+0xa0>
 8010c6a:	9b03      	ldr	r3, [sp, #12]
 8010c6c:	1d19      	adds	r1, r3, #4
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	9103      	str	r1, [sp, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	bfbb      	ittet	lt
 8010c76:	425b      	neglt	r3, r3
 8010c78:	f042 0202 	orrlt.w	r2, r2, #2
 8010c7c:	9307      	strge	r3, [sp, #28]
 8010c7e:	9307      	strlt	r3, [sp, #28]
 8010c80:	bfb8      	it	lt
 8010c82:	9204      	strlt	r2, [sp, #16]
 8010c84:	7823      	ldrb	r3, [r4, #0]
 8010c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c88:	d10a      	bne.n	8010ca0 <_svfiprintf_r+0x130>
 8010c8a:	7863      	ldrb	r3, [r4, #1]
 8010c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c8e:	d132      	bne.n	8010cf6 <_svfiprintf_r+0x186>
 8010c90:	9b03      	ldr	r3, [sp, #12]
 8010c92:	1d1a      	adds	r2, r3, #4
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	9203      	str	r2, [sp, #12]
 8010c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c9c:	3402      	adds	r4, #2
 8010c9e:	9305      	str	r3, [sp, #20]
 8010ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010d64 <_svfiprintf_r+0x1f4>
 8010ca4:	7821      	ldrb	r1, [r4, #0]
 8010ca6:	2203      	movs	r2, #3
 8010ca8:	4650      	mov	r0, sl
 8010caa:	f7ef fb39 	bl	8000320 <memchr>
 8010cae:	b138      	cbz	r0, 8010cc0 <_svfiprintf_r+0x150>
 8010cb0:	9b04      	ldr	r3, [sp, #16]
 8010cb2:	eba0 000a 	sub.w	r0, r0, sl
 8010cb6:	2240      	movs	r2, #64	@ 0x40
 8010cb8:	4082      	lsls	r2, r0
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	3401      	adds	r4, #1
 8010cbe:	9304      	str	r3, [sp, #16]
 8010cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc4:	4824      	ldr	r0, [pc, #144]	@ (8010d58 <_svfiprintf_r+0x1e8>)
 8010cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010cca:	2206      	movs	r2, #6
 8010ccc:	f7ef fb28 	bl	8000320 <memchr>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d036      	beq.n	8010d42 <_svfiprintf_r+0x1d2>
 8010cd4:	4b21      	ldr	r3, [pc, #132]	@ (8010d5c <_svfiprintf_r+0x1ec>)
 8010cd6:	bb1b      	cbnz	r3, 8010d20 <_svfiprintf_r+0x1b0>
 8010cd8:	9b03      	ldr	r3, [sp, #12]
 8010cda:	3307      	adds	r3, #7
 8010cdc:	f023 0307 	bic.w	r3, r3, #7
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	9303      	str	r3, [sp, #12]
 8010ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ce6:	4433      	add	r3, r6
 8010ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cea:	e76a      	b.n	8010bc2 <_svfiprintf_r+0x52>
 8010cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	2001      	movs	r0, #1
 8010cf4:	e7a8      	b.n	8010c48 <_svfiprintf_r+0xd8>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	3401      	adds	r4, #1
 8010cfa:	9305      	str	r3, [sp, #20]
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	f04f 0c0a 	mov.w	ip, #10
 8010d02:	4620      	mov	r0, r4
 8010d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d08:	3a30      	subs	r2, #48	@ 0x30
 8010d0a:	2a09      	cmp	r2, #9
 8010d0c:	d903      	bls.n	8010d16 <_svfiprintf_r+0x1a6>
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d0c6      	beq.n	8010ca0 <_svfiprintf_r+0x130>
 8010d12:	9105      	str	r1, [sp, #20]
 8010d14:	e7c4      	b.n	8010ca0 <_svfiprintf_r+0x130>
 8010d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e7f0      	b.n	8010d02 <_svfiprintf_r+0x192>
 8010d20:	ab03      	add	r3, sp, #12
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	462a      	mov	r2, r5
 8010d26:	4b0e      	ldr	r3, [pc, #56]	@ (8010d60 <_svfiprintf_r+0x1f0>)
 8010d28:	a904      	add	r1, sp, #16
 8010d2a:	4638      	mov	r0, r7
 8010d2c:	f3af 8000 	nop.w
 8010d30:	1c42      	adds	r2, r0, #1
 8010d32:	4606      	mov	r6, r0
 8010d34:	d1d6      	bne.n	8010ce4 <_svfiprintf_r+0x174>
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	065b      	lsls	r3, r3, #25
 8010d3a:	f53f af2d 	bmi.w	8010b98 <_svfiprintf_r+0x28>
 8010d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d40:	e72c      	b.n	8010b9c <_svfiprintf_r+0x2c>
 8010d42:	ab03      	add	r3, sp, #12
 8010d44:	9300      	str	r3, [sp, #0]
 8010d46:	462a      	mov	r2, r5
 8010d48:	4b05      	ldr	r3, [pc, #20]	@ (8010d60 <_svfiprintf_r+0x1f0>)
 8010d4a:	a904      	add	r1, sp, #16
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	f000 f879 	bl	8010e44 <_printf_i>
 8010d52:	e7ed      	b.n	8010d30 <_svfiprintf_r+0x1c0>
 8010d54:	08011850 	.word	0x08011850
 8010d58:	0801185a 	.word	0x0801185a
 8010d5c:	00000000 	.word	0x00000000
 8010d60:	08010ab9 	.word	0x08010ab9
 8010d64:	08011856 	.word	0x08011856

08010d68 <_printf_common>:
 8010d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	4616      	mov	r6, r2
 8010d6e:	4698      	mov	r8, r3
 8010d70:	688a      	ldr	r2, [r1, #8]
 8010d72:	690b      	ldr	r3, [r1, #16]
 8010d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	bfb8      	it	lt
 8010d7c:	4613      	movlt	r3, r2
 8010d7e:	6033      	str	r3, [r6, #0]
 8010d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d84:	4607      	mov	r7, r0
 8010d86:	460c      	mov	r4, r1
 8010d88:	b10a      	cbz	r2, 8010d8e <_printf_common+0x26>
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	6033      	str	r3, [r6, #0]
 8010d8e:	6823      	ldr	r3, [r4, #0]
 8010d90:	0699      	lsls	r1, r3, #26
 8010d92:	bf42      	ittt	mi
 8010d94:	6833      	ldrmi	r3, [r6, #0]
 8010d96:	3302      	addmi	r3, #2
 8010d98:	6033      	strmi	r3, [r6, #0]
 8010d9a:	6825      	ldr	r5, [r4, #0]
 8010d9c:	f015 0506 	ands.w	r5, r5, #6
 8010da0:	d106      	bne.n	8010db0 <_printf_common+0x48>
 8010da2:	f104 0a19 	add.w	sl, r4, #25
 8010da6:	68e3      	ldr	r3, [r4, #12]
 8010da8:	6832      	ldr	r2, [r6, #0]
 8010daa:	1a9b      	subs	r3, r3, r2
 8010dac:	42ab      	cmp	r3, r5
 8010dae:	dc26      	bgt.n	8010dfe <_printf_common+0x96>
 8010db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010db4:	6822      	ldr	r2, [r4, #0]
 8010db6:	3b00      	subs	r3, #0
 8010db8:	bf18      	it	ne
 8010dba:	2301      	movne	r3, #1
 8010dbc:	0692      	lsls	r2, r2, #26
 8010dbe:	d42b      	bmi.n	8010e18 <_printf_common+0xb0>
 8010dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010dc4:	4641      	mov	r1, r8
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	47c8      	blx	r9
 8010dca:	3001      	adds	r0, #1
 8010dcc:	d01e      	beq.n	8010e0c <_printf_common+0xa4>
 8010dce:	6823      	ldr	r3, [r4, #0]
 8010dd0:	6922      	ldr	r2, [r4, #16]
 8010dd2:	f003 0306 	and.w	r3, r3, #6
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	bf02      	ittt	eq
 8010dda:	68e5      	ldreq	r5, [r4, #12]
 8010ddc:	6833      	ldreq	r3, [r6, #0]
 8010dde:	1aed      	subeq	r5, r5, r3
 8010de0:	68a3      	ldr	r3, [r4, #8]
 8010de2:	bf0c      	ite	eq
 8010de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010de8:	2500      	movne	r5, #0
 8010dea:	4293      	cmp	r3, r2
 8010dec:	bfc4      	itt	gt
 8010dee:	1a9b      	subgt	r3, r3, r2
 8010df0:	18ed      	addgt	r5, r5, r3
 8010df2:	2600      	movs	r6, #0
 8010df4:	341a      	adds	r4, #26
 8010df6:	42b5      	cmp	r5, r6
 8010df8:	d11a      	bne.n	8010e30 <_printf_common+0xc8>
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	e008      	b.n	8010e10 <_printf_common+0xa8>
 8010dfe:	2301      	movs	r3, #1
 8010e00:	4652      	mov	r2, sl
 8010e02:	4641      	mov	r1, r8
 8010e04:	4638      	mov	r0, r7
 8010e06:	47c8      	blx	r9
 8010e08:	3001      	adds	r0, #1
 8010e0a:	d103      	bne.n	8010e14 <_printf_common+0xac>
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e14:	3501      	adds	r5, #1
 8010e16:	e7c6      	b.n	8010da6 <_printf_common+0x3e>
 8010e18:	18e1      	adds	r1, r4, r3
 8010e1a:	1c5a      	adds	r2, r3, #1
 8010e1c:	2030      	movs	r0, #48	@ 0x30
 8010e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e22:	4422      	add	r2, r4
 8010e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e2c:	3302      	adds	r3, #2
 8010e2e:	e7c7      	b.n	8010dc0 <_printf_common+0x58>
 8010e30:	2301      	movs	r3, #1
 8010e32:	4622      	mov	r2, r4
 8010e34:	4641      	mov	r1, r8
 8010e36:	4638      	mov	r0, r7
 8010e38:	47c8      	blx	r9
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	d0e6      	beq.n	8010e0c <_printf_common+0xa4>
 8010e3e:	3601      	adds	r6, #1
 8010e40:	e7d9      	b.n	8010df6 <_printf_common+0x8e>
	...

08010e44 <_printf_i>:
 8010e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e48:	7e0f      	ldrb	r7, [r1, #24]
 8010e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e4c:	2f78      	cmp	r7, #120	@ 0x78
 8010e4e:	4691      	mov	r9, r2
 8010e50:	4680      	mov	r8, r0
 8010e52:	460c      	mov	r4, r1
 8010e54:	469a      	mov	sl, r3
 8010e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e5a:	d807      	bhi.n	8010e6c <_printf_i+0x28>
 8010e5c:	2f62      	cmp	r7, #98	@ 0x62
 8010e5e:	d80a      	bhi.n	8010e76 <_printf_i+0x32>
 8010e60:	2f00      	cmp	r7, #0
 8010e62:	f000 80d2 	beq.w	801100a <_printf_i+0x1c6>
 8010e66:	2f58      	cmp	r7, #88	@ 0x58
 8010e68:	f000 80b9 	beq.w	8010fde <_printf_i+0x19a>
 8010e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e74:	e03a      	b.n	8010eec <_printf_i+0xa8>
 8010e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e7a:	2b15      	cmp	r3, #21
 8010e7c:	d8f6      	bhi.n	8010e6c <_printf_i+0x28>
 8010e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8010e84 <_printf_i+0x40>)
 8010e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e84:	08010edd 	.word	0x08010edd
 8010e88:	08010ef1 	.word	0x08010ef1
 8010e8c:	08010e6d 	.word	0x08010e6d
 8010e90:	08010e6d 	.word	0x08010e6d
 8010e94:	08010e6d 	.word	0x08010e6d
 8010e98:	08010e6d 	.word	0x08010e6d
 8010e9c:	08010ef1 	.word	0x08010ef1
 8010ea0:	08010e6d 	.word	0x08010e6d
 8010ea4:	08010e6d 	.word	0x08010e6d
 8010ea8:	08010e6d 	.word	0x08010e6d
 8010eac:	08010e6d 	.word	0x08010e6d
 8010eb0:	08010ff1 	.word	0x08010ff1
 8010eb4:	08010f1b 	.word	0x08010f1b
 8010eb8:	08010fab 	.word	0x08010fab
 8010ebc:	08010e6d 	.word	0x08010e6d
 8010ec0:	08010e6d 	.word	0x08010e6d
 8010ec4:	08011013 	.word	0x08011013
 8010ec8:	08010e6d 	.word	0x08010e6d
 8010ecc:	08010f1b 	.word	0x08010f1b
 8010ed0:	08010e6d 	.word	0x08010e6d
 8010ed4:	08010e6d 	.word	0x08010e6d
 8010ed8:	08010fb3 	.word	0x08010fb3
 8010edc:	6833      	ldr	r3, [r6, #0]
 8010ede:	1d1a      	adds	r2, r3, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	6032      	str	r2, [r6, #0]
 8010ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010eec:	2301      	movs	r3, #1
 8010eee:	e09d      	b.n	801102c <_printf_i+0x1e8>
 8010ef0:	6833      	ldr	r3, [r6, #0]
 8010ef2:	6820      	ldr	r0, [r4, #0]
 8010ef4:	1d19      	adds	r1, r3, #4
 8010ef6:	6031      	str	r1, [r6, #0]
 8010ef8:	0606      	lsls	r6, r0, #24
 8010efa:	d501      	bpl.n	8010f00 <_printf_i+0xbc>
 8010efc:	681d      	ldr	r5, [r3, #0]
 8010efe:	e003      	b.n	8010f08 <_printf_i+0xc4>
 8010f00:	0645      	lsls	r5, r0, #25
 8010f02:	d5fb      	bpl.n	8010efc <_printf_i+0xb8>
 8010f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f08:	2d00      	cmp	r5, #0
 8010f0a:	da03      	bge.n	8010f14 <_printf_i+0xd0>
 8010f0c:	232d      	movs	r3, #45	@ 0x2d
 8010f0e:	426d      	negs	r5, r5
 8010f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f14:	4859      	ldr	r0, [pc, #356]	@ (801107c <_printf_i+0x238>)
 8010f16:	230a      	movs	r3, #10
 8010f18:	e011      	b.n	8010f3e <_printf_i+0xfa>
 8010f1a:	6821      	ldr	r1, [r4, #0]
 8010f1c:	6833      	ldr	r3, [r6, #0]
 8010f1e:	0608      	lsls	r0, r1, #24
 8010f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8010f24:	d402      	bmi.n	8010f2c <_printf_i+0xe8>
 8010f26:	0649      	lsls	r1, r1, #25
 8010f28:	bf48      	it	mi
 8010f2a:	b2ad      	uxthmi	r5, r5
 8010f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f2e:	4853      	ldr	r0, [pc, #332]	@ (801107c <_printf_i+0x238>)
 8010f30:	6033      	str	r3, [r6, #0]
 8010f32:	bf14      	ite	ne
 8010f34:	230a      	movne	r3, #10
 8010f36:	2308      	moveq	r3, #8
 8010f38:	2100      	movs	r1, #0
 8010f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f3e:	6866      	ldr	r6, [r4, #4]
 8010f40:	60a6      	str	r6, [r4, #8]
 8010f42:	2e00      	cmp	r6, #0
 8010f44:	bfa2      	ittt	ge
 8010f46:	6821      	ldrge	r1, [r4, #0]
 8010f48:	f021 0104 	bicge.w	r1, r1, #4
 8010f4c:	6021      	strge	r1, [r4, #0]
 8010f4e:	b90d      	cbnz	r5, 8010f54 <_printf_i+0x110>
 8010f50:	2e00      	cmp	r6, #0
 8010f52:	d04b      	beq.n	8010fec <_printf_i+0x1a8>
 8010f54:	4616      	mov	r6, r2
 8010f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8010f5e:	5dc7      	ldrb	r7, [r0, r7]
 8010f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f64:	462f      	mov	r7, r5
 8010f66:	42bb      	cmp	r3, r7
 8010f68:	460d      	mov	r5, r1
 8010f6a:	d9f4      	bls.n	8010f56 <_printf_i+0x112>
 8010f6c:	2b08      	cmp	r3, #8
 8010f6e:	d10b      	bne.n	8010f88 <_printf_i+0x144>
 8010f70:	6823      	ldr	r3, [r4, #0]
 8010f72:	07df      	lsls	r7, r3, #31
 8010f74:	d508      	bpl.n	8010f88 <_printf_i+0x144>
 8010f76:	6923      	ldr	r3, [r4, #16]
 8010f78:	6861      	ldr	r1, [r4, #4]
 8010f7a:	4299      	cmp	r1, r3
 8010f7c:	bfde      	ittt	le
 8010f7e:	2330      	movle	r3, #48	@ 0x30
 8010f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f88:	1b92      	subs	r2, r2, r6
 8010f8a:	6122      	str	r2, [r4, #16]
 8010f8c:	f8cd a000 	str.w	sl, [sp]
 8010f90:	464b      	mov	r3, r9
 8010f92:	aa03      	add	r2, sp, #12
 8010f94:	4621      	mov	r1, r4
 8010f96:	4640      	mov	r0, r8
 8010f98:	f7ff fee6 	bl	8010d68 <_printf_common>
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	d14a      	bne.n	8011036 <_printf_i+0x1f2>
 8010fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa4:	b004      	add	sp, #16
 8010fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	f043 0320 	orr.w	r3, r3, #32
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	4833      	ldr	r0, [pc, #204]	@ (8011080 <_printf_i+0x23c>)
 8010fb4:	2778      	movs	r7, #120	@ 0x78
 8010fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010fba:	6823      	ldr	r3, [r4, #0]
 8010fbc:	6831      	ldr	r1, [r6, #0]
 8010fbe:	061f      	lsls	r7, r3, #24
 8010fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8010fc4:	d402      	bmi.n	8010fcc <_printf_i+0x188>
 8010fc6:	065f      	lsls	r7, r3, #25
 8010fc8:	bf48      	it	mi
 8010fca:	b2ad      	uxthmi	r5, r5
 8010fcc:	6031      	str	r1, [r6, #0]
 8010fce:	07d9      	lsls	r1, r3, #31
 8010fd0:	bf44      	itt	mi
 8010fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8010fd6:	6023      	strmi	r3, [r4, #0]
 8010fd8:	b11d      	cbz	r5, 8010fe2 <_printf_i+0x19e>
 8010fda:	2310      	movs	r3, #16
 8010fdc:	e7ac      	b.n	8010f38 <_printf_i+0xf4>
 8010fde:	4827      	ldr	r0, [pc, #156]	@ (801107c <_printf_i+0x238>)
 8010fe0:	e7e9      	b.n	8010fb6 <_printf_i+0x172>
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	f023 0320 	bic.w	r3, r3, #32
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	e7f6      	b.n	8010fda <_printf_i+0x196>
 8010fec:	4616      	mov	r6, r2
 8010fee:	e7bd      	b.n	8010f6c <_printf_i+0x128>
 8010ff0:	6833      	ldr	r3, [r6, #0]
 8010ff2:	6825      	ldr	r5, [r4, #0]
 8010ff4:	6961      	ldr	r1, [r4, #20]
 8010ff6:	1d18      	adds	r0, r3, #4
 8010ff8:	6030      	str	r0, [r6, #0]
 8010ffa:	062e      	lsls	r6, r5, #24
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	d501      	bpl.n	8011004 <_printf_i+0x1c0>
 8011000:	6019      	str	r1, [r3, #0]
 8011002:	e002      	b.n	801100a <_printf_i+0x1c6>
 8011004:	0668      	lsls	r0, r5, #25
 8011006:	d5fb      	bpl.n	8011000 <_printf_i+0x1bc>
 8011008:	8019      	strh	r1, [r3, #0]
 801100a:	2300      	movs	r3, #0
 801100c:	6123      	str	r3, [r4, #16]
 801100e:	4616      	mov	r6, r2
 8011010:	e7bc      	b.n	8010f8c <_printf_i+0x148>
 8011012:	6833      	ldr	r3, [r6, #0]
 8011014:	1d1a      	adds	r2, r3, #4
 8011016:	6032      	str	r2, [r6, #0]
 8011018:	681e      	ldr	r6, [r3, #0]
 801101a:	6862      	ldr	r2, [r4, #4]
 801101c:	2100      	movs	r1, #0
 801101e:	4630      	mov	r0, r6
 8011020:	f7ef f97e 	bl	8000320 <memchr>
 8011024:	b108      	cbz	r0, 801102a <_printf_i+0x1e6>
 8011026:	1b80      	subs	r0, r0, r6
 8011028:	6060      	str	r0, [r4, #4]
 801102a:	6863      	ldr	r3, [r4, #4]
 801102c:	6123      	str	r3, [r4, #16]
 801102e:	2300      	movs	r3, #0
 8011030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011034:	e7aa      	b.n	8010f8c <_printf_i+0x148>
 8011036:	6923      	ldr	r3, [r4, #16]
 8011038:	4632      	mov	r2, r6
 801103a:	4649      	mov	r1, r9
 801103c:	4640      	mov	r0, r8
 801103e:	47d0      	blx	sl
 8011040:	3001      	adds	r0, #1
 8011042:	d0ad      	beq.n	8010fa0 <_printf_i+0x15c>
 8011044:	6823      	ldr	r3, [r4, #0]
 8011046:	079b      	lsls	r3, r3, #30
 8011048:	d413      	bmi.n	8011072 <_printf_i+0x22e>
 801104a:	68e0      	ldr	r0, [r4, #12]
 801104c:	9b03      	ldr	r3, [sp, #12]
 801104e:	4298      	cmp	r0, r3
 8011050:	bfb8      	it	lt
 8011052:	4618      	movlt	r0, r3
 8011054:	e7a6      	b.n	8010fa4 <_printf_i+0x160>
 8011056:	2301      	movs	r3, #1
 8011058:	4632      	mov	r2, r6
 801105a:	4649      	mov	r1, r9
 801105c:	4640      	mov	r0, r8
 801105e:	47d0      	blx	sl
 8011060:	3001      	adds	r0, #1
 8011062:	d09d      	beq.n	8010fa0 <_printf_i+0x15c>
 8011064:	3501      	adds	r5, #1
 8011066:	68e3      	ldr	r3, [r4, #12]
 8011068:	9903      	ldr	r1, [sp, #12]
 801106a:	1a5b      	subs	r3, r3, r1
 801106c:	42ab      	cmp	r3, r5
 801106e:	dcf2      	bgt.n	8011056 <_printf_i+0x212>
 8011070:	e7eb      	b.n	801104a <_printf_i+0x206>
 8011072:	2500      	movs	r5, #0
 8011074:	f104 0619 	add.w	r6, r4, #25
 8011078:	e7f5      	b.n	8011066 <_printf_i+0x222>
 801107a:	bf00      	nop
 801107c:	08011861 	.word	0x08011861
 8011080:	08011872 	.word	0x08011872

08011084 <memmove>:
 8011084:	4288      	cmp	r0, r1
 8011086:	b510      	push	{r4, lr}
 8011088:	eb01 0402 	add.w	r4, r1, r2
 801108c:	d902      	bls.n	8011094 <memmove+0x10>
 801108e:	4284      	cmp	r4, r0
 8011090:	4623      	mov	r3, r4
 8011092:	d807      	bhi.n	80110a4 <memmove+0x20>
 8011094:	1e43      	subs	r3, r0, #1
 8011096:	42a1      	cmp	r1, r4
 8011098:	d008      	beq.n	80110ac <memmove+0x28>
 801109a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801109e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110a2:	e7f8      	b.n	8011096 <memmove+0x12>
 80110a4:	4402      	add	r2, r0
 80110a6:	4601      	mov	r1, r0
 80110a8:	428a      	cmp	r2, r1
 80110aa:	d100      	bne.n	80110ae <memmove+0x2a>
 80110ac:	bd10      	pop	{r4, pc}
 80110ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110b6:	e7f7      	b.n	80110a8 <memmove+0x24>

080110b8 <_sbrk_r>:
 80110b8:	b538      	push	{r3, r4, r5, lr}
 80110ba:	4d06      	ldr	r5, [pc, #24]	@ (80110d4 <_sbrk_r+0x1c>)
 80110bc:	2300      	movs	r3, #0
 80110be:	4604      	mov	r4, r0
 80110c0:	4608      	mov	r0, r1
 80110c2:	602b      	str	r3, [r5, #0]
 80110c4:	f7f2 fbb6 	bl	8003834 <_sbrk>
 80110c8:	1c43      	adds	r3, r0, #1
 80110ca:	d102      	bne.n	80110d2 <_sbrk_r+0x1a>
 80110cc:	682b      	ldr	r3, [r5, #0]
 80110ce:	b103      	cbz	r3, 80110d2 <_sbrk_r+0x1a>
 80110d0:	6023      	str	r3, [r4, #0]
 80110d2:	bd38      	pop	{r3, r4, r5, pc}
 80110d4:	24000c24 	.word	0x24000c24

080110d8 <_realloc_r>:
 80110d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110dc:	4680      	mov	r8, r0
 80110de:	4615      	mov	r5, r2
 80110e0:	460c      	mov	r4, r1
 80110e2:	b921      	cbnz	r1, 80110ee <_realloc_r+0x16>
 80110e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	4611      	mov	r1, r2
 80110ea:	f7ff bc59 	b.w	80109a0 <_malloc_r>
 80110ee:	b92a      	cbnz	r2, 80110fc <_realloc_r+0x24>
 80110f0:	f7ff fbea 	bl	80108c8 <_free_r>
 80110f4:	2400      	movs	r4, #0
 80110f6:	4620      	mov	r0, r4
 80110f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fc:	f000 f81a 	bl	8011134 <_malloc_usable_size_r>
 8011100:	4285      	cmp	r5, r0
 8011102:	4606      	mov	r6, r0
 8011104:	d802      	bhi.n	801110c <_realloc_r+0x34>
 8011106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801110a:	d8f4      	bhi.n	80110f6 <_realloc_r+0x1e>
 801110c:	4629      	mov	r1, r5
 801110e:	4640      	mov	r0, r8
 8011110:	f7ff fc46 	bl	80109a0 <_malloc_r>
 8011114:	4607      	mov	r7, r0
 8011116:	2800      	cmp	r0, #0
 8011118:	d0ec      	beq.n	80110f4 <_realloc_r+0x1c>
 801111a:	42b5      	cmp	r5, r6
 801111c:	462a      	mov	r2, r5
 801111e:	4621      	mov	r1, r4
 8011120:	bf28      	it	cs
 8011122:	4632      	movcs	r2, r6
 8011124:	f7ff fbc2 	bl	80108ac <memcpy>
 8011128:	4621      	mov	r1, r4
 801112a:	4640      	mov	r0, r8
 801112c:	f7ff fbcc 	bl	80108c8 <_free_r>
 8011130:	463c      	mov	r4, r7
 8011132:	e7e0      	b.n	80110f6 <_realloc_r+0x1e>

08011134 <_malloc_usable_size_r>:
 8011134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011138:	1f18      	subs	r0, r3, #4
 801113a:	2b00      	cmp	r3, #0
 801113c:	bfbc      	itt	lt
 801113e:	580b      	ldrlt	r3, [r1, r0]
 8011140:	18c0      	addlt	r0, r0, r3
 8011142:	4770      	bx	lr

08011144 <_init>:
 8011144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011146:	bf00      	nop
 8011148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801114a:	bc08      	pop	{r3}
 801114c:	469e      	mov	lr, r3
 801114e:	4770      	bx	lr

08011150 <_fini>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	bf00      	nop
 8011154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011156:	bc08      	pop	{r3}
 8011158:	469e      	mov	lr, r3
 801115a:	4770      	bx	lr
